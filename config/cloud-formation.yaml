# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/Welcome.html

# Be sure to update the domain's name servers to point to the hosted zone's
# name servers, otherwise DNS resolution won't work. This step is manual
# because the domain isn't managed by CloudFormation.

# Certificates require manual validation. After creating a certificate with
# CloudFormation, you must go to the certificate manager in the AWS console and
# hit the "Create record in Route 53" button.

AWSTemplateFormatVersion: 2010-09-09
Description: Haskell Weekly

Parameters:

  DomainName:
    Type: String
    Default: haskellweekly.news

Resources:

  ApexCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Ref DomainName
      ValidationMethod: DNS

  ApexDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Aliases:
          - !Ref DomainName
        DefaultCacheBehavior:
          AllowedMethods:
            - DELETE
            - GET
            - HEAD
            - OPTIONS
            - PATCH
            - POST
            - PUT
          CachedMethods:
            - GET
            - HEAD
            - OPTIONS
          Compress: true
          ForwardedValues:
            QueryString: true
          TargetOriginId: !Sub origin.${DomainName}
          ViewerProtocolPolicy: redirect-to-https
        Enabled: true
        HttpVersion: http2
        Origins:
          - CustomOriginConfig:
              OriginProtocolPolicy: https-only
              OriginSSLProtocols:
                - TLSv1.2
            DomainName: !Sub origin.${DomainName}
            Id: !Sub origin.${DomainName}
        ViewerCertificate:
          AcmCertificateArn: !Ref ApexCertificate
          MinimumProtocolVersion: TLSv1.2_2018
          SslSupportMethod: sni-only

  ApexRecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      AliasTarget:
        DNSName: !GetAtt ApexDistribution.DomainName
        HostedZoneId: Z2FDTNDATAQYW2
      HostedZoneId: !Ref Zone
      Name: !Ref DomainName
      Type: A

  EmailRecordGroup:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneId: !Ref Zone
      RecordSets:
        - Name: !Sub fm1._domainkey.${DomainName}
          ResourceRecords:
            - fm1.haskellweekly.news.dkim.fmhosted.com
          TTL: 300
          Type: CNAME
        - Name: !Sub fm2._domainkey.${DomainName}
          ResourceRecords:
            - fm2.haskellweekly.news.dkim.fmhosted.com
          TTL: 300
          Type: CNAME
        - Name: !Sub fm3._domainkey.${DomainName}
          ResourceRecords:
            - fm3.haskellweekly.news.dkim.fmhosted.com
          TTL: 300
          Type: CNAME
        - Name: !Ref DomainName
          ResourceRecords:
            - 10 in1-smtp.messagingengine.com
            - 20 in2-smtp.messagingengine.com
          TTL: 300
          Type: MX
        - Name: !Sub k2._domainkey.${DomainName}
          ResourceRecords:
            - dkim2.mcsv.net
          TTL: 300
          Type: CNAME
        - Name: !Sub k3._domainkey.${DomainName}
          ResourceRecords:
            - dkim3.mcsv.net
          TTL: 300
          Type: CNAME
        - Name: !Ref DomainName
          ResourceRecords:
            - '"v=spf1 include:spf.messagingengine.com ?all"'
          TTL: 300
          Type: TXT

  MediaBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${AWS::StackName}-media

  MediaCertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Sub media.${DomainName}
      ValidationMethod: DNS

  MediaDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Aliases:
          - !Sub media.${DomainName}
        DefaultCacheBehavior:
          ForwardedValues:
            QueryString: false
          TargetOriginId: !Sub media.${DomainName}
          ViewerProtocolPolicy: redirect-to-https
        Enabled: true
        HttpVersion: http2
        Origins:
          - DomainName: !GetAtt MediaBucket.DomainName
            Id: !Sub media.${DomainName}
            S3OriginConfig:
              OriginAccessIdentity: !Sub origin-access-identity/cloudfront/${MediaIdentity}
        ViewerCertificate:
          AcmCertificateArn: !Ref MediaCertificate
          MinimumProtocolVersion: TLSv1.2_2018
          SslSupportMethod: sni-only

  MediaIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub cloud front origin access identity for ${AWS::StackName} stack

  MediaPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref MediaBucket
      PolicyDocument:
        Statement:
          - Action: s3:GetObject
            Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${MediaIdentity}
            Resource: !Sub arn:aws:s3:::${MediaBucket}/*

  MediaRecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      AliasTarget:
        DNSName: !GetAtt MediaDistribution.DomainName
        HostedZoneId: Z2FDTNDATAQYW2
      HostedZoneId: !Ref Zone
      Name: !Sub media.${DomainName}
      Type: A

  Zone:
    Type: AWS::Route53::HostedZone
    Properties:
      Name: !Ref DomainName
