1
00:00:00,000 --> 00:00:02,983
[MUSIC]

2
00:00:02,983 --> 00:00:05,480
Hi, welcome to the Haskell weekly podcast.

3
00:00:05,480 --> 00:00:09,100
This show is about Haskell,
a purely functional programming language.

4
00:00:09,100 --> 00:00:13,270
I'm Dustin Segers,
a software engineer here at ITProTV.

5
00:00:13,270 --> 00:00:18,730
And I'm with the lead engineer here,
and he is the host for today.

6
00:00:18,730 --> 00:00:19,720
>> Hey, Dustin.

7
00:00:19,720 --> 00:00:21,225
It's good to be here with you in studio.

8
00:00:21,225 --> 00:00:23,420
>> [LAUGH] It's good to be
here with you too, man.

9
00:00:23,420 --> 00:00:24,640
>> Thanks for joining me.

10
00:00:24,640 --> 00:00:26,290
My name's Taylor, as Dustin mentioned,

11
00:00:26,290 --> 00:00:31,510
I am the lead developer at ITPro,
I also publish the Haskell weekly podcast.

12
00:00:31,510 --> 00:00:34,790
And today we're gonna be
talking about a story

13
00:00:34,790 --> 00:00:38,635
that was in one of the older
issues about Boolean Blindness.

14
00:00:38,635 --> 00:00:39,900
>> Mm-hm.

15
00:00:39,900 --> 00:00:42,800
>> Dustin, could you explain to
me what Boolean Blindness is?

16
00:00:42,800 --> 00:00:48,084
>> So Boolean Blindness is basically,
where you are using a bool

17
00:00:48,084 --> 00:00:53,890
in place of maybe, something that
could be expressed a little bit.

18
00:00:56,090 --> 00:00:58,800
More or less generically?

19
00:00:58,800 --> 00:01:02,670
>> So, with a bool we have,
it's either true or it's false.

20
00:01:02,670 --> 00:01:03,170
>> Yes.

21
00:01:03,170 --> 00:01:06,080
>> And that doesn't encode any
interesting information there.

22
00:01:06,080 --> 00:01:08,400
Lots of things could be
represented as bools.

23
00:01:08,400 --> 00:01:08,960
>> Correct.

24
00:01:08,960 --> 00:01:13,887
>> A light switch could be a bool,
but Boolean blindness is saying that,

25
00:01:13,887 --> 00:01:17,812
maybe we're better off
encoding that as Light Switch,

26
00:01:17,812 --> 00:01:23,172
is a special data type that could either
be on or off instead of true or false.

27
00:01:23,172 --> 00:01:23,916
Is that what you're saying?

28
00:01:23,916 --> 00:01:25,549
>> Yes, pretty much, yeah.

29
00:01:25,549 --> 00:01:30,387
>> So, what are the benefits of modeling
one of these things as a data type

30
00:01:30,387 --> 00:01:32,360
rather than reusing bools.

31
00:01:32,360 --> 00:01:34,010
>> It's more expressive.

32
00:01:34,010 --> 00:01:36,940
So, let's use your light switch for
example.

33
00:01:36,940 --> 00:01:41,710
On or off is better than
just saying true or false.

34
00:01:41,710 --> 00:01:43,150
>> Right, cuz what does true mean?

35
00:01:43,150 --> 00:01:44,470
>> Exactly.

36
00:01:44,470 --> 00:01:49,820
So we could have a data type
that would be light switch,

37
00:01:49,820 --> 00:01:52,190
and we could pass it in to a function.

38
00:01:52,190 --> 00:01:55,760
And, it could be either on or

39
00:01:55,760 --> 00:02:00,830
off versus true or false, which gives
a bit more meaning to what you have.

40
00:02:00,830 --> 00:02:01,670
>> Exactly.

41
00:02:01,670 --> 00:02:05,900
That's really nice when you're calling the
function because instead of saying some

42
00:02:05,900 --> 00:02:10,910
function true, It'll say, some function
light switch on or light switch off.

43
00:02:10,910 --> 00:02:13,380
>> Correct.
>> That dream of self-documenting code.

44
00:02:13,380 --> 00:02:15,260
>> Yes, yes.

45
00:02:15,260 --> 00:02:18,300
>> And addition to the code being
self-documenting when you call it,

46
00:02:18,300 --> 00:02:22,290
the function, the documentation that
is generated for that function or,

47
00:02:22,290 --> 00:02:24,900
if you're just reading through the code,
that's gonna be much nicer as well.

48
00:02:24,900 --> 00:02:30,060
Because it's not gonna say, some function
takes five Booleans and returns something.

49
00:02:30,060 --> 00:02:33,300
It'll take a light switch state and
a door state, and

50
00:02:33,300 --> 00:02:35,080
all these different things that it needs.

51
00:02:35,080 --> 00:02:40,260
One function that we use very frequently
in our code bases here is filter.

52
00:02:40,260 --> 00:02:46,430
And filter says, give me some predicate,
some function that returns true or false.

53
00:02:46,430 --> 00:02:47,730
And give me a list and

54
00:02:47,730 --> 00:02:53,540
I'll give you back a smaller list
that fulfills that predicate.

55
00:02:53,540 --> 00:02:57,850
But for me, every time I use filter,
I have to think, is this function

56
00:02:57,850 --> 00:03:01,280
the thing that keeps things in or
the thing that keeps things out?

57
00:03:01,280 --> 00:03:04,410
And I can never remember, and
the type signature doesn't really help me.

58
00:03:04,410 --> 00:03:04,930
>> Right.

59
00:03:04,930 --> 00:03:07,140
>> Could you tell me how Boolean
blindness might help there,

60
00:03:07,140 --> 00:03:10,350
or not suffering from
Boolean blindness might help?

61
00:03:10,350 --> 00:03:15,554
>> You could say, so
how much a filter this list of users

62
00:03:15,554 --> 00:03:20,521
based on whether or
not they are part of a team, and

63
00:03:20,521 --> 00:03:25,013
your data type if you will,
could be on team or

64
00:03:25,013 --> 00:03:30,020
off team,
instead of just a regular old Boolean.

65
00:03:30,020 --> 00:03:32,986
And you could use your filter to say,

66
00:03:32,986 --> 00:03:39,110
I want to filter only these users who
are off the team, and then in that case,

67
00:03:39,110 --> 00:03:43,991
your filter will only take the users
who are not on the team and

68
00:03:43,991 --> 00:03:47,375
you can do whatever you want to there.

69
00:03:47,375 --> 00:03:49,205
>> Right, so
that's a lot clearer than saying,

70
00:03:49,205 --> 00:03:52,365
where team membership is true or
team membership is false,

71
00:03:52,365 --> 00:03:55,035
it's self-documenting just
on the name of the value.

72
00:03:55,035 --> 00:03:55,917
>> Correct.

73
00:03:55,917 --> 00:04:00,007
>> But that filter function itself
is still a little confusing because,

74
00:04:00,007 --> 00:04:03,407
we have to get the concept
we're interested in,

75
00:04:03,407 --> 00:04:06,647
which is are they on the team or
aren't they into a Boolean?

76
00:04:06,647 --> 00:04:10,657
So we have to say, some equality check
their, wouldn't it be nice if we could

77
00:04:10,657 --> 00:04:16,070
have a filter where instead of the filter
function itself taking a Boolean,

78
00:04:16,070 --> 00:04:19,440
it would take some other thing, like
keep this thing, or discard this thing.

79
00:04:19,440 --> 00:04:20,760
>> Right, yes.

80
00:04:20,760 --> 00:04:24,060
>> Instead of converting from
this user is on the team, or

81
00:04:24,060 --> 00:04:27,440
this user is off the team into a Boolean,
we would convert it into a,

82
00:04:27,440 --> 00:04:31,580
they should be kept as part of this filter
operation, or they should be removed.

83
00:04:31,580 --> 00:04:33,170
Doesn't that clean things up a little bit?

84
00:04:33,170 --> 00:04:33,970
>> Yes.

85
00:04:33,970 --> 00:04:37,520
>> Would you prefer to use a function like
that, or would you prefer to keep using

86
00:04:37,520 --> 00:04:40,310
the original filter that just
has bools all over the place?

87
00:04:40,310 --> 00:04:45,880
>> I'd probably prefer, yeah, the one that
does not use bools all over the place.

88
00:04:45,880 --> 00:04:46,800
>> Why is that?

89
00:04:46,800 --> 00:04:48,016
What makes it better?

90
00:04:48,016 --> 00:04:53,970
>> Well, it's more intuitive, it's more
expressive, so it's easier to understand.

91
00:04:55,300 --> 00:05:00,359
The ax murderer who comes in later,
six months down the road,

92
00:05:00,359 --> 00:05:03,482
and it's like, who wrote this code?

93
00:05:03,482 --> 00:05:04,608
Won't come to find me.
>> It happens all the time.

94
00:05:04,608 --> 00:05:07,528
[LAUGH]
>> Yes, exactly.

95
00:05:07,528 --> 00:05:13,145
He'll be a bit more docile I would think,
so yeah.

96
00:05:13,145 --> 00:05:14,895
>> He might put his ax away and

97
00:05:14,895 --> 00:05:16,820
take out something else
instead like a feather duster.

98
00:05:16,820 --> 00:05:18,205
[LAUGH]
>> Yeah, or a burger.

99
00:05:18,205 --> 00:05:18,827
Yeah.
>> Burger.

100
00:05:18,827 --> 00:05:20,582
[LAUGH]
>> [LAUGH]

101
00:05:20,582 --> 00:05:21,542
>> As a gift for the person,

102
00:05:21,542 --> 00:05:22,752
the earth is a wonderful code.

103
00:05:22,752 --> 00:05:25,792
>> Yes, [LAUGH]
>> [LAUGH] That's one way we might

104
00:05:25,792 --> 00:05:29,682
clean up this filter function and
avoid Boolean blindness.

105
00:05:29,682 --> 00:05:33,252
There are other ways too and
this blog post mentions a few of them.

106
00:05:33,252 --> 00:05:36,052
One example they give is changing
the name of the function.

107
00:05:36,052 --> 00:05:39,676
Because, for me like I said the problem
I have with filter is that,

108
00:05:39,676 --> 00:05:43,583
I can never remember does it filter
things in or does it filter them out?

109
00:05:43,583 --> 00:05:44,835
I don't know which way it goes?

110
00:05:44,835 --> 00:05:47,460
>> Mm-hm.
>> So maybe a better name would be better?

111
00:05:47,460 --> 00:05:50,020
Is there some other name we could use for
filter that might be good?

112
00:05:50,020 --> 00:05:52,329
>> Filtering in or
filter out would be nice.

113
00:05:52,329 --> 00:05:55,730
>> [LAUGH] It's a step in
the right direction for sure.

114
00:05:55,730 --> 00:05:58,310
Let's say that we did change
the name of the filter to.

115
00:05:58,310 --> 00:06:01,099
Filter in but it still took a Boolean.

116
00:06:01,099 --> 00:06:01,603
>> Okay.

117
00:06:01,603 --> 00:06:05,249
>> Is there any, like what's the upshot of
doing it that way versus the way we were

118
00:06:05,249 --> 00:06:07,960
talking about before about
using a different type.

119
00:06:07,960 --> 00:06:11,809
>> So,
filter in that would take me maybe a keep.

120
00:06:11,809 --> 00:06:13,569
>> Mm-hm, okay.

121
00:06:13,569 --> 00:06:19,869
>> The upshot there is when you're
not confused about what's going on,

122
00:06:19,869 --> 00:06:23,430
and the self documenting code dealio.

123
00:06:23,430 --> 00:06:28,620
And yeah,
it's just more expressive again, and

124
00:06:28,620 --> 00:06:33,740
it seems like it would
be better to upkeep,

125
00:06:33,740 --> 00:06:37,130
well to help with upkeep
in the future as well, so.

126
00:06:37,130 --> 00:06:40,815
>> Yeah, cuz imagine that, bringing
it back to our light switch example.

127
00:06:40,815 --> 00:06:41,502
>> Mm-hm.

128
00:06:41,502 --> 00:06:44,850
>> We currently have a very simple
light switch that is either on or off.

129
00:06:44,850 --> 00:06:48,240
But what if we upgrade our lights and
suddenly we have dimmers.

130
00:06:48,240 --> 00:06:50,520
And we want to filter out for
all the lights that are on.

131
00:06:50,520 --> 00:06:53,330
Well, how do we decide if a light is on or

132
00:06:53,330 --> 00:06:56,700
not, to keep it in this filter or
to rule it out?

133
00:06:56,700 --> 00:06:59,430
Maybe we wanna say well,
at 50% brightness, or

134
00:06:59,430 --> 00:07:02,340
once the dimmer switch hits halfway up,
then it counts as on.

135
00:07:02,340 --> 00:07:05,870
And in coding that I think,
is a lot clearer,

136
00:07:05,870 --> 00:07:10,350
because we would have a function
that takes a light switch state and

137
00:07:10,350 --> 00:07:13,330
gives us back a, do you keep it or
do you rule it out?

138
00:07:13,330 --> 00:07:15,040
Versus something that just
returns a Boolean, right?

139
00:07:15,040 --> 00:07:17,990
And then you're thinking, well what
is this Boolean used for later on?

140
00:07:17,990 --> 00:07:21,186
>> Right. [LAUGH] >> Yeah, and
it can be really challenging as you said,

141
00:07:21,186 --> 00:07:25,381
six months down the line, when that ax
wielding psychopath looks at your code.

142
00:07:25,381 --> 00:07:29,638
They're thinking, well I can sort of
understand the dis function returns true,

143
00:07:29,638 --> 00:07:33,610
when the light switch if more than 50% on,
but what does that mean?

144
00:07:33,610 --> 00:07:34,466
>> Right.
>> [LAUGH]

145
00:07:34,466 --> 00:07:35,060
>> Yes.

146
00:07:35,060 --> 00:07:37,410
>> So we've talked about two methods for

147
00:07:37,410 --> 00:07:40,960
changing filter to make it
more intention-revealing.

148
00:07:40,960 --> 00:07:45,520
Either, changing the type of
the function that it takes

149
00:07:45,520 --> 00:07:50,040
to return some better thing, like keep or
discard instead of a Boolean.

150
00:07:50,040 --> 00:07:52,130
We've also talked about renaming it.

151
00:07:52,130 --> 00:07:55,260
So instead of just filter,
you have filter in or filter out.

152
00:07:55,260 --> 00:07:56,060
>> Mm-hm.

153
00:07:56,060 --> 00:08:02,440
>> The third option presented in
this blog post is to make the type,

154
00:08:02,440 --> 00:08:05,100
return the thing that
you wanna end up with.

155
00:08:06,280 --> 00:08:11,060
So instead of saying, I'm only
selecting things to keep or discard,

156
00:08:11,060 --> 00:08:15,410
instead you're kind of mapping as you're
going along and producing new values.

157
00:08:15,410 --> 00:08:19,210
But you're wrapping those values in maybe,
and you're only keeping the ones

158
00:08:19,210 --> 00:08:22,750
that are just some value and
discarding all the ones that are nothings.

159
00:08:22,750 --> 00:08:26,750
That feels to me like it's very
clear about which ones to keep.

160
00:08:26,750 --> 00:08:30,395
Because obviously, if you have a nothing,
there isn't anything to keep there and

161
00:08:30,395 --> 00:08:32,125
you can go ahead and throw that one out.

162
00:08:32,125 --> 00:08:33,609
>> Right.
>> And when there's a jest,

163
00:08:33,609 --> 00:08:35,770
you can hang on to that thing.

164
00:08:35,770 --> 00:08:40,190
But, it's unfortunate I think,
that the two operations are getting balled

165
00:08:40,190 --> 00:08:45,018
together, where you have mapping and like
changing the values in this collection,

166
00:08:45,018 --> 00:08:48,901
at the same time as mapping over them and
filtering some of them out?

167
00:08:48,901 --> 00:08:50,173
>> Yeah.

168
00:08:50,173 --> 00:08:51,150
>> What do you think about that?

169
00:08:51,150 --> 00:08:54,359
Is that a good trade off or is that weird?

170
00:08:54,359 --> 00:09:00,772
>> So, my gut feeling says,
I don't like it, and mainly because,

171
00:09:00,772 --> 00:09:06,175
it's been drilled into my
head that mutation is evil.

172
00:09:06,175 --> 00:09:08,391
>> [LAUGH]
>> So it-

173
00:09:08,391 --> 00:09:09,527
>> It looks a little like mutation.

174
00:09:09,527 --> 00:09:11,817
>> Yeah, yeah, it does.

175
00:09:11,817 --> 00:09:18,468
Even if it's not explicitly mutation,
it does feel like we're changing,

176
00:09:20,459 --> 00:09:23,998
Some essential piece of this.

177
00:09:23,998 --> 00:09:26,700
It seems like side effects
are happening here.

178
00:09:26,700 --> 00:09:30,138
So, I know we need those, but

179
00:09:30,138 --> 00:09:35,099
just initially, I don't like that much?

180
00:09:35,099 --> 00:09:35,930
>> Don't like it?

181
00:09:35,930 --> 00:09:38,632
>> Yeah.
>> Yeah, I don't like it either, and for

182
00:09:38,632 --> 00:09:42,574
the reason you mentioned, but
also when I look at the type like so.

183
00:09:42,574 --> 00:09:47,503
If we had this weird filter function that
returned a maybe instead of returning

184
00:09:47,503 --> 00:09:52,010
either yes or no, or keep it or
don't keep it, or Boolean, whatever.

185
00:09:52,010 --> 00:09:55,770
It's not clear from the type signature
if the thing you're interested in doing

186
00:09:55,770 --> 00:09:59,120
is changing the shape of these
values in their collection.

187
00:09:59,120 --> 00:10:01,020
Or removing things from the collection.

188
00:10:01,020 --> 00:10:01,840
>> Right.

189
00:10:01,840 --> 00:10:05,415
>> And when we have the two
separate functions, map and filter,

190
00:10:05,415 --> 00:10:08,390
that does each of those
things very specifically.

191
00:10:08,390 --> 00:10:10,960
It can be clear to me as
a reader that this function,

192
00:10:10,960 --> 00:10:13,000
it's gonna keep all the elements in there.

193
00:10:13,000 --> 00:10:14,316
They may change a little bit, and

194
00:10:14,316 --> 00:10:17,090
hopefully they do otherwise we're
not doing anything interesting.

195
00:10:17,090 --> 00:10:17,710
>> Right.

196
00:10:17,710 --> 00:10:21,080
>> Or, when if I see a filter I can think
okay, this isn't gonna change any of them.

197
00:10:21,080 --> 00:10:23,050
It's only gonna remove some of them.

198
00:10:23,050 --> 00:10:26,016
>> And I like having that assurance
because, when I'm trying to step through

199
00:10:26,016 --> 00:10:29,262
code and think of all the states it could
be in, it's very useful for me to say.

200
00:10:29,262 --> 00:10:33,515
Well, I know this operation is gonna keep
all the elements that I'm dealing with or

201
00:10:33,515 --> 00:10:35,300
this one is not gonna change them.

202
00:10:35,300 --> 00:10:36,206
>> Right, yes.

203
00:10:36,206 --> 00:10:39,870
>> That makes debugging maintenance a lot
easier, so that's one of the reasons why I

204
00:10:39,870 --> 00:10:43,160
don't like the other method of
doing this filter functions.

205
00:10:43,160 --> 00:10:45,750
>> Gotcha,
yep I have to concur with those.

206
00:10:45,750 --> 00:10:49,270
>> Taking it a step further,
another suggestion this blog post has for

207
00:10:49,270 --> 00:10:52,330
a way to implement the same thing in yet
another way.

208
00:10:52,330 --> 00:10:55,480
It seems like there is an endless
number of ways to implement this really

209
00:10:55,480 --> 00:10:56,340
simple function.

210
00:10:56,340 --> 00:10:57,649
>> Yes.

211
00:10:57,649 --> 00:11:00,203
>> What they suggest is,
instead of returning a maybe,

212
00:11:00,203 --> 00:11:02,880
so either you have something,
or you don't.

213
00:11:02,880 --> 00:11:07,560
You could return a list that says,
either you have nothing or you have

214
00:11:07,560 --> 00:11:13,000
exactly one thing, or you have two or
three or thousand or infinity of them.

215
00:11:13,000 --> 00:11:14,910
Which is starting to look to me

216
00:11:14,910 --> 00:11:17,400
not at all like a filter operation,
>> Right

217
00:11:17,400 --> 00:11:18,840
>> And I'm having a hard time

218
00:11:18,840 --> 00:11:21,199
thinking of a filter where, like, okay,

219
00:11:21,199 --> 00:11:24,163
I want to filter out light
switches that are on or off.

220
00:11:24,163 --> 00:11:28,168
But, every time I look at a light switch,
I produce two light switches.

221
00:11:28,168 --> 00:11:29,992
>> Yeah, yeah.
>> That doesn't make any sense.

222
00:11:29,992 --> 00:11:32,325
>> [LAUGH] They're multiplying.

223
00:11:32,325 --> 00:11:35,286
>> [LAUGH] I just wanted to find
all the light switches are on and

224
00:11:35,286 --> 00:11:37,713
now I have twice as many
light switches in here.

225
00:11:37,713 --> 00:11:40,693
[LAUGH]
>> If only I could do that with money

226
00:11:40,693 --> 00:11:41,580
that'd be nice.

227
00:11:41,580 --> 00:11:44,028
>> [LAUGH]
>> I think that's coming in the next

228
00:11:44,028 --> 00:11:44,740
version of Haskell.

229
00:11:44,740 --> 00:11:47,320
[LAUGH]
>> Nice, print money, yes.

230
00:11:47,320 --> 00:11:51,876
>> Okay so, I think we've covered a lot of
interesting ways to tackle this one very

231
00:11:51,876 --> 00:11:55,412
simple problem of how do we
filter things out of collections,

232
00:11:55,412 --> 00:11:58,745
is there anything else you
wanted to say about this topic?

233
00:11:58,745 --> 00:12:04,200
>> No not really, other than that, I feel
like we encountered this a lot in ELM.

234
00:12:04,200 --> 00:12:04,858
>> Yeah.

235
00:12:04,858 --> 00:12:08,470
>> And I see that we are using it, but

236
00:12:08,470 --> 00:12:13,243
we're trying to avoid Boolean blindness by

237
00:12:13,243 --> 00:12:18,274
implementing types that,
convey what true or

238
00:12:18,274 --> 00:12:23,485
false may mean specific to that function,
so.

239
00:12:23,485 --> 00:12:27,679
>> Yeah, and I'm trying to think of a
concrete example that we've had recently,

240
00:12:27,679 --> 00:12:29,947
can you think of one
from our own front end?

241
00:12:29,947 --> 00:12:32,947
>> It's been a bit, but

242
00:12:32,947 --> 00:12:38,463
I think it is this user assigned or not?

243
00:12:38,463 --> 00:12:40,030
>> Mm-hm.
>> That might have been one of them.

244
00:12:40,030 --> 00:12:44,279
>> I know that we have a lot of, I think
they're called accordions in our UI.

245
00:12:44,279 --> 00:12:46,915
>> Yes, yeah.
>> Where, we have three steps, but

246
00:12:46,915 --> 00:12:49,325
only one step can be open at a time.

247
00:12:49,325 --> 00:12:49,910
>> Mm-hm.

248
00:12:49,910 --> 00:12:53,930
>> And I think,
it's kind of natural to reach for

249
00:12:53,930 --> 00:12:56,630
a Boolean in that case and
say, is this one open or not?

250
00:12:56,630 --> 00:12:57,970
True or false?

251
00:12:57,970 --> 00:13:00,555
And I think we try to represent
that as an actual type that

252
00:13:00,555 --> 00:13:01,200
says-
>> Yeah.

253
00:13:01,200 --> 00:13:03,410
>> This is accordion open or
accordion closed.

254
00:13:03,410 --> 00:13:06,470
>> Yeah, collapsed and
uncollapsed, I believe we did.

255
00:13:06,470 --> 00:13:08,230
>> And
does that make the code easier to read?

256
00:13:08,230 --> 00:13:11,743
Easier to maintain, is it,
>> Yeah, I would say definitely,

257
00:13:11,743 --> 00:13:15,314
even if it's just like small things,
you get the cognitive overhead.

258
00:13:15,314 --> 00:13:19,049
it's reduced just because you
don't have to think much about it.

259
00:13:19,049 --> 00:13:20,818
Like I said, it's just expressive.

260
00:13:20,818 --> 00:13:21,357
>> Yeah..
>> It's nice.

261
00:13:21,357 --> 00:13:23,900
>> You don't have to think
that's true mean this or that.

262
00:13:23,900 --> 00:13:24,760
>> Yeah,
>> And

263
00:13:24,760 --> 00:13:27,150
I know I stumble all the time
when we have a value or

264
00:13:27,150 --> 00:13:31,375
a function that itself is negated,
so it says like not turned on.

265
00:13:31,375 --> 00:13:32,470
>> Mm-hm.
>> Or turned off.

266
00:13:32,470 --> 00:13:35,507
And turned off equal true and I think
well okay, so that means that it's off,

267
00:13:35,507 --> 00:13:37,115
which means, turned on would be false.

268
00:13:37,115 --> 00:13:40,217
And with this specific type, you don't
have to jump through those hoops every

269
00:13:40,217 --> 00:13:42,030
time you are analyzing
one of these things.

270
00:13:42,030 --> 00:13:46,796
>> Right, and even the, let's say
I remember in that article he had

271
00:13:46,796 --> 00:13:51,057
a function of the type signature
that had a bunch of bools.

272
00:13:51,057 --> 00:13:55,592
The bools were then replaced with more
meaningful, types, you can just look

273
00:13:55,592 --> 00:13:59,920
at the function and determine a lot
more just from that alone as well.

274
00:13:59,920 --> 00:14:03,300
>> Exactly, do you feel like
writing functions like that, or

275
00:14:03,300 --> 00:14:06,390
writing code that uses
those functions is harder

276
00:14:06,390 --> 00:14:09,590
than writing the similar
versions that use Boolean's?

277
00:14:09,590 --> 00:14:13,031
>> I don't feel like they're harder.

278
00:14:13,031 --> 00:14:15,456
I feel like they're a lot easier to use.

279
00:14:15,456 --> 00:14:17,110
>> Mm-hm.

280
00:14:17,110 --> 00:14:21,960
>> So there may be a little bit of,
okay, I just need to suss out what

281
00:14:23,660 --> 00:14:25,930
true and false means here,
for this particular thing.

282
00:14:25,930 --> 00:14:28,953
And then name it which is one
of the hardest things to do.

283
00:14:28,953 --> 00:14:33,140
But, after I get done with that, yeah,
I think it's really nice to have.

284
00:14:33,140 --> 00:14:36,800
>> So you're talking about the kind of
mechanics of refactoring a function to

285
00:14:36,800 --> 00:14:38,880
use a specific type rather than Boolean,
right?

286
00:14:38,880 --> 00:14:40,130
>> Right, yeah, I'm sorry.

287
00:14:40,130 --> 00:14:42,440
>> No that's okay, that's good insight.

288
00:14:42,440 --> 00:14:46,854
I meant to ask about, just day to day
using one when you have to write a new

289
00:14:46,854 --> 00:14:51,858
function and you got to use one of these
that needs a specific type, is it annoying

290
00:14:51,858 --> 00:14:56,742
to have to import that type and wonder
why didn't they just use a Boolean here?

291
00:14:56,742 --> 00:15:01,714
>> I think after you
realize how useful it is

292
00:15:01,714 --> 00:15:06,400
to have an expressive type like this.

293
00:15:08,160 --> 00:15:13,720
Yeah, I think you get over that pretty
quickly if you have any sorts of doubts or

294
00:15:13,720 --> 00:15:16,511
yeah, negative feelings towards it.

295
00:15:16,511 --> 00:15:17,056
>> I agree.

296
00:15:17,056 --> 00:15:21,007
>> [LAUGH]
>> I've grown to dislike Boolean so much,

297
00:15:21,007 --> 00:15:24,521
when I see one in the code I think
there's a type lurking here.

298
00:15:24,521 --> 00:15:25,846
I need to write it down somewhere.

299
00:15:25,846 --> 00:15:29,170
[LAUGH]
>> We've been talking about

300
00:15:29,170 --> 00:15:33,290
Boolean Blindness, and how you can avoid
it by using more expressive types.

301
00:15:33,290 --> 00:15:36,580
With me today, has been Dustin,
once of the engineers here at ITPro.

302
00:15:36,580 --> 00:15:38,070
Thanks, Dustin for joining me.

303
00:15:38,070 --> 00:15:39,680
>> And thank you for having me.

304
00:15:39,680 --> 00:15:42,310
>> And thank you, for
listening to the Haskell weekly podcast.

305
00:15:42,310 --> 00:15:44,200
This has been episode four.

306
00:15:44,200 --> 00:15:48,900
If you liked our show, find out more
at our website HaskellWeekly.news.

307
00:15:48,900 --> 00:15:50,140
Thanks again for listening.

308
00:15:50,140 --> 00:15:53,173
I've been your host, Taylor Fausak,
and we'll see you next week.

309
00:15:53,173 --> 00:15:57,027
[MUSIC]
