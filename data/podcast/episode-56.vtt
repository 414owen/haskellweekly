WEBVTT

00:00:07.170 --> 00:00:08.640
>> Hey there Haskell Weekly listeners.

00:00:08.670 --> 00:00:11.880
Welcome to another episode of the Haskell Weekly podcast.

00:00:11.970 --> 00:00:13.590
I'm your host Taylor Fausak.

00:00:13.680 --> 00:00:16.590
I'm the Director of Software Engineering at ACI Learning.

00:00:17.100 --> 00:00:18.570
And with me today is Cam.

00:00:18.870 --> 00:00:20.115
Thanks for joining me today, Cam.

00:00:20.985 --> 00:00:21.825
>> Hey Taylor.

00:00:21.825 --> 00:00:23.205
Nice to, nice to be here.

00:00:23.235 --> 00:00:25.185
It's always good to catch up.

00:00:25.214 --> 00:00:27.375
I know we've seen each other a couple times this week for lunch.

00:00:27.404 --> 00:00:28.455
So, you know.

00:00:29.085 --> 00:00:30.375
What, what's another day.

00:00:30.525 --> 00:00:32.205
It's three days this week we've seen each other.

00:00:32.754 --> 00:00:33.655
Whether that be virtual

00:00:33.655 --> 00:00:38.084
...
>> Yeah, unfortunately no TexMex today,
unless that's what you had for lunch, but.

00:00:38.504 --> 00:00:38.805
>> Nope.

00:00:38.864 --> 00:00:43.195
I went to a place in town that, uh, just like kind of teriyaki bowls.

00:00:43.525 --> 00:00:44.025
Fantastic.

00:00:44.365 --> 00:00:45.214
Good good stuff.

00:00:45.720 --> 00:00:46.199
Uh, but yeah.

00:00:46.199 --> 00:00:46.559
>> Sounds good.

00:00:47.190 --> 00:00:48.330
Cam, I didn't give you an intro.

00:00:48.339 --> 00:00:49.379
You want to intro yourself?

00:00:49.830 --> 00:00:50.430
>> Uh, sure.

00:00:50.669 --> 00:00:51.269
My name's Cam.

00:00:53.280 --> 00:00:53.640
Just kidding.

00:00:53.819 --> 00:00:54.839
My name's Cameron Gera.

00:00:54.900 --> 00:00:59.280
Uh, I am a senior software engineer at, uh, Caribou now.

00:00:59.280 --> 00:01:04.739
Our name was previously MotoRefi and we just relaunched on Monday a new brand.

00:01:04.739 --> 00:01:10.320
So, uh, yup, that's been really most of
my week anyways, but yeah, it's been good.

00:01:10.320 --> 00:01:12.270
How's uh, how's things in the ITPro world.

00:01:13.649 --> 00:01:14.399
>> It's going good.

00:01:14.460 --> 00:01:18.399
Uh, I actually am off today and I was off yesterday for veteran's days.

00:01:18.399 --> 00:01:24.000
So it's been a short week for me and we got Thanksgiving
coming up, coming up in a couple weeks and then Christmas.

00:01:24.000 --> 00:01:32.070
So getting into that holiday vibe, um, but it's been good, as I mentioned last
week, still working on that merger with practice labs, which is going well.

00:01:32.429 --> 00:01:37.520
And, uh, and in terms of tech stuff, as a
team, we are working on moving a lot of.

00:01:38.910 --> 00:01:46.440
Models our database models into persistent from the previous
ORM that we were using and that's going really well.

00:01:46.440 --> 00:01:52.950
And we're looking forward to being done with that migration, but we've
been hitting very interesting little tricky bits throughout the process.

00:01:53.010 --> 00:01:56.580
Nothing that's persistence fault, just like, oh, this thing does it that way.

00:01:56.580 --> 00:01:58.380
And persistent does it this other way.

00:01:58.380 --> 00:02:00.810
And now we have to make those things agree with each other.

00:02:01.350 --> 00:02:01.650
>> Yup.

00:02:01.770 --> 00:02:03.790
I mean, that's really moving.

00:02:04.755 --> 00:02:06.375
Major system over, right?

00:02:06.425 --> 00:02:14.355
I mean, yes, it's just a database layer and
interaction library, but it does do things differently.

00:02:14.355 --> 00:02:16.005
And it does a lot of things for you.

00:02:16.005 --> 00:02:23.625
So when you change those, it's 90% of the time not going
to be one for one replacement and you'll have to do some

00:02:24.495 --> 00:02:27.525
mix and matching to get it, uh, to a nice, good place.

00:02:28.185 --> 00:02:28.545
>> Yeah.

00:02:28.665 --> 00:02:32.625
And I was actually talking about this with the team and I remarked.

00:02:33.584 --> 00:02:42.105
Earlier in my career, when I was working on a Ruby code base of
similar size and age, it would have been unthinkable to change

00:02:42.135 --> 00:02:48.524
our core database, like the core library that talks to the
database that would, there's no way you could confidently do that.

00:02:48.975 --> 00:02:56.685
And the fact that it is even a possible refactoring we can do in our
Haskell code base, I think speaks to the overall maintainability of Haskell.

00:02:57.660 --> 00:03:00.090
In my opinion, one of its biggest strengths.

00:03:01.240 --> 00:03:01.600
>> yeah.

00:03:02.040 --> 00:03:02.370
Yeah.

00:03:02.400 --> 00:03:08.310
We're using Postgres simple right now because we don't really have
a ton of database interactions at the moment with microservice

00:03:08.400 --> 00:03:11.850
architecture, we can kind of keep it isolated and keep it pretty small.

00:03:11.940 --> 00:03:22.590
Um, and when we do do queries we're using, uh, the SQL quasi quoter from
Postgres simple quasi quoter or whatever it's called, uh, I like it.

00:03:23.010 --> 00:03:23.340
Yeah.

00:03:23.610 --> 00:03:24.450
It's more pretty well.

00:03:24.630 --> 00:03:25.500
So far haven't had.

00:03:26.625 --> 00:03:28.935
Production issues or anything like that.

00:03:28.995 --> 00:03:35.565
So, and we've, I guess this is the fifth day of our being in production state.

00:03:35.805 --> 00:03:46.455
Um, so now we've, we've got like for our new product that we're doing,
which is the insurance product, uh, that I'm a part of, we already have

00:03:46.485 --> 00:03:50.655
close to 300 leads just in this week and it's not been marketed or anything.

00:03:50.655 --> 00:03:54.165
So it's a pretty cool given some.

00:03:54.885 --> 00:03:56.805
Yeah, it's nice to see that everything works.

00:03:57.195 --> 00:04:01.935
You know, you can say yes, I want to make this thing
and I want to see that it works, but the fact that we

00:04:01.935 --> 00:04:05.325
hadn't out of any of the teams, we had really no fires.

00:04:05.955 --> 00:04:10.485
Um, that's coming from our code, so, and it's worked well.

00:04:10.485 --> 00:04:18.915
We've already had some insurance request transferred over to
the insurance agency and all that stuff's been moved through.

00:04:18.915 --> 00:04:22.755
So, I mean, it's, it's nice to see that the power of your.

00:04:24.255 --> 00:04:31.425
Programming language work and yeah, your plans actually
show up to do something that you want it to do.

00:04:32.865 --> 00:04:33.435
>> Agreed.

00:04:33.555 --> 00:04:35.505
I was going to ask what's up with you.

00:04:35.505 --> 00:04:38.985
What's new at Caribou, but it sounds like you just told me, so thanks.

00:04:39.015 --> 00:04:40.005
>> Look at you, rhyming.

00:04:40.425 --> 00:04:42.405
What's new at Caribou.

00:04:43.635 --> 00:04:48.435
>> And I feel like that also ties into
what we were planning on talking about today.

00:04:49.289 --> 00:04:51.930
It was a bit of a slow news week in the Haskell world.

00:04:51.930 --> 00:05:00.090
So rather than doing what we normally do, which is kind of
review a blog post from the past week, um, we're going to answer

00:05:00.090 --> 00:05:04.620
our first listener question, which came to us through Slack.

00:05:04.919 --> 00:05:11.700
So thank you very much to drew on the Haskell
Foundation slack for sending me a question and he asked.

00:05:12.719 --> 00:05:17.250
He would like to know how to structure real large applications.

00:05:17.280 --> 00:05:22.609
Do you use tagless final or MTL or reader T or free monads.

00:05:23.250 --> 00:05:25.799
So specifically he seems to be asking about.

00:05:26.960 --> 00:05:31.110
The monad stack that is behind the scenes powering everything.

00:05:31.110 --> 00:05:41.010
So not like which, you know, web framework are you using
or, or how are you deploying it or how do you test it?

00:05:41.040 --> 00:05:41.730
None of those things.

00:05:41.730 --> 00:05:50.160
So, um, I think cam you, and I obviously have some shared experience at
ACI Learning, working on this, and you have some new experience at caribou.

00:05:50.160 --> 00:05:50.340
So.

00:05:51.055 --> 00:05:56.705
Um, we have some answers to this and hopefully they'll
be satisfactory, but you want to get us going here.

00:05:56.705 --> 00:05:59.005
Cam, what are you guys doing at caribou in this regard?

00:05:59.335 --> 00:06:05.215
>> Yeah, so, um, with our microservices,
um, we have really kind of a core monoid.

00:06:05.275 --> 00:06:06.835
We use more monoid stack.

00:06:06.865 --> 00:06:09.895
That's just really a wrapper around reader T with an environment.

00:06:09.925 --> 00:06:12.655
So, um, for us, we don't necessarily.

00:06:14.385 --> 00:06:19.965
We just need to make sure we have an environment that
we can access anywhere in the pro each of our services.

00:06:19.965 --> 00:06:26.715
So, uh, that way we can call out to third-party services
or a call out to the database, those kinds of things.

00:06:26.715 --> 00:06:29.715
So, uh, you know, we, we found that reader cheese.

00:06:30.105 --> 00:06:31.275
Good enough for us.

00:06:31.365 --> 00:06:38.175
Um, another little thing we have on top of that is, or
another, some of the classes that we're deriving, uh,

00:06:38.205 --> 00:06:40.485
for that would be like, we're actually using UnliftIO.

00:06:40.755 --> 00:06:42.255
So we don't have to like.

00:06:43.395 --> 00:06:46.365
Run something in IO in the monad, uh, which has been kind of cool.

00:06:46.935 --> 00:06:50.265
And, um, uh, there's a couple other things.

00:06:50.295 --> 00:07:00.344
I mean, my reader, uh, in the basics, obviously applicative,
monad functor, um, I don't have the whole shebang in

00:07:00.344 --> 00:07:03.585
front of me, but overall it's not overly complicated.

00:07:03.914 --> 00:07:07.385
It's yeah, but it's a, it's a reader T How about you?

00:07:07.385 --> 00:07:08.534
>> So this reader T.

00:07:09.375 --> 00:07:12.105
Oh, I'll answer your question in a second, but I got some for you.

00:07:12.555 --> 00:07:17.835
Your reader t is it wrapped around IO or is it wrapped around something else?

00:07:17.925 --> 00:07:20.145
Uh, you know, what's the base monad for the reader T

00:07:20.805 --> 00:07:29.805
>> yeah, we originally, I was kind of leaving that to, up to the
we're we're allowing that to be polymorphic, but more recently we've

00:07:29.805 --> 00:07:34.365
been more just IO because there's not really a lot that we're doing.

00:07:35.955 --> 00:07:37.845
It has to be a different type.

00:07:38.175 --> 00:07:41.865
Um, we don't have to be in a different monad to execute that.

00:07:41.865 --> 00:07:46.365
So, uh, yeah, IO's really the, the core monad underneath.

00:07:47.025 --> 00:07:47.475
>> Okay.

00:07:47.835 --> 00:07:58.005
And then when you write functions that need to, or that ultimately get
executed in this environment, do you write them with concrete constraints

00:07:58.005 --> 00:08:01.945
that say this particular reader T with this environment in this base

00:08:01.974 --> 00:08:03.885
monad or do you say something like.

00:08:05.040 --> 00:08:08.370
Has database access as a constraint on the whole thing.

00:08:08.550 --> 00:08:10.349
And then that's just a polymorphic M

00:08:11.520 --> 00:08:19.500
>> um, we've right now, since our services are so small and
we're kind of trying to make sure we can like easily explain what's

00:08:19.500 --> 00:08:26.909
going on in our Haskell code to other others in the organization
who don't know Haskell yet we are being pretty explicit in that.

00:08:26.909 --> 00:08:30.900
So, you know, most monadic functions are our app.

00:08:31.530 --> 00:08:33.530
Um, that's our monad name.

00:08:34.590 --> 00:08:35.189
It's fine.

00:08:35.250 --> 00:08:41.449
It's weird for me because I know where I'm, I'm used to what we're
doing, ACI, where we need to have something fun for our monoid

00:08:41.459 --> 00:08:45.060
name, you know, something different, so, uh, it, it's not bad.

00:08:45.060 --> 00:08:54.900
It's just different for me, but it's, um, I totally lost my train of
thought there, but, uh, w what was your question again, on that piece?

00:08:54.930 --> 00:08:59.280
>> You were talking about, um, constraints versus concrete type signatures.

00:08:59.520 --> 00:08:59.819
>> Yeah.

00:08:59.910 --> 00:09:00.900
So we're concrete.

00:09:02.865 --> 00:09:03.195
>> Yeah.

00:09:03.975 --> 00:09:04.425
Nice.

00:09:04.515 --> 00:09:06.705
Uh, so you were asking me about what we do at ACI.

00:09:06.735 --> 00:09:09.705
Obviously you kind of know already, so this
is more for the benefit of the listener.

00:09:10.410 --> 00:09:16.589
Uh, for context, uh, we currently have essentially one monad stack.

00:09:16.589 --> 00:09:21.420
We have multiple executables that we end up
delivering, but they all use the same on ad stack.

00:09:21.449 --> 00:09:22.890
Now that didn't used to be the case.

00:09:23.520 --> 00:09:31.229
And it's really similar to what you're describing, where we
have a new type wrapper that has a reader T inside of it.

00:09:31.680 --> 00:09:33.540
And then that's wrapped around.

00:09:34.425 --> 00:09:45.705
Um, usually IO, but sometimes it's wrapped around servant handler because
we use the same monad stack for both our servant handlers and for non

00:09:45.705 --> 00:09:52.485
web related stuff, stuff that runs like on our job queue or locally, if
we need to run a script or something like that, they all use the same.

00:09:52.485 --> 00:09:55.165
Monoid with a different choice of an inner monad.

00:09:56.355 --> 00:10:10.680
And as a result, many of our T uh, Yeah, type signatures for
functions are polymorphic over at least that inner, um, monad choice.

00:10:10.739 --> 00:10:19.380
Usually it will say you can sub in whatever M you want
here, but it has to be monoid IO or something like that.

00:10:19.739 --> 00:10:20.069
Right.

00:10:20.819 --> 00:10:25.079
And what we've been trying to do recently is move more towards.

00:10:25.845 --> 00:10:35.935
A capability as a constraint, um, which is usually in the community
called MTL style after the library that implements all these things

00:10:35.955 --> 00:10:45.345
where instead of saying, you have to be this specific monoid, uh, rather
we're trying to say you can be any monad that has, let's say, access

00:10:45.345 --> 00:10:50.385
to Postgres, our database or access to Recurly our payment provider.

00:10:51.345 --> 00:10:56.415
And these are very coarse-grained, uh, Constraints.

00:10:56.415 --> 00:10:58.825
We're not saying, you know, read access to these things or write.

00:10:58.845 --> 00:11:02.265
Access or a particular model within the table or anything like that.

00:11:02.265 --> 00:11:05.295
Just can talk to the database is a big

00:11:05.325 --> 00:11:05.835
>> brush.

00:11:06.255 --> 00:11:06.495
Yeah.

00:11:06.495 --> 00:11:18.015
W D is that a type class for you guys or is that just a conglomerate of, uh,
other, you know, derived instances that are just kind of tight to this one?

00:11:19.064 --> 00:11:20.145
>> It's actually a bit of both.

00:11:20.175 --> 00:11:28.244
So we have defined our own custom type classes to represent
new constraints that we want to abstract over in the system.

00:11:28.305 --> 00:11:30.795
For instance, I mentioned Recurly our payment processor.

00:11:31.454 --> 00:11:36.525
That's one where the capability to communicate with the Recurly API is.

00:11:37.860 --> 00:11:40.650
Behind this constraint that we create a new type class.

00:11:41.040 --> 00:11:48.390
Uh, but like I mentioned earlier, we're moving stuff over to persistent
and persistent provides a lot of type classes for doing this stuff already.

00:11:48.390 --> 00:11:55.590
They have one for reading or performing database
queries that are read only, or read-write.

00:11:56.160 --> 00:12:06.915
So we're trying to use those when we can and, um, Our motivation for
doing this change was that we're trying also to write more tests and

00:12:06.915 --> 00:12:15.315
it can be convenient to have a function that is polymorphic over these
things, not necessarily so that you can pick a different implementation.

00:12:15.345 --> 00:12:17.815
Like we try to use a real Postgres database in.

00:12:18.525 --> 00:12:27.105
For example, but we don't want to talk to Recurly actually in our test suite,
because maybe you don't have an internet connection when you're running your

00:12:27.105 --> 00:12:34.785
tests or maybe you just don't want to hit Recurly 30 times over and over
again, while you're running the test suite trying to fix something else.

00:12:35.655 --> 00:12:38.655
So having it be polymorphic, lets you sub those things out.

00:12:38.685 --> 00:12:44.025
Or even if you are using the real thing, like with the Postgres
database, having it be polymorphic makes it so that you don't have.

00:12:45.090 --> 00:12:49.920
Um, set up the rest of the config to fulfill
that environment that you may not care about.

00:12:49.949 --> 00:12:51.000
So it's just a little bit easier.

00:12:51.720 --> 00:12:52.140
Nice.

00:12:52.170 --> 00:12:52.470
Yeah.

00:12:52.500 --> 00:13:04.079
>> I, uh, just this week, actually I was pulling out a, we use message
DB, which is kind of an event sourcing, um, I guess set up for Postgres.

00:13:04.380 --> 00:13:07.860
So they have kind of their own sets of
functions and things like that that you can use.

00:13:07.860 --> 00:13:11.400
And, um, and so we're using that and we have it in all of our applications.

00:13:11.400 --> 00:13:13.230
And so I was really getting to the.

00:13:14.145 --> 00:13:16.035
These are this, none of this is really that different.

00:13:16.125 --> 00:13:22.155
So I've actually pulled it out into a library
that I'm hoping maybe open source here soon.

00:13:22.515 --> 00:13:29.025
Um, that is, you know, I've currently namespace
it behind like database Postgres message GB.

00:13:29.025 --> 00:13:30.105
So it's clear.

00:13:30.105 --> 00:13:30.345
Okay.

00:13:30.345 --> 00:13:33.435
You, it's got to really be the Postgres implementation of message.

00:13:33.465 --> 00:13:33.855
GB.

00:13:34.365 --> 00:13:34.545
Right.

00:13:34.545 --> 00:13:41.865
And then, um, I created a, for all the functions within
that, um, instead of binding it to a specific monad.

00:13:42.734 --> 00:13:44.865
You know, uh, message DB or something like that.

00:13:44.895 --> 00:13:51.795
I opted to go with the type class route and say like,
yes, if it has this type class, then it can work.

00:13:51.795 --> 00:13:59.775
So now each of our app monads in our services can just
derive their own instance for getting the configuration and

00:13:59.775 --> 00:14:01.785
getting the connection and pool and those kinds of things.

00:14:02.295 --> 00:14:04.785
Uh, and that way they're separated out.

00:14:04.815 --> 00:14:07.365
So I felt, I thought that was a pretty good win this week.

00:14:08.520 --> 00:14:12.330
So that's, uh, it just sounds very familiar to what you were just speaking of.

00:14:13.380 --> 00:14:13.830
>> Yeah.

00:14:13.860 --> 00:14:16.530
I think there's a lot of commonality between these things.

00:14:16.980 --> 00:14:25.260
Um, but for you, if you were to give advice to somebody who, you know,
drew asking this question, how should I structure an application?

00:14:25.350 --> 00:14:26.190
What would be your answer?

00:14:28.190 --> 00:14:30.630
>> I mean, I hate this, but it depends.

00:14:31.620 --> 00:14:35.820
So I know that's not a good answer, but that's the honest answer here because.

00:14:37.574 --> 00:14:37.935
To me.

00:14:37.935 --> 00:14:43.844
I think it depends on first of all, how large your
application is, what the purpose of your application is.

00:14:43.844 --> 00:14:47.444
And really overlarge like overarching, like direction.

00:14:47.444 --> 00:14:48.344
Your company's trying to go.

00:14:48.375 --> 00:14:59.235
So for us, we're going with a microservice architecture and we really
care about just being consistent because you have a lot of microservices

00:14:59.235 --> 00:15:02.954
that are really not all that different, but you don't want to have.

00:15:04.155 --> 00:15:07.084
Five different styles of code.

00:15:07.084 --> 00:15:14.625
And so right now we're, we're creating, you know, concrete,
um, dark, concrete, monad selection and things like that.

00:15:14.625 --> 00:15:18.495
So we're not abstracting any of that away because we're not really concerned.

00:15:18.495 --> 00:15:22.515
Like we do have some Servant stuff, but we're actually
running that in IO rather than in the servant handler.

00:15:23.025 --> 00:15:30.194
And so we don't have to really worry about handling
two different monad, you know, 200 Lyme on ads.

00:15:31.515 --> 00:15:32.835
Our command handle that did.

00:15:32.835 --> 00:15:35.025
And that's what I kind of like, which was our first service.

00:15:35.265 --> 00:15:38.405
And I was using, I was really using my knowledge base from what were you doing?

00:15:38.425 --> 00:15:38.985
ACI.

00:15:39.435 --> 00:15:44.205
And, but through some of the work we've done and
you kind of simplifying it, we realized, okay.

00:15:44.235 --> 00:15:46.065
I O is really the only thing we need to be in.

00:15:46.875 --> 00:15:52.575
Um, so for me, I would say, keep it as simple as you can.

00:15:53.325 --> 00:15:59.205
And, um, I mean, I definitely did like the
parameterized monoid, you know, rather.

00:15:59.985 --> 00:16:05.895
Saying, it's always this one, but, uh, with these small
services, it makes sense with larger services, I would

00:16:05.895 --> 00:16:09.435
definitely be on the boat of, yeah, parameterizing it.

00:16:10.125 --> 00:16:13.875
And, you know, being dynamic or polymorphic in that way.

00:16:15.615 --> 00:16:16.095
How about you?

00:16:16.725 --> 00:16:18.165
>> I fully agree with that.

00:16:19.079 --> 00:16:21.329
I think it definitely depends.

00:16:21.329 --> 00:16:28.410
But as a general rule, my suggestion is going to be stick
with reader T until you start to feel the pain of that.

00:16:28.890 --> 00:16:36.030
And you may even be able to address some of the pain by using
a library that gives you some niceties with this approach.

00:16:36.060 --> 00:16:42.449
So like the Rio library or Rio, I can never remember
which way it's meant to be pronounced that library.

00:16:42.630 --> 00:16:45.839
Um, codifies this reader T.

00:16:46.800 --> 00:16:49.890
Idea and provides you a lot of common helpers with it.

00:16:49.920 --> 00:16:55.110
So it can be really useful to use that rather
than slowly building up all those things yourself.

00:16:55.770 --> 00:16:57.360
Um, yeah, go ahead.

00:16:57.540 --> 00:16:58.020
>> Oh, sorry.

00:16:58.020 --> 00:16:58.170
Yeah.

00:16:58.170 --> 00:17:06.839
I was just going to say, um, in aggreance there reader T until
you can't, um, and then also like deriving monad reader in that

00:17:06.839 --> 00:17:12.000
reader T so you can just kind of call asks whenever it's pretty.

00:17:12.750 --> 00:17:13.440
It's pretty nice.

00:17:13.440 --> 00:17:14.069
It's convenient.

00:17:14.430 --> 00:17:14.490
I

00:17:14.490 --> 00:17:14.819
>> would say.

00:17:16.109 --> 00:17:16.770
Yes.

00:17:16.770 --> 00:17:22.170
Make liberal use of the deriving mechanism to
get all the hand handy instances that you need.

00:17:23.129 --> 00:17:31.620
Um, I was going to mention that, like I said, we have been moving a
little bit toward using more MTL style constraints on our functions,

00:17:31.620 --> 00:17:38.940
and that's a natural extension of this application architecture,
where you have something concrete and you want to make it polymorphic.

00:17:38.940 --> 00:17:39.780
And this is the way that you.

00:17:40.574 --> 00:17:44.695
But the kind of other approach in the community is free monads.

00:17:44.715 --> 00:17:48.465
And I haven't talked much about those because I haven't used them in anger.

00:17:48.495 --> 00:17:56.475
I am aware of them and I know kind of what they do, but I haven't used
them enough to really feel confident, having an opinion about them.

00:17:57.014 --> 00:18:04.544
But it seems to me like taking an application
that's written as a reader T um, app monad.

00:18:05.430 --> 00:18:08.700
That could be a challenge to pull that into the world of Fremont ads.

00:18:08.730 --> 00:18:14.790
And maybe that's not true again, I don't really have experience
doing this, but that's why I'm not talking much about this at least.

00:18:14.970 --> 00:18:16.320
So Fremont ads could be good.

00:18:16.380 --> 00:18:16.920
Could be bad.

00:18:16.980 --> 00:18:17.580
I really don't know.

00:18:18.000 --> 00:18:18.300
>> Yeah.

00:18:18.360 --> 00:18:24.180
And I also am in that boat of not really, I mean, I've
read some posts on free monads and got the general idea.

00:18:24.825 --> 00:18:29.985
Never have put it into practice in production, so I can't speak to it.

00:18:30.045 --> 00:18:34.035
Um, but I do say, you know, if the monads
just want to be free, let them be free.

00:18:34.875 --> 00:18:38.865
You know, like that's all I got to say about that one.

00:18:38.955 --> 00:18:41.795
I know that was obviously terrible.

00:18:41.825 --> 00:18:43.225
Not the answer to free monads.

00:18:43.245 --> 00:18:46.514
So, uh, tell me that I'm wrong on the internet.

00:18:46.725 --> 00:18:47.145
It's okay.

00:18:48.165 --> 00:18:52.965
>> And then the last note I have on this is that
both you and I are coming at this from the viewpoint.

00:18:54.345 --> 00:19:02.325
Generally speaking a web application and we have associated
services that run like a job queue, or like I mentioned at the

00:19:02.325 --> 00:19:04.965
top of the show, someone off scripts or something like that.

00:19:05.415 --> 00:19:08.685
But typically the apps you and I have built are web apps.

00:19:08.774 --> 00:19:13.815
So if you were not building a web app, this advice may not apply quite as much.

00:19:14.385 --> 00:19:21.495
Um, and really the only other thing that I have a big amount of
experience building in Haskell is a command line application where.

00:19:22.200 --> 00:19:28.920
It is something that takes in an input file and processes it
and spits out an output file, which describes many, many things.

00:19:29.250 --> 00:19:32.460
Uh, it's a rocket league replay parser, but the details aren't super important.

00:19:33.150 --> 00:19:38.610
And the way I've structured, that application
is not using this reader T concept.

00:19:38.700 --> 00:19:49.665
And instead, what I do is the, uh, Pure core imperative, shell architecture
that Gary Bernhardt talks about that isn't specific to Haskell.

00:19:49.754 --> 00:19:59.565
And what that means is I do all of the IO at the boundaries of my system and I
say, okay, I, you know, read my input, file, read the config, figure out what

00:19:59.565 --> 00:20:07.875
I'm going to do, set everything up and then hand it off to a pure thing that
computes the answer, or, you know, does the computation, the analysis, whatever.

00:20:09.030 --> 00:20:11.129
And then produces a pure value as its output.

00:20:11.639 --> 00:20:18.720
And then again, hand it hand that back off to the IO world and say, okay, pretty
print this, or print it out to a file or do whatever it is you need to do.

00:20:18.750 --> 00:20:19.800
You know, I'm done with my part.

00:20:19.860 --> 00:20:27.300
And I really like structuring that thing, structuring things
that way, because it lets me test things much easier so that

00:20:27.300 --> 00:20:33.450
I can assume the IO part is pretty small and it'll probably
do what it's supposed to do and I can test the pure part.

00:20:33.520 --> 00:20:34.070
in the middle.

00:20:35.100 --> 00:20:37.950
And obviously there are many different types of applications.

00:20:37.980 --> 00:20:40.020
These are just the two that I've worked on most commonly.

00:20:40.020 --> 00:20:42.420
So that's what my advice is going to be biased toward.

00:20:44.300 --> 00:20:45.590
>> Yeah, I don't, yeah.

00:20:45.740 --> 00:20:48.980
I mean, um, web application all the way at this point.

00:20:49.580 --> 00:20:57.260
So maybe, maybe one day I'll get into the realm of a CLI
with Haskell or something along those lines, but, uh,

00:20:58.129 --> 00:21:01.820
yeah, I'm learning all about tiny micro web services.

00:21:03.030 --> 00:21:07.170
Um, aggregators and event sourcing and CQRS and all kinds of fun jazz.

00:21:07.170 --> 00:21:09.240
And it's been actually really cool to see and understand.

00:21:09.720 --> 00:21:15.120
>> So, yeah, there's a lot of great variety in
web apps and lots of fun problems they can solve.

00:21:15.330 --> 00:21:20.670
I just wanted to acknowledge that there are other types
of apps and our advice may not apply too much to them.

00:21:20.670 --> 00:21:24.240
So if you're working on, you know, a real time trading system or something like.

00:21:25.065 --> 00:21:28.905
You know, maybe use reader T, maybe it works
or maybe do something completely different.

00:21:29.175 --> 00:21:29.534
I don't know.

00:21:30.225 --> 00:21:30.495
>> Yeah.

00:21:31.095 --> 00:21:31.335
Yeah.

00:21:31.395 --> 00:21:36.044
And if anyone from this has more specific questions
that they'd like us to dive in and research on.

00:21:36.645 --> 00:21:37.845
We're also happy to do that.

00:21:37.935 --> 00:21:38.175
So,

00:21:38.955 --> 00:21:39.435
>> yeah.

00:21:39.645 --> 00:21:44.445
And this was our first reader question, so thank
you so much drew for sending this in over slack.

00:21:44.895 --> 00:21:49.065
If you're listening to this show and you've got something
you'd like to hear us talk about, please reach out.

00:21:49.065 --> 00:21:55.395
We can be found all the usual places, um, Slack,
Twitter, carrier pigeon, whatever you want to do.

00:21:57.435 --> 00:21:57.975
>> Nice.

00:21:58.215 --> 00:22:02.145
And, uh, yeah, I was just gonna, uh, thank you.

00:22:02.205 --> 00:22:03.255
Thank all of our listeners.

00:22:03.255 --> 00:22:09.525
And you know, if, uh, do you want to do the part about
your company or should I do the part about your company?

00:22:10.035 --> 00:22:11.595
>> I'll do the part about my company.

00:22:11.835 --> 00:22:12.165
All right.

00:22:12.255 --> 00:22:12.765
Um,

00:22:13.245 --> 00:22:16.735
>> should I tell them where to find
us, you didn't tell them HaskellWeekly.News.

00:22:17.265 --> 00:22:22.034
So if you want to check out this week's, News that's out there.

00:22:22.064 --> 00:22:29.054
Go to HaskellWeekly.News, and you can find latest
podcasts as well as the latest newsletters and yeah.

00:22:29.145 --> 00:22:33.695
Stay in the know with the Haskell world, yo, over to you Taylor.

00:22:34.395 --> 00:22:35.774
>> Sign up for that newsletter.

00:22:36.615 --> 00:22:43.225
And this week, like every week we are brought to you
by my employer, ACI Learning, uh, specifically ITProTV.

00:22:43.889 --> 00:22:46.320
The learning platform for IT professionals.

00:22:46.800 --> 00:22:54.300
If you'd like to get 30% off the lifetime of your
subscription, head over to ITPro.TV and put in offer code

00:22:54.440 --> 00:23:00.620
HaskellWeekly30 at checkout that's HaskellWeekly30 at ITPro.TV.

00:23:01.680 --> 00:23:02.190
>> Nice.

00:23:02.640 --> 00:23:03.210
Uh, yeah.

00:23:03.240 --> 00:23:09.480
And another quick announcement before we break off here is
that you have a couple more days, I guess, by the time this is

00:23:09.480 --> 00:23:12.390
published, you won't have any more time to do the Haskell survey.

00:23:12.400 --> 00:23:14.520
So you may just want to cut this bit out.

00:23:16.375 --> 00:23:21.085
>> If you're listening to this, when it's published,
fill out the Haskell survey, it may be open for another few

00:23:21.085 --> 00:23:24.294
hours and if it's after, then look for the results soon.

00:23:25.135 --> 00:23:25.465
>> Boom.

00:23:26.665 --> 00:23:26.965
Awesome.

00:23:26.965 --> 00:23:28.075
Well, thank you guys for listening.

00:23:28.075 --> 00:23:29.125
We'll see you guys next week.

00:23:29.995 --> 00:23:30.325
Bye.
