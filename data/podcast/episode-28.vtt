WEBVTT

1
00:00:04.840 --> 00:00:07.740
>> Hello and

2
00:00:07.740 --> 00:00:10.720
welcome to the Haskell weekly podcast. I'm your host,

3
00:00:10.730 --> 00:00:13.690
Taylor Fausak. I'm the lead engineer at I.T. Pro

4
00:00:13.690 --> 00:00:16.450
T.V.. With me today is one of the engineers on my

5
00:00:16.450 --> 00:00:19.310
team. Cameron Gera. Thanks for joining me today, Cam.

6
00:00:19.320 --> 00:00:21.910
>> Thanks for having me, Taylor. I'm excited to hang

7
00:00:21.910 --> 00:00:23.580
out. Talk about

8
00:00:23.580 --> 00:00:26.500
some Haskell.
>> Yeah, it's all set to be a good day

9
00:00:26.500 --> 00:00:27.450
for podcasting.

10
00:00:27.440 --> 00:00:30.260
>> Oh, yeah? Well, it's a great day in

11
00:00:30.260 --> 00:00:33.190
October and you know, as I

12
00:00:33.190 --> 00:00:36.020
love to say, it's Hacktoberfest. We've

13
00:00:36.020 --> 00:00:38.730
got one week left to contribute.

14
00:00:38.740 --> 00:00:41.210
Four pull requests to public

15
00:00:41.210 --> 00:00:44.140
repositories. So go check

16
00:00:44.140 --> 00:00:46.970
it out. Get a free T shirt. Sign up. It's awesome.

17
00:00:47.010 --> 00:00:49.660
The link will be in the show notes and

18
00:00:49.670 --> 00:00:52.440
specifically one that you know will help the

19
00:00:52.440 --> 00:00:55.390
Haskell community and build the Haskell community learn

20
00:00:55.390 --> 00:00:58.240
for Haskell, which is put up by Kowainik

21
00:00:58.250 --> 00:01:00.810
to allow you to learn some of the

22
00:01:00.810 --> 00:01:03.550
mechanics of Haskell and also do some

23
00:01:03.550 --> 00:01:06.170
problem solving in Haskell. So get some real world

24
00:01:06.170 --> 00:01:09.070
experience, so please, please, please go check that

25
00:01:09.070 --> 00:01:11.590
out. If you haven't, you've got one week

26
00:01:11.600 --> 00:01:14.300
left. It's gonna be awesome.

27
00:01:14.310 --> 00:01:17.120
But enough about Hacktoberfest because that's the one

28
00:01:17.120 --> 00:01:20.000
bit I've got at this point. What's what are we talking about

29
00:01:20.000 --> 00:01:22.750
today? What's what's going on? What does the idea

30
00:01:22.750 --> 00:01:25.340
of X G.H.C. 2021 excite you,

31
00:01:25.340 --> 00:01:25.820
man?

32
00:01:25.830 --> 00:01:28.580
>> It does. And that's exactly what we're gonna be talking about

33
00:01:28.580 --> 00:01:31.320
today. So there was a reddit post over the

34
00:01:31.320 --> 00:01:34.030
past week from one of the

35
00:01:34.040 --> 00:01:36.970
members of the G.H.C. steering Committee

36
00:01:36.980 --> 00:01:39.970
and he was polling the community, asking them

37
00:01:39.970 --> 00:01:42.700
if they were interested in something that he was

38
00:01:42.700 --> 00:01:45.410
calling G.H.C. 2021.

39
00:01:45.420 --> 00:01:48.050
And I think the community was interested

40
00:01:48.050 --> 00:01:50.950
because there were something like 200 comments

41
00:01:50.950 --> 00:01:53.580
on this thread, which is pretty big for our little corner

42
00:01:53.580 --> 00:01:55.550
of the reddit sphere

43
00:01:55.560 --> 00:01:58.180
>> dang. That sounds like it got some traction,

44
00:01:58.190 --> 00:02:01.060
you know? And it seems extreme to me because it's got

45
00:02:01.060 --> 00:02:03.740
the X in front of it, because that that's the

46
00:02:03.750 --> 00:02:06.750
language extension. But, you know, I thought that was pretty

47
00:02:06.750 --> 00:02:07.370
cool to see.

48
00:02:07.940 --> 00:02:10.770
>> Yeah, I like calling those. Ah, that's the extreme version of

49
00:02:10.770 --> 00:02:12.350
Haskell Haskell X.

50
00:02:12.740 --> 00:02:15.220
>> Yeah. I mean, there's extreme programming so extreme

51
00:02:15.220 --> 00:02:17.540
Haskell sounds good to me.

52
00:02:17.550 --> 00:02:20.550
Well, and something that came out

53
00:02:20.550 --> 00:02:23.540
of this, you know, Reddit thread was

54
00:02:23.550 --> 00:02:26.430
actually a proposal for this. And so, you know, I

55
00:02:26.430 --> 00:02:29.210
think that's something else we'll be talking about today as well. Kind

56
00:02:29.210 --> 00:02:31.930
of brief overview of what's kind of going

57
00:02:31.930 --> 00:02:34.010
on. What is G.H.C.

58
00:02:34.010 --> 00:02:36.790
2021? Why do we

59
00:02:36.790 --> 00:02:39.340
need it? Stuff like that. So I'm really looking

60
00:02:39.340 --> 00:02:41.720
forward to kind of diving in

61
00:02:41.720 --> 00:02:44.520
today and really talking about stuff I

62
00:02:44.520 --> 00:02:47.290
really haven't had to worry about.

63
00:02:47.300 --> 00:02:50.280
Um, as an application developer, language

64
00:02:50.280 --> 00:02:53.160
extensions, which this is kind of in motivation

65
00:02:53.160 --> 00:02:55.910
of are kind of behind the scenes for me and what

66
00:02:55.910 --> 00:02:58.870
I've done in my Haskell experience. But Taylor for

67
00:02:58.870 --> 00:03:01.310
you, I think you've got a little more experience

68
00:03:01.310 --> 00:03:04.280
with language extensions. What they

69
00:03:04.290 --> 00:03:07.130
what they are and how they've progressed

70
00:03:07.140 --> 00:03:09.870
in the language of Haskell over time.

71
00:03:10.040 --> 00:03:12.640
>> Yeah, So I have some experience as an

72
00:03:12.640 --> 00:03:15.470
application developer here. It I.T. pro T.V. and

73
00:03:15.470 --> 00:03:18.270
previously at Freckle. But also, I

74
00:03:18.270 --> 00:03:20.940
maintain some open source

75
00:03:20.950 --> 00:03:23.490
libraries on Hackage as well, and I've seen

76
00:03:23.500 --> 00:03:26.420
this progression happen. Most of it happened before I even

77
00:03:26.420 --> 00:03:29.250
started programming Haskell. So it started way

78
00:03:29.250 --> 00:03:31.850
back in 1998 and

79
00:03:31.860 --> 00:03:34.330
there was a spec put out

80
00:03:34.340 --> 00:03:37.270
for the language of Haskell and

81
00:03:37.280 --> 00:03:40.250
it is just known as Haskell 98. So if you see that floating around the Web,

82
00:03:40.250 --> 00:03:43.210
it's talking about the 1998 version of

83
00:03:43.210 --> 00:03:44.200
the Haskell language

84
00:03:44.200 --> 00:03:47.130
report.
>> Wow. So you're saying I could have

85
00:03:47.130 --> 00:03:50.120
asked for Christmas when I was five years old for

86
00:03:50.120 --> 00:03:52.870
Haskell 98?
>> Yeah. And you would have got

87
00:03:52.870 --> 00:03:53.200
it,

88
00:03:53.210 --> 00:03:56.040
>> man. I would have been so much better off if I

89
00:03:56.040 --> 00:03:57.950
would've learned Haskell when I was five.

90
00:03:58.240 --> 00:04:00.800
>> I'm not so sure about that. But I like where your head's

91
00:04:00.800 --> 00:04:02.190
at.
>> Okay,

92
00:04:02.200 --> 00:04:05.200
fair enough. Well, you know, we all we all come to the

93
00:04:05.200 --> 00:04:07.870
world of programming in our own ways.

94
00:04:07.880 --> 00:04:10.830
I mine is very different from a lot of co workers

95
00:04:10.830 --> 00:04:13.510
and other people I know who have been programming since they

96
00:04:13.510 --> 00:04:16.480
were in their young teens. I've only been programming in my

97
00:04:16.480 --> 00:04:19.270
twenties, so that's a little bit of a difference.

98
00:04:19.270 --> 00:04:21.250
But anyways, back to Haskell 98.

99
00:04:21.840 --> 00:04:24.570
>> So Haskell 98 specifies all kinds of things

100
00:04:24.570 --> 00:04:27.170
about the language itself and some

101
00:04:27.170 --> 00:04:30.170
libraries like the prelude and all the core libraries and

102
00:04:30.170 --> 00:04:33.170
stuff like that. And it turns out that as

103
00:04:33.170 --> 00:04:36.080
Haskell started being used both in academia and in

104
00:04:36.080 --> 00:04:38.710
industry and by hobbyists. There were some things

105
00:04:38.710 --> 00:04:41.320
discovered in the report that weren't quite

106
00:04:41.320 --> 00:04:43.680
ideal. So in

107
00:04:43.690 --> 00:04:46.510
2010 people got together and

108
00:04:46.510 --> 00:04:49.320
produced a new version of the Haskell report, which is Haskell

109
00:04:49.320 --> 00:04:51.970
2010. So again, if you see that

110
00:04:51.980 --> 00:04:54.790
floating around, that's what it means. The 2010 version of the Haskell language

111
00:04:54.790 --> 00:04:57.640
report Haskell, 2010 doesn't

112
00:04:57.650 --> 00:05:00.440
change a whole lot from Haskell 98

113
00:05:00.450 --> 00:05:02.700
even though in that 12 year

114
00:05:02.700 --> 00:05:05.450
span, you know, G.H.C. did a ton of

115
00:05:05.450 --> 00:05:08.370
work. There were many other compilers that

116
00:05:08.370 --> 00:05:11.370
came and went like U.H.C. and hugs

117
00:05:11.370 --> 00:05:13.550
and a bunch of others that I'm forgetting right now.

118
00:05:14.040 --> 00:05:16.960
Um, but Haskell, 2010 was pretty conservative in

119
00:05:16.960 --> 00:05:19.880
what it changed last year. There was

120
00:05:19.880 --> 00:05:22.830
some interest in producing yet another version of the language

121
00:05:22.830 --> 00:05:25.350
report that would be called Haskell 2020.

122
00:05:26.140 --> 00:05:28.660
That didn't end up happening for a bunch of

123
00:05:28.660 --> 00:05:29.610
reasons.
>> I mean,

124
00:05:29.610 --> 00:05:32.570
it's 2020 so it's pretty on par,

125
00:05:32.570 --> 00:05:35.480
right? Yeah, nothing's going according to plan

126
00:05:35.490 --> 00:05:36.650
in 2020. So

127
00:05:36.660 --> 00:05:39.600
>> exactly. Yeah, we we should have seen it in 2019. That

128
00:05:39.600 --> 00:05:42.160
this was a, harbinger of the things to

129
00:05:42.160 --> 00:05:45.150
come, but yeah, Haskell, 2020 unfortunately, didn't

130
00:05:45.150 --> 00:05:47.540
happen. But people are still

131
00:05:47.540 --> 00:05:50.280
interested in improving on the language

132
00:05:50.280 --> 00:05:53.260
report that came out in 2010 because lots of things have happened

133
00:05:53.270 --> 00:05:55.770
in Haskell and in particular. One thing

134
00:05:55.770 --> 00:05:58.450
that people are very excited about is

135
00:05:58.840 --> 00:06:01.550
rolling language extensions into the base

136
00:06:01.550 --> 00:06:04.550
language. So instead of having to

137
00:06:04.550 --> 00:06:07.550
enable a bunch of extensions at the top of your source file or

138
00:06:07.550 --> 00:06:09.850
put them as your default extensions for your package or

139
00:06:09.850 --> 00:06:12.690
application, they'll just be part of

140
00:06:12.690 --> 00:06:15.570
Haskell for everybody. And that's kind of what this

141
00:06:15.580 --> 00:06:18.380
X G.H.C. 2021 proposed

142
00:06:18.380 --> 00:06:20.120
flag is doing

143
00:06:20.130 --> 00:06:22.570
>> right. It's taking us a step in that direction. At

144
00:06:22.570 --> 00:06:23.520
least

145
00:06:23.530 --> 00:06:26.450
>> it's not a full blown report. It's not a new

146
00:06:26.450 --> 00:06:29.380
spec for Haskell, but it is saying this

147
00:06:29.380 --> 00:06:32.010
is a set of extensions that we think can be

148
00:06:32.010 --> 00:06:34.680
considered like the default set from here on

149
00:06:34.680 --> 00:06:37.510
out,
>> right, and these, you know,

150
00:06:37.520 --> 00:06:40.480
proposed language extensions, which I don't

151
00:06:40.480 --> 00:06:43.470
think they have quite wrinkled out every detail of which ones they're

152
00:06:43.470 --> 00:06:46.250
gonna include and stuff like that. But generally they're gonna go

153
00:06:46.250 --> 00:06:48.280
towards the UN

154
00:06:48.280 --> 00:06:51.140
controversial, relatively

155
00:06:51.150 --> 00:06:53.260
quote unquote mundane,

156
00:06:53.270 --> 00:06:55.980
harmless right harmless. That's much better

157
00:06:55.980 --> 00:06:58.770
word I think that allows us

158
00:06:58.780 --> 00:07:01.310
to kind of get used to these language

159
00:07:01.310 --> 00:07:04.070
extensions that we may not know about we may

160
00:07:04.070 --> 00:07:06.800
not ever have dealt with because

161
00:07:06.810 --> 00:07:09.790
Vanilla Haskell lets us get by with what we need to

162
00:07:09.790 --> 00:07:10.170
do.

163
00:07:10.540 --> 00:07:13.390
>> Yeah, and to give an example of an extension that

164
00:07:13.390 --> 00:07:15.700
may be included with Haskell with G.H.C.

165
00:07:15.700 --> 00:07:18.620
2021. Like you said, they haven't landed

166
00:07:18.620 --> 00:07:21.150
on a list of them. But one of the most

167
00:07:21.150 --> 00:07:24.070
popular extensions is overloaded strings.

168
00:07:24.240 --> 00:07:26.850
So in the same way that when you write a numeric

169
00:07:26.850 --> 00:07:29.450
literal, it could be an integer value or it could be a

170
00:07:29.450 --> 00:07:32.090
ratio or a float. Um,

171
00:07:32.100 --> 00:07:34.580
normally in Haskell, when you write a string, it can only

172
00:07:34.580 --> 00:07:36.860
be the string type in the prelude

173
00:07:37.340 --> 00:07:40.210
but overloaded strings. Let's it be text or a byte

174
00:07:40.210 --> 00:07:43.130
string or something else. Um, and this is an

175
00:07:43.130 --> 00:07:46.010
extremely popular extension. It's enabled by default and

176
00:07:46.010 --> 00:07:48.950
tons of places, and in the past three years running the

177
00:07:48.950 --> 00:07:51.830
Haskell survey, it's been the number one most requested

178
00:07:51.840 --> 00:07:54.680
default enabled extension for the, you know, next version of the

179
00:07:54.680 --> 00:07:57.570
Haskell report, Um, so that's a prime

180
00:07:57.570 --> 00:08:00.020
candidate for something that could be enabled by

181
00:08:00.030 --> 00:08:02.700
G.H.C. 2021. And it's a

182
00:08:02.700 --> 00:08:05.410
nice quality of life improvement that

183
00:08:05.420 --> 00:08:07.940
probably won't break any existing code. It might,

184
00:08:07.950 --> 00:08:10.750
but it's generally pretty conservative and

185
00:08:10.750 --> 00:08:13.710
doesn't really change. Doesn't introduce new type level shenanigans

186
00:08:13.710 --> 00:08:16.700
to the language. It doesn't change what things mean too much so that

187
00:08:16.700 --> 00:08:18.650
that's probably the type of thing that will be included.

188
00:08:18.840 --> 00:08:21.660
>> So cool. Well, I think that's a really

189
00:08:21.660 --> 00:08:24.240
great step for the community.

190
00:08:24.250 --> 00:08:27.180
Get a holistic bunch

191
00:08:27.190 --> 00:08:29.870
of language extensions and and say, Hey,

192
00:08:30.240 --> 00:08:33.010
this is what people want This is going to

193
00:08:33.020 --> 00:08:35.300
be bundled up in this G.H.C.

194
00:08:35.300 --> 00:08:37.720
2021 we'll let

195
00:08:37.730 --> 00:08:40.540
people enable that rather than having to

196
00:08:40.550 --> 00:08:43.040
list every extension or, you know, put the language

197
00:08:43.040 --> 00:08:45.150
pragma in the top of their source file.

198
00:08:45.640 --> 00:08:46.750
And there you go.

199
00:08:47.240 --> 00:08:50.070
>> Yeah, and this is if you look at another

200
00:08:50.070 --> 00:08:52.910
community like rust. They have this concept of an

201
00:08:52.920 --> 00:08:55.710
edition where the rust compiler is

202
00:08:55.710 --> 00:08:58.530
adding new features incrementally. I forget what their

203
00:08:58.530 --> 00:09:01.060
release schedule is. I think it's every six weeks or something like that.

204
00:09:01.840 --> 00:09:04.650
They're adding new features all the time, but you can

205
00:09:04.650 --> 00:09:07.500
pick to stay with, like I think it's rust

206
00:09:07.510 --> 00:09:10.230
2018. I'm not a rust developer, so I don't know what the

207
00:09:10.230 --> 00:09:13.210
editions are, but you can say this is the set of features that I want and

208
00:09:13.210 --> 00:09:16.210
that will stay stable through time. So this set of

209
00:09:16.210 --> 00:09:18.790
extensions is kind of the same idea where you're going to say, I

210
00:09:18.790 --> 00:09:21.250
want the recommended set of extensions as of

211
00:09:21.250 --> 00:09:24.250
2021 then, you know, five years from now, maybe

212
00:09:24.250 --> 00:09:27.150
you're still using that set because it works for you. Or maybe new versions have come

213
00:09:27.150 --> 00:09:30.100
out. And you think, Yeah, I want to opt into that. one the 2023 or 2025

214
00:09:30.100 --> 00:09:33.090
one
>> Right, So they let

215
00:09:33.100 --> 00:09:35.480
it be stable. I know there was something

216
00:09:35.480 --> 00:09:38.370
called Glasgow extensions

217
00:09:38.380 --> 00:09:40.670
that was, you know, something that we could enable.

218
00:09:40.680 --> 00:09:42.560
What didn't work about that?

219
00:09:43.340 --> 00:09:45.590
>> Yeah, in the past. So for those not in the know

220
00:09:45.590 --> 00:09:48.460
G.H.C., the flagship Haskell compiler,

221
00:09:48.470 --> 00:09:51.450
stands for the glorious glasgow Haskell

222
00:09:51.450 --> 00:09:53.940
compiler, and it accepts a

223
00:09:53.940 --> 00:09:56.790
flag called glasgow extensions that

224
00:09:56.790 --> 00:09:59.210
enables a kind of recommended set of

225
00:09:59.210 --> 00:10:01.870
extensions. So This isn't

226
00:10:01.880 --> 00:10:04.870
new ground necessarily. But what's different is that

227
00:10:05.240 --> 00:10:07.810
Glasgow extensions could change

228
00:10:07.820 --> 00:10:10.660
through releases of G.H.C.. So I don't

229
00:10:10.660 --> 00:10:13.590
remember which version of G.H.C. it was that it came out. But

230
00:10:13.590 --> 00:10:16.430
let's say that you were on 7.6 and you upgraded

231
00:10:16.430 --> 00:10:19.190
7.8. This glasgow extensions flag might

232
00:10:19.190 --> 00:10:21.660
mean something different between those two versions. In

233
00:10:21.660 --> 00:10:24.660
comparison, this x G.H.C. 2021

234
00:10:24.660 --> 00:10:27.540
flag is going to be consistent the same through

235
00:10:27.540 --> 00:10:27.970
time,

236
00:10:28.640 --> 00:10:31.350
>> right? So you can maybe iterate your

237
00:10:31.350 --> 00:10:32.770
version of G.H.C.

238
00:10:32.770 --> 00:10:34.460
20x

239
00:10:34.940 --> 00:10:37.040
202x. You're gonna have the same

240
00:10:37.040 --> 00:10:39.790
extensions, but you have to take that step in

241
00:10:39.800 --> 00:10:40.930
changing to a new

242
00:10:40.930 --> 00:10:42.770
version.
>>  You opt into the new stuff

243
00:10:42.780 --> 00:10:45.500
>> where this other one was just always changing with

244
00:10:45.510 --> 00:10:48.430
every new version of G.H.C., you could see how that could be

245
00:10:48.430 --> 00:10:50.950
really annoying for, you know, maintaining

246
00:10:50.950 --> 00:10:53.070
libraries, maintaining even an

247
00:10:53.070 --> 00:10:55.540
application. Large applications. It would be

248
00:10:55.550 --> 00:10:57.810
beyond frustrating because,

249
00:10:57.820 --> 00:11:00.710
>> and especially frustrating for libraries. Because if you want to

250
00:11:00.710 --> 00:11:03.200
support multiple versions of G.H.C.

251
00:11:03.210 --> 00:11:05.860
and you want to use this flag because it's convenient,

252
00:11:05.870 --> 00:11:08.420
you'll end up supporting some different set of

253
00:11:08.420 --> 00:11:10.770
extensions for each version, which is super weird.

254
00:11:11.340 --> 00:11:13.590
>> Yeah, well, I'm glad that they've come to

255
00:11:13.590 --> 00:11:16.210
say, All right, we need a set version,

256
00:11:16.220 --> 00:11:19.110
control of extensions, right? That's

257
00:11:19.110 --> 00:11:21.630
not gonna be you know changing with each version of

258
00:11:21.630 --> 00:11:24.440
G.H.C.. But what are some

259
00:11:24.440 --> 00:11:27.000
other benefits about maybe taking a step this

260
00:11:27.000 --> 00:11:29.650
way towards a grouped

261
00:11:29.660 --> 00:11:32.300
set of extensions being imported by this

262
00:11:32.300 --> 00:11:32.750
flag?

263
00:11:33.140 --> 00:11:36.040
>> One benefit of this set of language extensions

264
00:11:36.040 --> 00:11:38.820
all being bundled together with G.H.C. 2021 is

265
00:11:38.820 --> 00:11:41.570
that you kind of get the best of both

266
00:11:41.570 --> 00:11:44.250
worlds when it comes to explicit versus implicit.

267
00:11:44.840 --> 00:11:47.550
One of the upsides of explicitly listing all of your

268
00:11:47.550 --> 00:11:50.470
language extensions in each source file is

269
00:11:50.470 --> 00:11:53.370
that all of the tooling can understand it. Anybody coming

270
00:11:53.370 --> 00:11:56.340
into that file to read it can know which headspace to get into.

271
00:11:56.340 --> 00:11:59.210
You know, if I load up a file and it's got 20 lines of

272
00:11:59.210 --> 00:12:01.980
language extensions at the top and I see stuff like type in

273
00:12:01.980 --> 00:12:04.830
type and functional dependencies and GADTs, then I'm like,

274
00:12:04.830 --> 00:12:07.360
Okay, I'm gonna be putting on my type level programming hat

275
00:12:07.740 --> 00:12:10.580
versus if I open up a file and I only see, uh,

276
00:12:10.590 --> 00:12:13.480
let's say overloaded strings. Then I say, Okay,

277
00:12:13.480 --> 00:12:16.320
this is probably gonna be pretty typical application level code,

278
00:12:16.320 --> 00:12:17.280
nothing too fancy going

279
00:12:17.280 --> 00:12:20.000
on.
>> And I think it also the current

280
00:12:20.000 --> 00:12:22.770
listing out every extension helps

281
00:12:22.780 --> 00:12:25.660
just that readability, too. Obviously that the

282
00:12:25.660 --> 00:12:27.760
headspace, all that kind of jazz,

283
00:12:28.240 --> 00:12:30.900
what's the other option? If you don't, you know,

284
00:12:30.900 --> 00:12:33.610
without this new proposed flag,

285
00:12:33.620 --> 00:12:36.450
what's the other option? And I think you touched on a little bit

286
00:12:36.460 --> 00:12:39.320
earlier. Could you kind of expand on what may be some of the

287
00:12:39.320 --> 00:12:40.330
benefits of that?

288
00:12:40.340 --> 00:12:42.940
>> Absolutely. So the package

289
00:12:42.940 --> 00:12:45.690
description, for whatever thing you're working on,

290
00:12:45.700 --> 00:12:48.150
probably has a section in there of default

291
00:12:48.160 --> 00:12:51.110
extensions and those are language extensions. that're going

292
00:12:51.110 --> 00:12:54.110
to be enabled in every source file, regardless of if they're at the

293
00:12:54.110 --> 00:12:56.670
top of the file or not. And this is

294
00:12:56.670 --> 00:12:59.190
super convenient and great for

295
00:12:59.190 --> 00:13:02.140
applications where, like for us at I.T. Pro

296
00:13:02.140 --> 00:13:04.670
T.V., we can sit down as a

297
00:13:04.670 --> 00:13:07.250
team and have a discussion about Do we want to

298
00:13:07.250 --> 00:13:10.190
enable scoped type variables everywhere for

299
00:13:10.190 --> 00:13:13.110
our application and furthermore, we can, turn it

300
00:13:13.110 --> 00:13:16.070
on and see what happens? See if we get any weird bugs or weird errors or

301
00:13:16.070 --> 00:13:18.860
anything like that. It's very easy for us to talk

302
00:13:18.860 --> 00:13:21.710
about it and experiment with it. For libraries, it's a little bit

303
00:13:21.710 --> 00:13:24.520
different because when you turn on an extension by

304
00:13:24.520 --> 00:13:26.870
default, you're kind of selecting

305
00:13:26.870 --> 00:13:29.550
for a particular contributor or

306
00:13:29.550 --> 00:13:32.360
potential contributor to your project. You're saying

307
00:13:32.360 --> 00:13:35.230
that in order to work with this project, you probably need to

308
00:13:35.230 --> 00:13:38.200
understand these extensions that I'm turning on. And

309
00:13:38.200 --> 00:13:41.080
so naturally, library developers are a little

310
00:13:41.080 --> 00:13:44.030
more conservative when it comes to turning on default

311
00:13:44.030 --> 00:13:46.980
language extensions because they want as many people as possible

312
00:13:46.980 --> 00:13:49.570
to be able to contribute, which means keeping the

313
00:13:49.570 --> 00:13:52.510
bar to clear low. So, for instance, I

314
00:13:52.510 --> 00:13:55.430
really like the extension numeric underscores where you can

315
00:13:55.430 --> 00:13:58.220
put underscores in numbers to kind of break them up

316
00:13:58.220 --> 00:14:01.120
into, like, thousands groups. But I don't want to turn

317
00:14:01.120 --> 00:14:04.100
that on as a language extension in any libraries that I

318
00:14:04.100 --> 00:14:07.100
develop because it's just another bar to clear for somebody when they're looking at the source

319
00:14:07.100 --> 00:14:10.080
code saying, Wait a minute, I didn't know you could have underscores in numbers, What

320
00:14:10.080 --> 00:14:12.890
is this? And then they scroll up to the top of The file and they don't see an

321
00:14:12.890 --> 00:14:15.740
extension there, and I'm like, What am I reading here? This isn't the same

322
00:14:15.740 --> 00:14:18.510
language that I know, Um, and that's obviously an extreme

323
00:14:18.510 --> 00:14:21.490
example. People will probably be able to figure out what's going on, but it would be

324
00:14:21.490 --> 00:14:23.670
nice. If at the top, I could just say G.H.C.

325
00:14:23.670 --> 00:14:26.560
2021 somebody could go there and read about all the things that

326
00:14:26.560 --> 00:14:26.800
turns

327
00:14:26.800 --> 00:14:29.540
on.
>> Yeah, I think that's great

328
00:14:29.550 --> 00:14:32.380
insight. And, you know, kind of weighing some of

329
00:14:32.380 --> 00:14:34.770
the benefits of, you know, the

330
00:14:34.770 --> 00:14:37.710
explicitness for versus implicitness versus, you know what?

331
00:14:37.710 --> 00:14:40.690
This proposed flag, I think

332
00:14:40.690 --> 00:14:43.130
that really allows us

333
00:14:43.130 --> 00:14:46.130
to kind of think about it, figure out what

334
00:14:46.140 --> 00:14:48.680
feels right to us. Um, and having

335
00:14:48.690 --> 00:14:51.200
some known set of extensions to

336
00:14:51.210 --> 00:14:53.950
reference Sounds like a nice place to be,

337
00:14:53.950 --> 00:14:56.900
because it gives you a good balance of implicit

338
00:14:56.900 --> 00:14:59.780
versus explicit and kind of meets in the

339
00:14:59.780 --> 00:15:02.710
middle there. Um alright,

340
00:15:02.710 --> 00:15:05.150
Taylor. So we've talked about this new flag proposal.

341
00:15:05.160 --> 00:15:07.660
What are some of the things

342
00:15:07.670 --> 00:15:10.230
that kind of go into a new

343
00:15:10.230 --> 00:15:13.200
proposal for G.H.C.? You know, you can use this

344
00:15:13.200 --> 00:15:15.150
one as an example, obviously, because it's

345
00:15:15.840 --> 00:15:18.730
right here. It kind of says hello. Here's how you you create a

346
00:15:18.730 --> 00:15:20.850
proposal for G.H.C..

347
00:15:21.240 --> 00:15:23.250
What? What's going on here?

348
00:15:23.640 --> 00:15:26.320
>> There is a repository called G.H.C.

349
00:15:26.320 --> 00:15:29.310
proposals, and that's where all these things end up. I think it

350
00:15:29.310 --> 00:15:32.160
was set up. I want to say a year or two ago, Maybe.

351
00:15:32.170 --> 00:15:34.760
Maybe it's older than that, but the

352
00:15:34.770 --> 00:15:37.530
I'm an outsider to this process. So I'm explaining

353
00:15:37.540 --> 00:15:40.310
what I have seen. I don't have any insight into this

354
00:15:40.310 --> 00:15:43.240
necessarily. But this repository

355
00:15:43.240 --> 00:15:45.850
is a place for people to open up a pull request

356
00:15:45.860 --> 00:15:48.500
that contains document describing some

357
00:15:48.500 --> 00:15:51.490
change They would like to make to G.H.C. or

358
00:15:51.490 --> 00:15:54.160
Haskell or, I mean, usually G.H.C.. It's called

359
00:15:54.160 --> 00:15:56.730
G.H.C. proposals, but sometimes they could be a little,

360
00:15:56.740 --> 00:15:59.580
uh, more far reaching than that. So

361
00:15:59.580 --> 00:16:02.510
taking this one as an example, it's saying, we want to introduce

362
00:16:02.510 --> 00:16:05.020
this new extension flag called

363
00:16:05.020 --> 00:16:07.900
G.H.C. 2021 when you enable this

364
00:16:07.900 --> 00:16:10.430
flag, this is what's going to happen, and it

365
00:16:10.430 --> 00:16:13.390
will turn on all of these extensions. Um, I don't have

366
00:16:13.390 --> 00:16:16.290
the proposal in front of me, so I couldn't tell you what the current

367
00:16:16.290 --> 00:16:19.220
set of extensions they're proposing is. But that's the gist of

368
00:16:19.220 --> 00:16:22.190
what's going on here. And then there's a normal, you

369
00:16:22.190 --> 00:16:25.100
know, GitHub comment thread attached to that where people

370
00:16:25.100 --> 00:16:28.050
are discussing the pros and cons. Should we

371
00:16:28.050 --> 00:16:30.830
do this? Should we not? Which extensions should be included?

372
00:16:30.840 --> 00:16:33.570
All that kind of stuff you might expect to see on a discussion of

373
00:16:33.570 --> 00:16:33.930
this.

374
00:16:33.940 --> 00:16:36.430
>> Yeah, and I really appreciate that. There's

375
00:16:36.440 --> 00:16:39.410
obviously some sort of template when creating these G.H.C.

376
00:16:39.410 --> 00:16:42.310
proposals because it makes you answer these questions

377
00:16:42.310 --> 00:16:45.140
that you may have not thought about and, you know, specifically

378
00:16:45.140 --> 00:16:47.760
they talk about, you know, costs and drawbacks,

379
00:16:48.140 --> 00:16:50.450
which I think is valuable

380
00:16:50.450 --> 00:16:53.150
for someone who has this great idea to

381
00:16:53.160 --> 00:16:55.760
really think about it and figure out how that

382
00:16:55.770 --> 00:16:58.530
could impact the Haskell

383
00:16:58.530 --> 00:17:01.480
community as a whole. And so I think

384
00:17:01.480 --> 00:17:04.050
that their

385
00:17:04.310 --> 00:17:07.020
cost and drawbacks to kind of what we've talked about,

386
00:17:07.020 --> 00:17:09.850
like, kind of hides readability a

387
00:17:09.850 --> 00:17:12.170
little bit with their new flag.

388
00:17:12.540 --> 00:17:15.120
But at the same time, it still gives you a

389
00:17:15.120 --> 00:17:18.060
reference point of where to go toe Look for what's going on.

390
00:17:18.440 --> 00:17:20.660
And, you know, I think

391
00:17:21.740 --> 00:17:24.650
another drawback and this is just when you

392
00:17:24.650 --> 00:17:27.380
want to make any change is that there's gonna be

393
00:17:27.380 --> 00:17:29.860
some heated debate. Somebody's not gonna wanna

394
00:17:30.640 --> 00:17:32.990
be on board with this extension or with that extension,

395
00:17:33.630 --> 00:17:36.630
and I think it creates conversation,

396
00:17:37.240 --> 00:17:40.160
maybe heated debates, just depending on how you take

397
00:17:40.160 --> 00:17:42.930
it. And you know, if it's phone call, it's a little

398
00:17:42.940 --> 00:17:45.660
more personable where you know, if you're

399
00:17:45.670 --> 00:17:48.650
chatting over a Git repo and

400
00:17:48.650 --> 00:17:51.410
you're on this pull request making comments, you can get a little

401
00:17:51.410 --> 00:17:54.320
short sometimes, which I think can create a little bit more

402
00:17:54.320 --> 00:17:57.270
tension. But I think they're doing a good

403
00:17:57.270 --> 00:18:00.190
job with trying to be more conservative rather

404
00:18:00.190 --> 00:18:02.830
than just say, Yeah, let's bring all the

405
00:18:02.830 --> 00:18:05.760
extensions in, like, Alright, let's let's bring in the

406
00:18:05.760 --> 00:18:08.420
known set that's used by a vast majority

407
00:18:08.430 --> 00:18:11.240
and. I think they've also kind of talked about how

408
00:18:11.250 --> 00:18:14.170
this list gets curated, which I think it's nice that

409
00:18:14.170 --> 00:18:17.090
they kind of documented that as well. So you know, if you're interested,

410
00:18:17.100 --> 00:18:20.090
check out the show, notes the proposals. There

411
00:18:20.100 --> 00:18:22.960
so thank you for kind of jumping into that. I know I

412
00:18:22.960 --> 00:18:25.910
kind of threw off guard there with that question of

413
00:18:25.910 --> 00:18:26.910
like,
>> no

414
00:18:26.910 --> 00:18:29.810
problem happy to do it. And I also wanted to mention

415
00:18:29.820 --> 00:18:32.740
I said this earlier. But this is a question that I have

416
00:18:32.740 --> 00:18:35.660
included in the State of Haskell survey for the past

417
00:18:35.660 --> 00:18:38.510
three years, and I'll be including it this year as well. Um,

418
00:18:38.520 --> 00:18:41.460
it's not specific to G.H.C. 2021 but

419
00:18:42.040 --> 00:18:44.870
language extensions are, a, popular topic in the

420
00:18:44.870 --> 00:18:47.530
Haskell community. And in the survey, I

421
00:18:47.530 --> 00:18:50.260
ask if we were to produce a new version of the

422
00:18:50.260 --> 00:18:53.220
Haskell language report. Which extensions

423
00:18:53.220 --> 00:18:56.040
would you want to be enabled by default? So there

424
00:18:56.040 --> 00:18:58.730
is three years of data to look at their from the

425
00:18:58.730 --> 00:19:01.310
community of which things should be on by

426
00:19:01.310 --> 00:19:04.300
default. And, you know, clearly this is a slightly different

427
00:19:04.300 --> 00:19:07.070
discussion that than that exactly. But I think there is

428
00:19:07.080 --> 00:19:08.850
some cross pollination there,

429
00:19:09.440 --> 00:19:12.310
>> right? So if you're the one who made this

430
00:19:12.310 --> 00:19:15.260
extension or this proposal get with Taylor, he's got

431
00:19:15.260 --> 00:19:16.130
some great data.

432
00:19:16.140 --> 00:19:18.720
>> It's all out there. You don't need to collaborate with me,

433
00:19:18.720 --> 00:19:21.360
but wouldn't mind. Also, I wanted to point out

434
00:19:21.360 --> 00:19:24.290
that the name kind of implies that this is something that

435
00:19:24.290 --> 00:19:26.960
could happen every year. So it's not

436
00:19:27.540 --> 00:19:30.520
critically important that we get it exactly right on

437
00:19:30.520 --> 00:19:32.910
the first year because we could try a set and

438
00:19:32.910 --> 00:19:35.830
realize Wait a minute. This one probably shouldn't have been in there. So

439
00:19:35.830 --> 00:19:38.750
let's take it out next year, and this other one probably should have been in there.

440
00:19:38.750 --> 00:19:41.300
So let's add it and that hopefully will be a

441
00:19:41.300 --> 00:19:43.920
relatively easy process versus making a new version of the

442
00:19:43.920 --> 00:19:46.660
report
>> right, And I think it allows you to create a

443
00:19:46.660 --> 00:19:49.620
change log to like from year to year. What's what's

444
00:19:49.620 --> 00:19:52.600
changed? What's going on Before I decided, Oh, I wanna be

445
00:19:52.600 --> 00:19:55.030
on 2022 now And you know,

446
00:19:55.040 --> 00:19:57.960
they mentioned that in the proposal as well. So I think

447
00:19:57.960 --> 00:20:00.580
that's a nice benefit and definitely a good

448
00:20:00.580 --> 00:20:03.540
step in that direction. Obviously, we're

449
00:20:03.540 --> 00:20:06.180
not going to sit here and debate which one should be in

450
00:20:06.180 --> 00:20:09.180
because, you know, there's a lot out there.

451
00:20:09.180 --> 00:20:11.650
There's a lot of options, and for

452
00:20:11.650 --> 00:20:14.170
us when we have

453
00:20:14.180 --> 00:20:17.110
enabled language extensions, a, majority of

454
00:20:17.110 --> 00:20:19.490
the time it's been because of a library that

455
00:20:19.500 --> 00:20:21.770
requires said language extension. So

456
00:20:22.240 --> 00:20:25.060
I think as our our team grows at I.T. pro T.V.,

457
00:20:25.440 --> 00:20:28.440
we've had more people come with other experience in Haskell. That says,

458
00:20:28.440 --> 00:20:31.150
Oh, what about this one? Which leads to that

459
00:20:31.150 --> 00:20:34.080
discussion you were talking about earlier, where we just kind

460
00:20:34.080 --> 00:20:37.080
of figure out, you know, is this something you want to try?

461
00:20:37.090 --> 00:20:39.650
Let's give it a shot. Let's give it a good old college

462
00:20:39.650 --> 00:20:42.520
try and see what happens. I think

463
00:20:42.520 --> 00:20:45.330
that's, you know, something they could do with

464
00:20:45.330 --> 00:20:48.260
this, too, is like, it's gonna be a discussion. They're going to

465
00:20:48.260 --> 00:20:51.150
come up with something to begin with, and they can

466
00:20:51.150 --> 00:20:52.870
iterate on it, as as need be.

467
00:20:52.880 --> 00:20:55.830
>> Yeah, And that's a pretty easy discussion for us to

468
00:20:55.830 --> 00:20:58.800
have with eight people. So good luck

469
00:20:58.800 --> 00:21:01.780
to them having that discussion with the thousands of people involved in the

470
00:21:01.780 --> 00:21:02.650
Haskell community.

471
00:21:02.660 --> 00:21:05.630
>> Good luck. Well, I think that's all we have

472
00:21:05.630 --> 00:21:08.550
to say on this one. I think it's been a good podcast.

473
00:21:08.550 --> 00:21:11.390
It's got to chat a little bit a little

474
00:21:11.400 --> 00:21:14.310
more, Uh, a theoretical conversation of,

475
00:21:14.310 --> 00:21:16.830
like, what should we do? What's this Gonna

476
00:21:16.830 --> 00:21:19.690
dio with a little concrete in there? So I appreciate that.

477
00:21:19.700 --> 00:21:22.260
Um, but yeah, I think I think that's gonna do it for us, right?

478
00:21:22.840 --> 00:21:25.510
>> Yeah, that'll do it. Thank you for listening to the

479
00:21:25.510 --> 00:21:28.400
Haskell weekly podcast. I've been your host, Taylor

480
00:21:28.400 --> 00:21:30.760
Fausak, and with me was Cameron Gera.

481
00:21:31.540 --> 00:21:34.400
If you'd like to follow us on social media, our twitter

482
00:21:34.400 --> 00:21:37.250
handle is Haskell Weekly our Reddit user name

483
00:21:37.260 --> 00:21:40.190
Also Haskell Weekly our GitHub user name. You guessed

484
00:21:40.190 --> 00:21:42.980
it Haskell weekly. Our website, is Haskell

485
00:21:42.980 --> 00:21:44.510
weekly dot News.

486
00:21:44.520 --> 00:21:46.830
>> And today's show is brought to you by I.T. Pro

487
00:21:46.830 --> 00:21:49.690
T.V., the e learning platform for

488
00:21:49.700 --> 00:21:52.370
I.T. professionals, also our employer.

489
00:21:52.740 --> 00:21:55.610
And they would love to extend an offer of 30%

490
00:21:55.610 --> 00:21:58.420
off on I.T. Pro T.V. membership. So

491
00:21:58.430 --> 00:22:01.220
the code will be a Haskell Weekly

492
00:22:01.230 --> 00:22:04.150
30 or again that is Haskell Weekly

493
00:22:04.150 --> 00:22:06.940
30 to get 30% off the lifetime of your

494
00:22:06.940 --> 00:22:08.790
subscription I.T. pro T.V.

495
00:22:08.800 --> 00:22:11.760
>> Thanks so much for listening, and we'll see you next week bye

496
00:22:12.140 --> 00:22:12.770
>> peace.
