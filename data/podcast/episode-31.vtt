WEBVTT

1
00:00:04.840 --> 00:00:07.900
>> Hello

2
00:00:07.900 --> 00:00:10.460
and welcome to the Haskell weekly podcast. I'm your

3
00:00:10.460 --> 00:00:13.300
host, Taylor Fausak. I'm the lead engineer

4
00:00:13.310 --> 00:00:14.850
at I.T.. Pro T.V.

5
00:00:14.860 --> 00:00:17.810
>> on I'm Cameron, another engineer here

6
00:00:17.810 --> 00:00:20.440
at I.T.. Pro T.V.. And I just was going to

7
00:00:20.440 --> 00:00:23.320
say thank you to all those who filled out

8
00:00:23.320 --> 00:00:26.090
the Haskell survey. We will be looking for those

9
00:00:26.090 --> 00:00:28.870
results here in the next couple weeks. But we're just

10
00:00:28.870 --> 00:00:31.790
glad that we could get your participation in here what you

11
00:00:31.790 --> 00:00:34.620
have to say in your feelings and thoughts about high school

12
00:00:34.620 --> 00:00:37.280
as a whole. So thank you. Thank you, Thank you. I

13
00:00:37.280 --> 00:00:39.860
really appreciate it. And I know Taylor does as well.

14
00:00:41.740 --> 00:00:44.640
>> I'm Cody Goodman, another engineer here at I.T..

15
00:00:44.640 --> 00:00:47.460
Pro T.V. and looking forward to talking

16
00:00:47.460 --> 00:00:49.660
about simplifying deriving today.

17
00:00:51.240 --> 00:00:53.850
>> Yeah. So this block post by Matt

18
00:00:53.850 --> 00:00:56.750
Parsons came out a couple days ago, and it

19
00:00:56.750 --> 00:00:59.730
proposes, I think, in the tweet where he

20
00:00:59.740 --> 00:01:02.240
first announced it. He said terrible

21
00:01:02.240 --> 00:01:05.030
ideas worth discussing. So here we are,

22
00:01:05.040 --> 00:01:05.760
discussing them.

23
00:01:06.290 --> 00:01:09.260
>> Ooh, there's three people. This is exciting.

24
00:01:10.940 --> 00:01:13.840
Yeah. I mean, uh, as probably the least

25
00:01:13.840 --> 00:01:16.670
experienced Haskell here, I will start with my

26
00:01:16.670 --> 00:01:19.670
two cents. Uh, I think it was a

27
00:01:20.240 --> 00:01:22.160
good article at the end of it. I was like,

28
00:01:22.540 --> 00:01:25.240
Okay, yeah, I could get behind this because I

29
00:01:25.240 --> 00:01:27.250
think, you know,

30
00:01:27.840 --> 00:01:30.410
when I started high school, I didn't really

31
00:01:30.420 --> 00:01:32.900
understand that there were different types of

32
00:01:32.900 --> 00:01:35.560
deriving. Um, you know, really, Until

33
00:01:35.560 --> 00:01:38.350
we talked about it, you know, even a couple of episodes of the

34
00:01:38.350 --> 00:01:41.160
podcast to go about the various types of deriving.

35
00:01:41.740 --> 00:01:44.620
And, you know, I think there's a lot of

36
00:01:44.630 --> 00:01:47.200
boilerplate that, you know, he iterated through in this

37
00:01:47.200 --> 00:01:49.870
podcast and in this block post that,

38
00:01:50.340 --> 00:01:53.110
you know, I'm like, Oh, like it's just kind of eye

39
00:01:53.110 --> 00:01:56.020
opening. So, you know, I'm really, you know, excited to

40
00:01:56.020 --> 00:01:57.960
dive a little bit more about this. Um,

41
00:01:58.940 --> 00:02:01.940
>> yeah, you mentioned, uh, a few episodes

42
00:02:01.940 --> 00:02:04.890
ago. We talked about that post by Cohen IQ that really dug

43
00:02:04.890 --> 00:02:07.810
into all the different types of deriving and what they do and when you

44
00:02:07.810 --> 00:02:10.680
might want to use them. And this post, in

45
00:02:10.680 --> 00:02:12.980
a way, is kind of the opposite of that. Where it's

46
00:02:12.980 --> 00:02:15.390
suggesting, let's get rid of all those

47
00:02:15.390 --> 00:02:18.280
differences and have fewer things that

48
00:02:18.280 --> 00:02:21.160
kind of work or can have the same effect.

49
00:02:22.040 --> 00:02:24.570
>> Yeah, I I do like how

50
00:02:25.340 --> 00:02:27.560
How do you How do you pronounce that Kucinich

51
00:02:27.570 --> 00:02:29.960
>> Kucinich is how I say it. I'm not sure if that's right.

52
00:02:30.340 --> 00:02:32.710
>> Clinic. Okay, uh, I like

53
00:02:32.710 --> 00:02:35.590
how they wanted to make everything

54
00:02:35.590 --> 00:02:38.230
explicit. That be cool is like some agent rules or

55
00:02:38.230 --> 00:02:40.910
something. It was like a stopgap until

56
00:02:40.910 --> 00:02:43.660
something could potentially simplify deriving.

57
00:02:44.340 --> 00:02:46.470
Because I think there's a lot of potential there.

58
00:02:46.840 --> 00:02:49.730
>> Yeah, and, uh, let's let's get right

59
00:02:49.730 --> 00:02:52.010
into what it would mean to simplify

60
00:02:52.020 --> 00:02:54.880
deriving. So the very first thing

61
00:02:54.880 --> 00:02:57.730
that he suggests, I hope, is something that everybody

62
00:02:57.730 --> 00:03:00.470
can get behind, which is adding to the

63
00:03:00.470 --> 00:03:03.300
list of stock deriving classes. Because

64
00:03:03.300 --> 00:03:06.110
right now, with no extensions at all, there's only a handful of

65
00:03:06.110 --> 00:03:08.600
things that you could drive like ik show

66
00:03:08.910 --> 00:03:11.310
read X, I think popular

67
00:03:11.310 --> 00:03:13.360
one.

68
00:03:14.240 --> 00:03:15.940
I mean, I use it every day, only struck him

69
00:03:15.940 --> 00:03:18.790
out. And there's a

70
00:03:18.790 --> 00:03:21.750
bunch of extensions that just turn on like one extra class that you

71
00:03:21.750 --> 00:03:24.750
can drive like funked er, foldable, traversable, that kind of

72
00:03:24.750 --> 00:03:27.560
stuff. And it's weird that these aren't

73
00:03:27.560 --> 00:03:30.270
included, and I think really the only reason I can think of is

74
00:03:30.270 --> 00:03:33.180
that there hasn't been a new version of the language report

75
00:03:33.190 --> 00:03:35.280
to include this stuff in? Yeah,

76
00:03:35.290 --> 00:03:38.060
>> because I mean, these things air in most Haskell

77
00:03:38.060 --> 00:03:41.030
packages are probably already enabled eso

78
00:03:41.030 --> 00:03:43.510
I would, you know, think. Yeah, let's

79
00:03:43.510 --> 00:03:45.840
just put these into the stock

80
00:03:45.950 --> 00:03:48.750
deriving strategy. And I know we kind of talked

81
00:03:48.750 --> 00:03:51.620
about this, actually. Last podcast, I think

82
00:03:51.620 --> 00:03:54.330
where we said, you know, hey, let's get this group

83
00:03:54.330 --> 00:03:57.320
of, uh actually, it's

84
00:03:57.320 --> 00:04:00.320
two bodies. Go to this group of language extensions and just say,

85
00:04:00.330 --> 00:04:03.040
Hey, here's this one language extensions that

86
00:04:03.040 --> 00:04:05.870
includes all of these other ones. And I think that was kind

87
00:04:05.870 --> 00:04:08.840
of, you know, Yeah, I don't think that would be necessary if we

88
00:04:08.840 --> 00:04:10.950
could just you say All right, you know, stock derive

89
00:04:11.840 --> 00:04:14.370
all these pretty normal classes.

90
00:04:15.240 --> 00:04:18.120
>> Yeah, I think the core library committee was, uh,

91
00:04:18.130 --> 00:04:21.070
since it's so hard to get a new report out, I think they were

92
00:04:21.070 --> 00:04:23.540
trying to say what language

93
00:04:23.540 --> 00:04:26.260
extensions. They wanted to be the default.

94
00:04:26.260 --> 00:04:29.240
Asking the community about that. I think this would

95
00:04:29.240 --> 00:04:31.980
be a good candidate for it. Things like Dr Funked er

96
00:04:31.980 --> 00:04:33.450
foldable traversable.

97
00:04:34.440 --> 00:04:37.280
>> Yeah, pretty much derive star like any of

98
00:04:37.280 --> 00:04:40.130
them, except except derive

99
00:04:40.130 --> 00:04:43.080
any class. So it's funny. We want to derive. Ah,

100
00:04:43.080 --> 00:04:45.870
lot of individual classes, but not any class.

101
00:04:46.740 --> 00:04:49.580
And he claims it's a foot gun. Uh, I

102
00:04:49.580 --> 00:04:51.870
didn't immediately know why. Do you want do any on the way?

103
00:04:52.240 --> 00:04:54.740
>> Yeah, I've been bit by before.

104
00:04:54.750 --> 00:04:57.660
If, uh, if you want to derive something

105
00:04:57.670 --> 00:05:00.560
Ah, and it's not stock. Derive a ble. You're

106
00:05:00.560 --> 00:05:02.920
probably gonna see derive any classes

107
00:05:02.930 --> 00:05:05.800
as a suggestion, and then you're

108
00:05:05.800 --> 00:05:08.470
going to run it, and you're gonna get a a

109
00:05:08.480 --> 00:05:11.370
runtime error. Hopefully not in production. And

110
00:05:11.370 --> 00:05:12.760
it is definitely a foot gun.

111
00:05:13.340 --> 00:05:15.260
>> Oof! Runtime errors are no good.

112
00:05:15.840 --> 00:05:18.090
>> Mhm. Don't don't

113
00:05:18.100 --> 00:05:20.980
e need to get, like, a little,

114
00:05:20.990 --> 00:05:23.910
uh, sound effects. Yeah, Yeah, Something e.

115
00:05:23.920 --> 00:05:26.670
I'm sure I'm sure the production team at I.T. here has

116
00:05:26.670 --> 00:05:29.190
something for me. I'm gonna talk to him for next. Next

117
00:05:29.190 --> 00:05:29.770
podcast.

118
00:05:30.840 --> 00:05:33.480
>> Um, so, yeah, Matt wants to do away

119
00:05:33.480 --> 00:05:36.160
with derive any class. And as part of that, he

120
00:05:36.160 --> 00:05:38.530
also wants to do away with default

121
00:05:38.530 --> 00:05:41.490
signatures, which is used to provide a

122
00:05:41.490 --> 00:05:44.380
default implementation for a

123
00:05:44.380 --> 00:05:47.040
method on a type class where the default

124
00:05:47.040 --> 00:05:49.970
implementation has mawr constraints than what the type class

125
00:05:49.970 --> 00:05:52.800
has and the canonical example here is where you have a

126
00:05:52.800 --> 00:05:55.770
class where the class itself does not

127
00:05:55.770 --> 00:05:58.540
have a generic constraint, but you can provide a default

128
00:05:58.540 --> 00:06:01.530
implementation using generics. And so that has

129
00:06:01.530 --> 00:06:03.850
a generic constraint on there. Um,

130
00:06:04.440 --> 00:06:06.740
and he's suggesting that we get rid of it, I

131
00:06:06.740 --> 00:06:09.460
think, by replacing it with

132
00:06:09.470 --> 00:06:12.320
Iceland, Jack's favorite extension, driving

133
00:06:12.320 --> 00:06:12.750
via

134
00:06:13.540 --> 00:06:16.440
>> mhm. I mean, I

135
00:06:16.450 --> 00:06:19.210
I think that's a good thing because

136
00:06:19.210 --> 00:06:21.750
it's, ah, little bit confusing when you come

137
00:06:21.750 --> 00:06:24.670
across, you know, this default signatures,

138
00:06:24.680 --> 00:06:27.340
English language, language extension in real

139
00:06:27.340 --> 00:06:30.250
life because you're like, Wait a second. What's going on here?

140
00:06:30.640 --> 00:06:33.400
Um, I think you're driving via would have

141
00:06:33.410 --> 00:06:35.700
been a much better option

142
00:06:36.240 --> 00:06:36.660
here.

143
00:06:37.640 --> 00:06:40.450
>> Yeah, I think a long as the driving via

144
00:06:40.450 --> 00:06:43.410
solution subsumes what you could

145
00:06:43.410 --> 00:06:45.520
do with dr any class and default

146
00:06:45.520 --> 00:06:47.860
signatures. It's a no brainer.

147
00:06:47.870 --> 00:06:50.740
Uh, it seems like a lot of people who write

148
00:06:50.740 --> 00:06:53.450
generics code, though. Ah, and provide

149
00:06:53.450 --> 00:06:56.320
implementations in their libraries. Ah,

150
00:06:56.320 --> 00:06:58.860
use those two things together. So I don't wanna

151
00:06:59.140 --> 00:07:01.940
I don't want to make their lives harder and

152
00:07:01.950 --> 00:07:03.620
be able to derive less of our

153
00:07:03.620 --> 00:07:04.990
ecosystem.

154
00:07:05.000 --> 00:07:07.630
>> I think they're equivalent in power, at

155
00:07:07.630 --> 00:07:10.330
least for type classes that only have one

156
00:07:10.340 --> 00:07:13.060
type parameter for multi parameter type classes.

157
00:07:13.440 --> 00:07:16.390
I think driving via doesn't work so well because you can't, like, switch

158
00:07:16.390 --> 00:07:19.070
arguments around. Everything has to be. You know, you can

159
00:07:19.070 --> 00:07:21.960
Onley leave the last spot empty

160
00:07:22.440 --> 00:07:25.360
on. And I don't remember if he gets to that later in this post, Maybe he does.

161
00:07:25.360 --> 00:07:27.750
But that's the only thing that comes to mind for me.

162
00:07:28.240 --> 00:07:30.590
>> I'm sure I've seen some, like, driving via

163
00:07:30.590 --> 00:07:32.000
composed before. I

164
00:07:32.000 --> 00:07:32.400
>> don't know if

165
00:07:32.400 --> 00:07:34.810
>> that lets you get around that

166
00:07:34.820 --> 00:07:37.740
>> maybe listeners please let us

167
00:07:37.740 --> 00:07:40.510
know because I'd be happy to be proven wrong about driving via

168
00:07:40.510 --> 00:07:42.970
not working for multiple RAM type classes.

169
00:07:43.740 --> 00:07:46.720
Yep. And then the next thing he wants to get rid of,

170
00:07:46.720 --> 00:07:49.270
he's just on a tear here of getting rid of stuff is

171
00:07:49.280 --> 00:07:52.130
generalized new type deriving, which is the one that

172
00:07:52.130 --> 00:07:55.060
lets you delegate your instance

173
00:07:55.070 --> 00:07:57.590
to the type that you're wrapping. So it's not done

174
00:07:57.590 --> 00:08:00.560
generically, and it's not done stock. It just takes,

175
00:08:00.840 --> 00:08:03.700
like if you're a rapper around text and you're driving to Jason,

176
00:08:03.710 --> 00:08:06.660
it'll take texts to Jason instance and use it for

177
00:08:06.660 --> 00:08:08.210
your type. He doesn't want that,

178
00:08:08.220 --> 00:08:11.130
>> but yeah, because you can just do that with arriving via,

179
00:08:11.140 --> 00:08:13.860
like, why not? Yeah,

180
00:08:15.030 --> 00:08:17.460
these are things that are already possible, which is funny.

181
00:08:17.840 --> 00:08:20.790
He's just saying like, Hey, why don't you style your code this way

182
00:08:20.800 --> 00:08:23.010
rather than that way? Uh, you know, less

183
00:08:23.010 --> 00:08:26.010
extensions, less hand

184
00:08:26.010 --> 00:08:28.890
waving. And, you know, you only have to say, Okay,

185
00:08:28.900 --> 00:08:31.890
what does deriving via do? And at that point,

186
00:08:31.890 --> 00:08:34.790
you know, if you can focus on that, you're not

187
00:08:34.790 --> 00:08:37.700
necessarily yeah, tied up when all the other

188
00:08:37.700 --> 00:08:38.760
language extensions you're

189
00:08:38.770 --> 00:08:41.750
>> using. Yeah, and it's funny. It's what Cody recommended

190
00:08:41.750 --> 00:08:44.640
at the top of the show. A lot of this stuff could be I

191
00:08:44.640 --> 00:08:47.540
mean, uh, maybe morally could be an

192
00:08:47.540 --> 00:08:50.440
h lint rule. I don't know if agent can actually do this at the moment,

193
00:08:50.450 --> 00:08:53.390
but it is the type of thing that a winter could

194
00:08:53.390 --> 00:08:55.150
do for you. Mhm.

195
00:08:55.840 --> 00:08:58.810
>> Yeah, for this one, specifically for General,

196
00:08:58.810 --> 00:09:01.450
it's new type. Deriving Thio play devil's

197
00:09:01.450 --> 00:09:04.160
advocate a little bit here. The only argument I could see

198
00:09:04.160 --> 00:09:06.780
is that the generalized new type

199
00:09:06.780 --> 00:09:09.770
deriving is a little bit shorter and you don't have

200
00:09:09.770 --> 00:09:12.240
to specify text. Uh, but it's not

201
00:09:12.240 --> 00:09:15.170
explicit. Uh, so I I try to

202
00:09:15.170 --> 00:09:17.970
keep in mind arguments about keeping

203
00:09:17.970 --> 00:09:20.840
boilerplate down. Ah, at the

204
00:09:20.840 --> 00:09:23.770
forefront because I think they make a huge difference, especially

205
00:09:23.770 --> 00:09:26.580
when everything comes together. But here I think it's

206
00:09:26.580 --> 00:09:29.230
clearly not enough boilerplate

207
00:09:29.240 --> 00:09:30.450
make a difference.

208
00:09:30.460 --> 00:09:33.290
>> Yeah, And to me, the main win is not the boilerplate. It's

209
00:09:33.290 --> 00:09:35.960
that with that long list of,

210
00:09:36.340 --> 00:09:39.000
uh, type classes that you derived, you can be

211
00:09:39.010 --> 00:09:41.950
challenging to know. Oh, that's a stock type class. That's how

212
00:09:41.950 --> 00:09:44.870
it's going to be derived. That one has a default signature.

213
00:09:44.870 --> 00:09:47.710
So that's how it's gonna be derived. And to Jason has,

214
00:09:47.720 --> 00:09:50.270
uh, that's going to go through generalized new type driving,

215
00:09:50.280 --> 00:09:53.250
and you can kind of build that intuition. But

216
00:09:53.260 --> 00:09:55.270
why bother when you can just do derive via?

217
00:09:55.840 --> 00:09:58.680
>> Yeah, but I mean kind of what to CODIS point here

218
00:09:58.680 --> 00:10:01.450
is we now have to. If we change this

219
00:10:01.460 --> 00:10:04.430
underlying type of user, I d. We're gonna have to make sure

220
00:10:04.430 --> 00:10:07.260
we update it in the via instance,

221
00:10:07.270 --> 00:10:09.370
or else we're going to get some serious side effects.

222
00:10:09.740 --> 00:10:12.730
>> That's true. It might fail to compile. I'm not 100%. And it probably

223
00:10:12.730 --> 00:10:15.320
depends on what type you change the inside of user I

224
00:10:15.320 --> 00:10:17.000
d to be

225
00:10:17.010 --> 00:10:19.850
>> right. Yeah, If they're not,

226
00:10:20.340 --> 00:10:23.220
I forget the word uh, it goes back. Worse able, I

227
00:10:23.220 --> 00:10:26.020
>> think. Yeah, and I think that's

228
00:10:26.020 --> 00:10:28.600
actually one other difference between generalized new type

229
00:10:28.600 --> 00:10:31.170
driving and driving via. Is that

230
00:10:31.840 --> 00:10:34.730
with generalized new type driving? I think it literally

231
00:10:34.730 --> 00:10:37.620
uses, like the same instance, dictionary behind the

232
00:10:37.620 --> 00:10:40.370
scenes, whereas with driving via it builds a new

233
00:10:40.370 --> 00:10:43.230
instance dictionary that happens to call coerce for all of

234
00:10:43.230 --> 00:10:46.050
these things. So maybe there's a difference in

235
00:10:46.050 --> 00:10:48.830
runtime performance, although I doubt it would matter. In practice,

236
00:10:48.830 --> 00:10:51.820
>> there is not. There's a there's a paper

237
00:10:51.820 --> 00:10:54.550
a while back, I think five or six years ago,

238
00:10:55.040 --> 00:10:57.970
Uh, not a paper. A Talk by

239
00:10:57.970 --> 00:11:00.550
Simon Peyton Jones, which is zero cost

240
00:11:00.550 --> 00:11:03.410
corrosion. So it's that title is

241
00:11:03.420 --> 00:11:04.950
equal. No loss and

242
00:11:04.950 --> 00:11:07.500
>> performance. Excellent. Thank you,

243
00:11:07.500 --> 00:11:08.270
SPJ

244
00:11:09.140 --> 00:11:11.820
>> Uh huh. Nice. Well, then he kind

245
00:11:11.820 --> 00:11:14.800
of, you know, keeps on. There's tear here

246
00:11:14.810 --> 00:11:17.680
with another removal, getting rid of

247
00:11:17.680 --> 00:11:20.060
the deriving strategies language extension,

248
00:11:20.840 --> 00:11:23.820
which I don't have a

249
00:11:23.820 --> 00:11:26.440
feeling one way or another. Here it seems like

250
00:11:26.450 --> 00:11:28.510
less is better when

251
00:11:28.510 --> 00:11:31.260
>> there's only two choices, and one of them is in tactically

252
00:11:31.260 --> 00:11:34.210
obvious with that keyword via why do you need

253
00:11:34.210 --> 00:11:36.300
to specify stock with the other one?

254
00:11:37.040 --> 00:11:37.550
Mhm

255
00:11:38.340 --> 00:11:41.250
>> Yep. Totally in favor. This one if, Ah,

256
00:11:41.740 --> 00:11:44.310
if you If you remove ah

257
00:11:44.320 --> 00:11:47.260
stock, then there's no point in having

258
00:11:47.260 --> 00:11:47.650
that.

259
00:11:48.540 --> 00:11:51.240
>> Yeah, I really like how he does this to where

260
00:11:51.250 --> 00:11:54.210
this is like, we're building steps

261
00:11:54.210 --> 00:11:56.750
here. Like, if we do this, then Oh, look, we can

262
00:11:56.750 --> 00:11:59.710
also do this, and then it just gets simpler and simpler as you go

263
00:11:59.710 --> 00:12:00.070
along.

264
00:12:00.740 --> 00:12:03.520
>> Yeah, I think this is like, yeah, I love that I

265
00:12:03.520 --> 00:12:06.260
love that is just, like building on top of each other, because for

266
00:12:06.260 --> 00:12:08.880
me, I'm like, Oh, my gosh, I can see how,

267
00:12:08.880 --> 00:12:11.530
like this one little change can lead to this

268
00:12:11.540 --> 00:12:14.150
mawr structural large change that,

269
00:12:14.540 --> 00:12:17.460
you know, I can reason better about it rather than be like we're

270
00:12:17.460 --> 00:12:20.450
just gonna do this boom like, Okay, Why not Now

271
00:12:20.450 --> 00:12:23.270
we have Why, uh, here in this block post. So

272
00:12:23.280 --> 00:12:24.950
I really appreciate that.

273
00:12:25.940 --> 00:12:28.480
>> Yeah, that's a good skill to have. It could be challenging

274
00:12:28.480 --> 00:12:30.570
sometimes to, you know, have an

275
00:12:30.570 --> 00:12:33.560
intuition and have an end goal in mind

276
00:12:33.570 --> 00:12:36.140
and then also be able to break it down into the

277
00:12:36.140 --> 00:12:38.780
constituent parts and show all the simple

278
00:12:38.780 --> 00:12:39.280
steps in

279
00:12:39.280 --> 00:12:41.970
>> between. And I don't know that

280
00:12:41.970 --> 00:12:44.620
Matt Memphis has a serious post. I'm pretty sure that he

281
00:12:44.620 --> 00:12:47.560
didn't. But another upside of having these small pieces

282
00:12:47.560 --> 00:12:50.330
that build on each other is that if he

283
00:12:50.330 --> 00:12:53.060
did want to turn this into, like a real G.H.C. proposal,

284
00:12:53.210 --> 00:12:56.140
each one of these could be done individually, and it wouldn't be too

285
00:12:56.140 --> 00:12:57.550
big of a change at each step.

286
00:12:58.240 --> 00:13:01.180
>> Uh, first I took it at

287
00:13:01.180 --> 00:13:04.100
face. Value is, it's a joke, but it's starting to seem like a pretty

288
00:13:04.100 --> 00:13:05.510
serious joke.

289
00:13:05.520 --> 00:13:08.490
>> I'm not so sure. I

290
00:13:08.490 --> 00:13:11.260
mean, he seems to have some passionate about it. I mean, he's

291
00:13:11.270 --> 00:13:13.900
really taking his time here and really kind of

292
00:13:13.910 --> 00:13:14.660
diving in.

293
00:13:15.040 --> 00:13:17.460
>> Yeah, it's It's either a dedicated bit

294
00:13:17.470 --> 00:13:19.870
or he's serious.

295
00:13:20.840 --> 00:13:23.730
Um, and now, after we've removed all of these things,

296
00:13:23.730 --> 00:13:26.480
finally we're on to He wants to add something or

297
00:13:26.480 --> 00:13:29.350
allow some new thing. Um, and this

298
00:13:29.350 --> 00:13:32.030
is, uh, in the same way that you can do

299
00:13:32.030 --> 00:13:34.720
underscores in type signatures or type

300
00:13:34.720 --> 00:13:37.550
applications, toe like plug in some type there.

301
00:13:37.840 --> 00:13:40.440
He's suggesting a new use of underscores on

302
00:13:40.450 --> 00:13:42.670
deriving clauses to allow

303
00:13:43.700 --> 00:13:45.260
plugging in some types.

304
00:13:46.340 --> 00:13:48.350
>> Who? Ah,

305
00:13:48.840 --> 00:13:51.640
>> Uh huh, Yeah. I I'm a big fan of

306
00:13:51.650 --> 00:13:54.310
the wild cards anywhere we can get them that they make

307
00:13:54.310 --> 00:13:57.300
sense. Uh, sometimes you sacrifice

308
00:13:57.300 --> 00:13:59.920
a little bit of readability, but, um,

309
00:13:59.930 --> 00:14:02.510
if if you keep using them, that is,

310
00:14:02.520 --> 00:14:05.450
uh, But if you use them as tools toe figure out

311
00:14:05.450 --> 00:14:08.250
what the types would be, what the valid types would be,

312
00:14:08.260 --> 00:14:09.450
that's that's awesome.

313
00:14:09.940 --> 00:14:12.860
>> Yeah, And this would remove that, like, worry that I

314
00:14:12.860 --> 00:14:15.500
had earlier about like, Oh, you change the underlying

315
00:14:15.500 --> 00:14:18.410
type. Well, this underscores gonna figure it out. So

316
00:14:18.420 --> 00:14:21.260
that also leads me to believe that I

317
00:14:21.260 --> 00:14:24.060
was incorrect in my previous assumption that this would

318
00:14:24.060 --> 00:14:26.910
probably call cause a compilation

319
00:14:26.910 --> 00:14:28.850
air if it was the wrong type.

320
00:14:28.860 --> 00:14:31.190
>> Yeah, I do like how this ends up

321
00:14:31.200 --> 00:14:34.120
looking, but my main complaint with it is that it starts to

322
00:14:34.120 --> 00:14:36.990
remind me a little of like, um Scala

323
00:14:36.990 --> 00:14:39.560
or pure script or closure, where they have

324
00:14:39.840 --> 00:14:42.760
these kind of magical symbols that mean a lot of different

325
00:14:42.760 --> 00:14:45.480
things in different contexts and underscores already

326
00:14:45.480 --> 00:14:48.480
that in Haskell. So, like it can mean for

327
00:14:48.480 --> 00:14:51.380
a type application, it can mean I am intentionally not supplying

328
00:14:51.380 --> 00:14:53.520
this argument. Whereas for a type

329
00:14:53.530 --> 00:14:55.470
signature, it can mean

330
00:14:56.040 --> 00:14:58.860
G.H.C.. Tell me what to put in here or if you have the

331
00:14:59.240 --> 00:15:01.900
partial type at what? Partial type

332
00:15:01.900 --> 00:15:04.790
signatures language extension on it means I'm

333
00:15:04.800 --> 00:15:07.660
not specifying this one. So and it means

334
00:15:07.710 --> 00:15:10.650
1000 other things too. I think type classes has a whole page listing all of

335
00:15:10.650 --> 00:15:10.960
the things.

336
00:15:10.960 --> 00:15:13.770
>> I mean, you, uh,

337
00:15:13.780 --> 00:15:16.420
totally threw me off there. I was like, Wait, it has

338
00:15:16.420 --> 00:15:18.730
multiple meanings. I guess I just sort of

339
00:15:18.730 --> 00:15:21.530
internalized them or something. I was struggling to

340
00:15:21.530 --> 00:15:23.450
come up with what you meant. Uh,

341
00:15:24.940 --> 00:15:25.960
yeah. Just took me a

342
00:15:25.960 --> 00:15:28.590
>> second. Yeah, it has a lot of

343
00:15:28.590 --> 00:15:31.400
meetings, especially now with type holes

344
00:15:31.400 --> 00:15:34.100
and type applications. And yeah, but

345
00:15:34.100 --> 00:15:37.050
anyway, I'm in favor of this. I think it makes sense. It's like a

346
00:15:37.540 --> 00:15:40.150
you know what should go here. So don't make me spell it out,

347
00:15:40.940 --> 00:15:43.800
right or maintain it

348
00:15:44.240 --> 00:15:45.950
and keep it up to date, like you were saying.

349
00:15:46.840 --> 00:15:49.460
And now we land on something that I think is actually a

350
00:15:49.460 --> 00:15:52.360
little divisive. Maybe

351
00:15:52.370 --> 00:15:55.080
which is removing attached, deriving,

352
00:15:55.090 --> 00:15:57.920
which really means turn on standalone

353
00:15:57.920 --> 00:16:00.310
driving and make that the only way to do

354
00:16:00.310 --> 00:16:03.010
stuff right and stand alone. Driving is where, instead

355
00:16:03.010 --> 00:16:05.900
of hanging the driving clauses on the

356
00:16:05.910 --> 00:16:08.090
data type. They're all separate top level

357
00:16:08.090 --> 00:16:08.950
declarations.

358
00:16:09.740 --> 00:16:11.960
>> Yeah, I would also be on the

359
00:16:11.970 --> 00:16:14.260
e Don't really want to do this

360
00:16:14.260 --> 00:16:16.170
style. Um,

361
00:16:17.340 --> 00:16:20.210
because I mean, in the current state of standard and

362
00:16:20.210 --> 00:16:23.160
driving like that's a ton of boilerplate like that's a lot off

363
00:16:24.440 --> 00:16:27.430
stuff to see. Um, yeah,

364
00:16:27.440 --> 00:16:30.310
it still reads fairly well, in my opinion, like just looking at

365
00:16:30.310 --> 00:16:33.230
the example here, like it seems readable. But

366
00:16:33.240 --> 00:16:34.060
it does seem like

367
00:16:35.240 --> 00:16:36.470
unnecessary.

368
00:16:36.940 --> 00:16:39.930
>> Yeah, and it's funny because we were just talking about how Matt did

369
00:16:39.930 --> 00:16:42.850
a good job building these things step by step. But I feel like here he put these

370
00:16:42.850 --> 00:16:45.370
steps out of order because the next one is about

371
00:16:45.370 --> 00:16:48.300
removing boilerplate from the standalone driving. So I feel like

372
00:16:48.300 --> 00:16:50.900
that one should come first. And then we get rid of the

373
00:16:50.910 --> 00:16:52.270
non standalone driving,

374
00:16:52.280 --> 00:16:55.110
>> right? I agree, because, ah, the

375
00:16:55.120 --> 00:16:57.950
improved syntax for stand alone that makes a

376
00:16:57.950 --> 00:17:00.340
lot lighter weight. Then it's like,

377
00:17:00.350 --> 00:17:03.000
Okay, those those air definitely close enough.

378
00:17:03.000 --> 00:17:05.940
And this can fit into this whole plan of

379
00:17:05.940 --> 00:17:06.950
subsuming all these

380
00:17:06.950 --> 00:17:09.720
>> things. Yeah, so

381
00:17:09.720 --> 00:17:12.460
maybe flip flop, the order those and then we can kind of

382
00:17:12.940 --> 00:17:15.900
b'more on board with all right? Yeah, like standalone driving

383
00:17:15.900 --> 00:17:16.710
is not too bad,

384
00:17:16.720 --> 00:17:19.550
>> right? And so the lightweight standalone

385
00:17:19.550 --> 00:17:22.260
syntax That's the next section here. And I think

386
00:17:22.270 --> 00:17:24.920
essentially what that does is instead of

387
00:17:24.920 --> 00:17:27.790
requiring you to put one type class

388
00:17:27.790 --> 00:17:30.610
per deriving declaration, you can put a

389
00:17:30.610 --> 00:17:33.480
bunch so you can remove a lot of the duplication.

390
00:17:34.240 --> 00:17:37.220
>> Yeah, there's some nesting there, which that gets a little bit

391
00:17:37.220 --> 00:17:40.070
confusing. But at the end of the day, like

392
00:17:40.080 --> 00:17:41.370
I can still parse it,

393
00:17:42.340 --> 00:17:44.200
>> right? Yeah. Start

394
00:17:44.210 --> 00:17:47.040
duplication sometimes I do. Sorry,

395
00:17:47.040 --> 00:17:49.790
Taylor. Uh, sometimes the duplication no. Makes

396
00:17:49.790 --> 00:17:51.000
my eyes start glazing

397
00:17:51.000 --> 00:17:53.890
>> over. Yeah, for me. I kind

398
00:17:53.890 --> 00:17:56.760
of prefer reading the

399
00:17:57.640 --> 00:18:00.300
duplicated version because it's very clear I'm driving this

400
00:18:00.300 --> 00:18:03.180
instance for this type, but I know that I wouldn't want to

401
00:18:03.180 --> 00:18:06.140
write that. And I would probably end up having like, a snippet in my editor

402
00:18:06.140 --> 00:18:08.790
that just plunk that in there already copy pasting lines all over the

403
00:18:08.790 --> 00:18:11.750
place. Um, and the really

404
00:18:11.750 --> 00:18:14.680
compact, non duplicated version I

405
00:18:14.680 --> 00:18:17.630
would probably prefer to write, but looking at it, I really have to

406
00:18:17.630 --> 00:18:20.550
think like, OK, this is the type these air, all the

407
00:18:20.550 --> 00:18:23.470
classes. This is where everything plugs together and I could figure it out, but it takes me a

408
00:18:23.470 --> 00:18:24.070
bit longer.

409
00:18:25.140 --> 00:18:27.920
>> Yeah, but that's also because it's not a normal thing, right?

410
00:18:27.920 --> 00:18:30.640
Like, if it was a normal day to day

411
00:18:30.650 --> 00:18:33.600
interaction with Haskell, then yeah, we'd be like, All right, we know what

412
00:18:33.600 --> 00:18:36.280
this is doing. So I mean, this is a

413
00:18:36.640 --> 00:18:39.380
proposal, right? Like air quotes around that,

414
00:18:39.390 --> 00:18:42.060
Um and so you know,

415
00:18:43.040 --> 00:18:45.690
not everything in here is gonna be something we're like, Yeah,

416
00:18:45.690 --> 00:18:48.680
we're totally get used to that because it's new.

417
00:18:48.690 --> 00:18:51.570
It's a change. It's different than what we're normally used

418
00:18:51.570 --> 00:18:54.200
to. So I think that can

419
00:18:54.200 --> 00:18:57.140
always, you know, people don't like change. We know

420
00:18:57.140 --> 00:18:59.780
this first hand I.T. pro because we're, you know, currently updating

421
00:18:59.780 --> 00:19:02.770
how are user experiences are courses. And,

422
00:19:02.780 --> 00:19:05.560
you know, we're getting some pushback because, like, Well, we don't We don't want to

423
00:19:05.560 --> 00:19:08.020
change. We have this certain workflow were used

424
00:19:08.020 --> 00:19:11.020
thio on dso like that. Same for Haskell. Developers like

425
00:19:11.020 --> 00:19:13.870
we're all used to our workflow and so jump something

426
00:19:13.870 --> 00:19:15.460
different is gonna rub us the wrong way.

427
00:19:16.140 --> 00:19:19.090
>> Mhm. And

428
00:19:19.090 --> 00:19:21.970
now we're getting to the really interesting stuff

429
00:19:21.980 --> 00:19:24.870
which is removing stock deriving. So all of the

430
00:19:24.870 --> 00:19:27.080
type classes that the report

431
00:19:27.090 --> 00:19:29.940
specifies and that we added as our very first

432
00:19:29.940 --> 00:19:32.550
step in this process. Let's get rid of all of them and

433
00:19:32.550 --> 00:19:34.850
instead, at a new type in base

434
00:19:34.850 --> 00:19:37.420
somewhere or actually, it may already be

435
00:19:37.420 --> 00:19:39.660
provided. I don't know if it does not, but

436
00:19:40.040 --> 00:19:41.960
some new type called stock.

437
00:19:42.340 --> 00:19:45.000
And if you want stock driving, you go via

438
00:19:45.000 --> 00:19:47.830
stock. Otherwise, you go via something else. I think this is

439
00:19:47.830 --> 00:19:49.960
pretty clever. Yeah,

440
00:19:51.140 --> 00:19:54.100
>> yeah, I agree with that. Um uh, I,

441
00:19:54.100 --> 00:19:57.070
uh it's kind of like list does

442
00:19:57.070 --> 00:19:59.940
where it goes to extreme, of building up all of its

443
00:19:59.940 --> 00:20:02.640
standard library of itself. I

444
00:20:02.640 --> 00:20:05.570
think with things like internals defined,

445
00:20:05.570 --> 00:20:08.240
like everything else, uh, people will be more

446
00:20:08.240 --> 00:20:10.960
likely to be ableto understand things and contribute as

447
00:20:10.960 --> 00:20:11.370
well.

448
00:20:12.240 --> 00:20:15.080
>> Yeah, it is a little mind bending to see

449
00:20:15.090 --> 00:20:17.560
deriving generic via

450
00:20:17.570 --> 00:20:20.060
stock and then deriving to Jason via

451
00:20:20.060 --> 00:20:22.890
generically. It's like, Okay, so that would carry the

452
00:20:22.890 --> 00:20:23.180
one.

453
00:20:23.190 --> 00:20:26.450
Okay,

454
00:20:26.460 --> 00:20:29.350
>> this is how we did. Yeah. I mean,

455
00:20:29.740 --> 00:20:32.220
from this example that's in this section,

456
00:20:32.230 --> 00:20:35.190
you know, I'm also like, Well, why do we even still have

457
00:20:35.190 --> 00:20:38.170
those underscores? Like, couldn't we figure out how tow away

458
00:20:38.170 --> 00:20:40.670
toe like, get this thing toe

459
00:20:41.120 --> 00:20:42.410
in for what type it is.

460
00:20:42.940 --> 00:20:45.660
>> Yeah, well, because sometimes you want,

461
00:20:46.040 --> 00:20:48.830
like if you derived via text, you don't reference to your

462
00:20:48.830 --> 00:20:51.780
type it. All right, so you do need that

463
00:20:51.780 --> 00:20:54.700
underscore in there, but it would be nice if you could get rid of it.

464
00:20:54.710 --> 00:20:57.320
Like if it's a type that accepts one more

465
00:20:57.320 --> 00:21:00.300
parameter, go ahead and plug the type I'm driving for in

466
00:21:00.300 --> 00:21:02.470
there. Be pretty sneaky. Yeah,

467
00:21:04.840 --> 00:21:07.360
anything. And then we get to the last

468
00:21:07.360 --> 00:21:09.280
suggestion here, which is actually,

469
00:21:09.740 --> 00:21:12.630
uh, kind of a reversion of one of the earlier ones. Or like an

470
00:21:12.630 --> 00:21:15.150
alternate path to take, which is to remove

471
00:21:15.160 --> 00:21:18.090
standalone deriving. So previously we were talking about

472
00:21:18.100 --> 00:21:20.930
only having, I guess, stand apart or

473
00:21:20.930 --> 00:21:23.650
Onley standalone, deriving, not attached arriving.

474
00:21:23.660 --> 00:21:26.500
And he's suggesting that instead you could

475
00:21:26.510 --> 00:21:29.510
Onley have attached arriving. But I don't really

476
00:21:29.510 --> 00:21:30.960
get why he suggests this.

477
00:21:31.440 --> 00:21:34.400
>> Yeah, I don't super get it either. I think the

478
00:21:34.400 --> 00:21:37.300
posts was good on it. Done. This was

479
00:21:37.300 --> 00:21:40.260
just kind of a little like I know you guys were all mad at me

480
00:21:40.260 --> 00:21:43.120
for saying, you know, get rid of attached driving. So

481
00:21:43.120 --> 00:21:45.990
here's what we could do if we kept attached

482
00:21:45.990 --> 00:21:48.810
arriving and got rid of standalone deriving. But we

483
00:21:48.810 --> 00:21:51.670
really still need standing on deriving in

484
00:21:51.670 --> 00:21:54.410
those instances where we have to create an orphan instance

485
00:21:54.940 --> 00:21:57.780
or specify, you know, a context for a

486
00:21:57.780 --> 00:22:00.780
global a t t or get get

487
00:22:00.780 --> 00:22:03.710
generalized get it generally, yeah,

488
00:22:03.720 --> 00:22:06.540
global. I'm just I'm just out of this

489
00:22:06.540 --> 00:22:08.970
world, man. I'm all about this world, man. I'm just global,

490
00:22:09.640 --> 00:22:12.600
>> but yeah, I think it's interesting that, like a language

491
00:22:12.600 --> 00:22:15.540
like peer script doesn't even allow orphan instances whether or not

492
00:22:15.540 --> 00:22:18.400
you derive them. But with the changes he suggested so

493
00:22:18.400 --> 00:22:20.950
far, you would not be able to derive an orphan

494
00:22:20.950 --> 00:22:23.760
instance or sorry you would be able to. But if you want with this remove

495
00:22:23.760 --> 00:22:26.720
standalone driving, you wouldn't be able to And maybe that's a good

496
00:22:26.720 --> 00:22:29.710
thing. You shouldn't be doing orphan instances except

497
00:22:29.710 --> 00:22:32.680
there was a post. Maybe last week or the week before That was suggesting

498
00:22:32.840 --> 00:22:34.670
your work in instances air Probably fine.

499
00:22:35.440 --> 00:22:37.810
>> E mean, sometimes you got to, you

500
00:22:37.810 --> 00:22:38.680
know,

501
00:22:39.540 --> 00:22:41.870
>> right, So if this was this was sort of a

502
00:22:41.870 --> 00:22:44.720
concession, I'm betting that since this wasn't

503
00:22:44.730 --> 00:22:46.970
since this was a concession,

504
00:22:46.980 --> 00:22:49.930
uh, that he has something in mind

505
00:22:49.930 --> 00:22:52.790
to be able to still drive orphan instances.

506
00:22:52.800 --> 00:22:54.790
Because that's an even more divisive

507
00:22:54.790 --> 00:22:55.770
>> thing.

508
00:22:56.540 --> 00:22:59.270
Yeah, I agree with Cam. This seems kind of

509
00:22:59.270 --> 00:23:02.060
tacked onto the end. I'm not clear what he's going for here.

510
00:23:03.240 --> 00:23:06.180
>> Yeah, but e mean, at that point,

511
00:23:06.180 --> 00:23:08.910
we're at the end, right? We already says the

512
00:23:08.920 --> 00:23:10.680
terrible post is over.

513
00:23:10.690 --> 00:23:13.280
>> It wasn't that bad, man. Who's a good post?

514
00:23:13.950 --> 00:23:14.850
I agree.

515
00:23:15.940 --> 00:23:18.710
>> Yeah. Good ideas. Like a like I tweeted. I

516
00:23:18.710 --> 00:23:21.480
think I love this. Have looked at a few more times.

517
00:23:21.490 --> 00:23:24.390
I still like it very much. Maybe love it? Not

518
00:23:24.390 --> 00:23:26.680
sure, but a lot of good things in here.

519
00:23:27.540 --> 00:23:29.280
>> I really like how this, um,

520
00:23:30.340 --> 00:23:33.020
simplifies the Haskell language by

521
00:23:33.020 --> 00:23:35.960
drilling down on something that we're all familiar with. And I think we

522
00:23:35.960 --> 00:23:38.830
have become accustomed to and maybe a little blinded

523
00:23:38.830 --> 00:23:41.770
by the amount of complexity that's hidden there. So, like,

524
00:23:41.780 --> 00:23:44.720
we don't really think twice about turning on

525
00:23:44.720 --> 00:23:47.350
all these driving extensions, mostly because we hide them away in

526
00:23:47.350 --> 00:23:50.170
our package descriptions. So, like our cable file, just as

527
00:23:50.340 --> 00:23:52.350
driving star turned on pretty much

528
00:23:52.940 --> 00:23:55.590
and in our code most of the time, we're doing

529
00:23:55.590 --> 00:23:58.520
either stock driving or generic driving.

530
00:23:58.520 --> 00:24:01.440
So it's just in that list of stuff. So, like day today,

531
00:24:01.440 --> 00:24:04.260
it's not that big of a deal. But reading through these changes makes me

532
00:24:04.260 --> 00:24:06.900
think like, yeah, there's a lot of room for improvement here. And as a side

533
00:24:06.900 --> 00:24:09.510
effect, the language report gets simpler, and

534
00:24:09.510 --> 00:24:11.470
that's good to see.

535
00:24:11.480 --> 00:24:13.870
>> Always, always a positive, right? Yeah,

536
00:24:13.880 --> 00:24:16.390
>> yeah, I'm definitely in favor of simplifying

537
00:24:16.390 --> 00:24:18.830
things, removing foot guns.

538
00:24:18.840 --> 00:24:21.790
I do wanna be careful not to remove

539
00:24:21.790 --> 00:24:24.160
some of the features that power users

540
00:24:24.170 --> 00:24:26.770
use, but that

541
00:24:27.140 --> 00:24:29.810
that's something that's sort of a case by case basis.

542
00:24:30.740 --> 00:24:33.050
>> Yeah, And what would the

543
00:24:33.840 --> 00:24:36.030
backwards compatibility be for something like

544
00:24:36.030 --> 00:24:37.360
>> this? E think

545
00:24:37.370 --> 00:24:40.210
none. Yeah.

546
00:24:40.220 --> 00:24:43.160
Don't upgrade your G.H.C. or use lots of

547
00:24:43.170 --> 00:24:44.270
the sea pre processor.

548
00:24:46.540 --> 00:24:49.350
>> Yeah, No, I feel like we need some sort

549
00:24:49.350 --> 00:24:51.880
of, uh, way to

550
00:24:51.890 --> 00:24:54.540
upgrade. If that were the case, if we should do something like

551
00:24:54.540 --> 00:24:54.940
this

552
00:24:54.950 --> 00:24:57.070
>> Well, I think realistically, if the's

553
00:24:57.640 --> 00:25:00.590
were proposed and were accepted and were

554
00:25:00.590 --> 00:25:02.520
implemented, it would be like

555
00:25:02.520 --> 00:25:05.380
the There's a warning now in G.H.C.

556
00:25:05.380 --> 00:25:07.800
for not providing a deriving

557
00:25:07.800 --> 00:25:10.520
strategy when you derive. So would be, I think,

558
00:25:10.520 --> 00:25:12.920
similar to that where we would add the new

559
00:25:12.920 --> 00:25:15.880
behavior and potentially add a warning so that you

560
00:25:15.880 --> 00:25:18.710
could upgrade your code and then two or three versions from

561
00:25:18.710 --> 00:25:21.590
there we would remove the old behavior. All

562
00:25:21.590 --> 00:25:24.570
right. But also, I think nothing like this has been

563
00:25:24.570 --> 00:25:27.490
done before with G.H.C.. So who knows what they would

564
00:25:27.490 --> 00:25:27.760
do?

565
00:25:28.540 --> 00:25:31.460
>> Fifth cool. Well, anyways, Matt, it

566
00:25:31.460 --> 00:25:34.390
was a great post. I would encourage all of our listeners to go

567
00:25:34.390 --> 00:25:34.590
check

568
00:25:34.590 --> 00:25:37.560
>> it out. Agreed? I had fun walking through it with you all.

569
00:25:38.340 --> 00:25:41.310
Same insane. All right, well, I

570
00:25:41.320 --> 00:25:43.350
think that will do it for us. Um,

571
00:25:44.040 --> 00:25:45.790
Cody, any closing thoughts about this post?

572
00:25:46.340 --> 00:25:49.080
>> Um, no, I I agree with it. In general, I

573
00:25:49.080 --> 00:25:51.520
really wanna simplify the Haskell

574
00:25:51.520 --> 00:25:54.330
language. Uh, I will say, uh, not at

575
00:25:54.330 --> 00:25:56.180
any cost.

576
00:25:56.540 --> 00:25:58.430
That's an important one,

577
00:25:58.510 --> 00:26:01.290
but definitely want to

578
00:26:01.290 --> 00:26:03.820
strip off some of these things and unify these

579
00:26:03.820 --> 00:26:04.550
concepts.

580
00:26:05.840 --> 00:26:07.370
>> Yeah, All right.

581
00:26:08.140 --> 00:26:11.030
>> Thanks for listening to the high School weekly podcast. The high school we

582
00:26:11.030 --> 00:26:13.640
could podcast is brought to you by I.T. pro T.V.

583
00:26:13.650 --> 00:26:16.620
the e learning platform for I.T. professionals.

584
00:26:16.630 --> 00:26:19.440
Also our employer. And they would love to an extend an

585
00:26:19.440 --> 00:26:22.110
offer for 30% off the lifetime of your script

586
00:26:22.110 --> 00:26:24.960
subscription. Wow, that's a really hard word to say.

587
00:26:24.970 --> 00:26:27.610
Subscription with the promo code

588
00:26:27.620 --> 00:26:30.550
Haskell Weekly 30 All one

589
00:26:30.550 --> 00:26:33.390
word No spaces. Capitalization doesn't

590
00:26:33.390 --> 00:26:36.060
matter. Um, and that will give you 30% off the

591
00:26:36.060 --> 00:26:38.830
lifetime of your subscription. So please, please, please go check it

592
00:26:38.830 --> 00:26:41.340
out. If you're interested, go see the

593
00:26:41.340 --> 00:26:44.210
content. Also, if you're not quite sure, please

594
00:26:44.210 --> 00:26:46.790
sign up for a free membership. That way you can kind of see what there

595
00:26:46.790 --> 00:26:49.570
is. We would love to see you on the I.T. pro

596
00:26:49.570 --> 00:26:50.550
T.V. platform.

597
00:26:50.940 --> 00:26:53.810
>> We sure would. And that will do us do it for us this

598
00:26:53.810 --> 00:26:56.730
week. Uh, once again, I've been your host, Taylor. And with me

599
00:26:56.730 --> 00:26:59.700
today was Camera and Cody from my team. Um,

600
00:26:59.710 --> 00:27:02.540
if you want to learn more about Haskell Weekly, you can check out our

601
00:27:02.540 --> 00:27:05.350
website Haskell weekly dot news, where you could

602
00:27:05.350 --> 00:27:08.010
sign up for our newsletter, subscribe to this podcast,

603
00:27:08.010 --> 00:27:10.950
and, uh, find us on social media like Twitter.

604
00:27:11.140 --> 00:27:14.070
YouTube. Get hub. Read it. I don't

605
00:27:14.070 --> 00:27:16.170
know what else is there out there everywhere.

606
00:27:17.340 --> 00:27:20.190
Eso Yeah. Roots cape were not on

607
00:27:20.190 --> 00:27:22.770
moonscape yet. No. Sorry.

608
00:27:23.940 --> 00:27:25.340
Thanks for listening. And

609
00:27:25.350 --> 00:27:27.860
>> we'll see you next week. See you
