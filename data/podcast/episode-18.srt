1
00:00:02,195 --> 00:00:04,592
Hello and
welcome to the Haskell weekly podcast.

2
00:00:04,592 --> 00:00:07,214
As you might have guessed
this show is about Haskell,

3
00:00:07,214 --> 00:00:09,848
which is a purely functional
programming language.

4
00:00:09,848 --> 00:00:11,497
I'm your host Taylor Fausak.

5
00:00:11,497 --> 00:00:14,344
I'm the lead engineer at ITPro.TV.

6
00:00:14,344 --> 00:00:15,196
>> I'm Cody Goodman.

7
00:00:15,196 --> 00:00:17,932
I'm a senior engineer at ITProTV.

8
00:00:17,932 --> 00:00:19,709
>> Thanks for joining me today, Cody.

9
00:00:19,709 --> 00:00:20,896
What are we going to be talking about?

10
00:00:20,896 --> 00:00:26,410
>> We are going to be following a blog
post called inventing monad and

11
00:00:26,410 --> 00:00:28,626
talking through it cool.

12
00:00:28,626 --> 00:00:30,832
>> I feel like I've been
programming Haskell for a while.

13
00:00:30,832 --> 00:00:35,767
So I'm familiar with monads, but this is
more of a beginner's perspective, right?

14
00:00:35,767 --> 00:00:39,607
>> Right, it tries to actually
go through and start using or

15
00:00:39,607 --> 00:00:43,607
uses JavaScript throughout all
of those examples to make it

16
00:00:43,607 --> 00:00:48,260
a little more approachable since
that's kind of the lingua Franca.

17
00:00:48,260 --> 00:00:49,302
>> Yeah, for sure.

18
00:00:49,302 --> 00:00:53,610
JavaScript use just a little bit
more than Haskell in industry, and

19
00:00:53,610 --> 00:00:58,761
it's nice to see that the concept of my
monads can be applied in other languages.

20
00:00:58,761 --> 00:01:01,075
It's not something that
is specific to Haskell.

21
00:01:01,075 --> 00:01:02,810
>> Right.

22
00:01:02,810 --> 00:01:05,445
>> So you mentioned that
he does this in JavaScript.

23
00:01:05,445 --> 00:01:07,862
So how does he start off,
because I know that Haskell and

24
00:01:07,862 --> 00:01:10,029
JavaScript represent
things a lot differently.

25
00:01:10,029 --> 00:01:12,137
So it's kind of weird to see
that as a starting point.

26
00:01:12,137 --> 00:01:16,991
>> Right, he just starts with
a normal kind of JavaScript block of

27
00:01:16,991 --> 00:01:20,486
a function of how you
would get a middle name.

28
00:01:20,486 --> 00:01:23,458
You have a function and
two constants in it.

29
00:01:23,458 --> 00:01:26,200
A function call and two constants in it.

30
00:01:26,200 --> 00:01:29,944
Then he does this sort
of pointless looking

31
00:01:29,944 --> 00:01:35,041
transformation where he
introduces an apply function and

32
00:01:35,041 --> 00:01:39,825
he uses that apply function
to get the middle name, and

33
00:01:39,825 --> 00:01:43,985
then he calls the get user
function on that, and

34
00:01:43,985 --> 00:01:47,018
then the apply above that as well.

35
00:01:47,018 --> 00:01:51,327
And finally, calling get ID
with all of those things and

36
00:01:51,327 --> 00:01:53,536
the subsequent plies on it.

37
00:01:53,536 --> 00:01:58,759
>> Got you, so he has this kind of
straightforward JavaScript function and

38
00:01:58,759 --> 00:02:00,137
he transforms it.

39
00:02:00,137 --> 00:02:03,543
Throwing a seemingly unnecessary
amount of abstraction in there, but

40
00:02:03,543 --> 00:02:05,655
I have to assume it'll
come in handy later.

41
00:02:05,655 --> 00:02:07,987
>> [LAUGH]
>> Right,

42
00:02:07,987 --> 00:02:09,959
he calls it a dense representation.

43
00:02:09,959 --> 00:02:13,631
It totally looks pointless and
it's like God, why would you do this?

44
00:02:13,631 --> 00:02:16,877
[LAUGH] Yeah, well,
hopefully he'll tell us.

45
00:02:16,877 --> 00:02:19,295
And it's interesting
here that JavaScript and

46
00:02:19,295 --> 00:02:22,740
Haskell again are such different
languages, but he manages to make

47
00:02:22,740 --> 00:02:26,376
a function called syntax that ends
up looking pretty close to Haskell.

48
00:02:26,376 --> 00:02:28,296
So if you kind of squint
your eyes a little bit,

49
00:02:28,296 --> 00:02:31,460
you could imagine this JavaScript is
actually Haskell which is nice for me.

50
00:02:31,460 --> 00:02:32,818
>> Yeah, great.

51
00:02:32,818 --> 00:02:34,973
>> So now that we've thrown
all this extra syntax and

52
00:02:34,973 --> 00:02:38,011
boilerplate in front of ourselves,
what do we actually get out of it?

53
00:02:38,011 --> 00:02:40,270
What's the first thing that
he does with this stuff?

54
00:02:40,270 --> 00:02:43,717
Well, the first thing is
he poses the question.

55
00:02:43,717 --> 00:02:49,303
What if I ID, middle name,
user if any of those things could be null?

56
00:02:49,303 --> 00:02:51,091
>> Which is super common, right?

57
00:02:51,091 --> 00:02:56,945
>> Right, right, anything fails, you'll
get a null, especially in JavaScript.

58
00:02:56,945 --> 00:03:00,854
He gives a code snippet
where the get ID and

59
00:03:00,854 --> 00:03:07,683
get user functions are now checking for
null, same for get middle name.

60
00:03:07,683 --> 00:03:11,096
>> Right, so I showing you kind of the
more typical JavaScript way of approaching

61
00:03:11,096 --> 00:03:12,141
this problem, right?

62
00:03:12,141 --> 00:03:16,765
>> Correct and showing how all of them
have to handle the null values and

63
00:03:16,765 --> 00:03:19,131
the possibility of returning it.

64
00:03:19,131 --> 00:03:21,227
>> Right, every single place.

65
00:03:21,227 --> 00:03:25,276
>> And then he pivots and says,
what if we check for it automatically?

66
00:03:25,276 --> 00:03:29,498
>> Right and how do we how
can we do that automatically?

67
00:03:29,498 --> 00:03:32,083
Does it use that apply
function we had earlier.

68
00:03:32,083 --> 00:03:37,985
>> Right, so the secret to all of this is
in that you change how these functions

69
00:03:37,985 --> 00:03:43,340
are interpreted instead of changing
those functions themselves.

70
00:03:43,340 --> 00:03:44,233
>> That's pretty cool.

71
00:03:44,233 --> 00:03:48,323
So earlier, you said that apply,
it takes an argument in a function and

72
00:03:48,323 --> 00:03:52,825
then it applies that function to that
argument exactly like you might expect,

73
00:03:52,825 --> 00:03:56,115
but what does it do now that
null has entered the picture?

74
00:03:56,115 --> 00:04:01,851
>> That's actually where he
gets to updating the applied

75
00:04:01,851 --> 00:04:07,718
function where if x is equal to null,
so given apply xf.

76
00:04:07,718 --> 00:04:10,607
If x is equal to null,
you just return null.

77
00:04:10,607 --> 00:04:13,395
Otherwise, you apply f2x.

78
00:04:13,395 --> 00:04:14,366
>> That's pretty cool.

79
00:04:14,366 --> 00:04:18,777
I like to think of that as short
circuiting where once you encounter

80
00:04:18,777 --> 00:04:24,001
a null, everything stops happening and
you just get null from that point out.

81
00:04:24,001 --> 00:04:27,597
And I see that happening a lot in
JavaScript functions where you say,

82
00:04:27,597 --> 00:04:31,193
right at the top of some handler,
you say, if some condition is met,

83
00:04:31,193 --> 00:04:34,368
then return null or error or
whatever it is and then carry on.

84
00:04:34,368 --> 00:04:36,267
So this is pretty similar
to that in my mind.

85
00:04:36,267 --> 00:04:41,733
>> Yeah, there's just a lot of times we're
within a function, you'd have to do a lot

86
00:04:41,733 --> 00:04:46,829
of nested if checks or something where
you could have used short circuiting.

87
00:04:46,829 --> 00:04:49,768
>> Yeah, it cleans things up a lot,
I think.

88
00:04:49,768 --> 00:04:54,194
So now that he's got this new apply
implementation that supports null

89
00:04:54,194 --> 00:04:56,453
checking, what does he do with it?

90
00:04:56,453 --> 00:05:02,020
>> He uses it to show how he can
get the middle name function

91
00:05:02,020 --> 00:05:07,961
exactly the same way as he did
in the previous iterations.

92
00:05:07,961 --> 00:05:12,393
>> And that's pretty cool, right,
that the same code can behave differently,

93
00:05:12,393 --> 00:05:15,090
depending on if you need
to handle nulls or not.

94
00:05:15,090 --> 00:05:16,017
>> Right.

95
00:05:16,017 --> 00:05:19,671
>> It's starting to look a little bit
like something, but I don't know.

96
00:05:19,671 --> 00:05:20,666
We don't wanna give it a name yet.

97
00:05:20,666 --> 00:05:21,728
I don't wanna scare anybody off.

98
00:05:21,728 --> 00:05:26,769
>> [LAUGH]
>> So after he shows this example

99
00:05:26,769 --> 00:05:31,209
of dealing with null, he kind of pivots
and walks back to the original example and

100
00:05:31,209 --> 00:05:34,824
then adds another, I'll call it an effect,
but another thing.

101
00:05:34,824 --> 00:05:36,764
So instead of checking for null,

102
00:05:36,764 --> 00:05:41,354
he does something else which is kind of
logging things as they happen, right?

103
00:05:41,354 --> 00:05:44,567
So that if you were needing
to debug this function,

104
00:05:44,567 --> 00:05:47,856
cuz you unexpectedly got
a middle name of popcorn and

105
00:05:47,856 --> 00:05:52,135
that doesn't make sense and
you wanna figure out how you got there.

106
00:05:52,135 --> 00:05:54,661
So these this logging would help
you figure that out, right?

107
00:05:54,661 --> 00:05:58,953
>> Right, not being able to log and
functions like this if

108
00:05:58,953 --> 00:06:03,726
we tell people coming to Haskell
like yeah, you can't log.

109
00:06:03,726 --> 00:06:06,253
That's not going to work
right kind of eased.

110
00:06:06,253 --> 00:06:08,963
>> You you need to be practical,
you got to debug stuff.

111
00:06:08,963 --> 00:06:12,956
And so how do they approach logging, given
that they're trying to implement these

112
00:06:12,956 --> 00:06:15,190
things as quote, unquote, pure functions?

113
00:06:15,190 --> 00:06:19,868
>> So the first thing you do is in
functional languages avoid global

114
00:06:19,868 --> 00:06:23,347
variables to keep track
of all those messages.

115
00:06:23,347 --> 00:06:30,402
So the first pass that, that is modifying
utility functions to handle arrays.

116
00:06:30,402 --> 00:06:31,484
>> And when you say arrays,
what do you mean?

117
00:06:31,484 --> 00:06:32,922
What's in those arrays?

118
00:06:32,922 --> 00:06:37,658
>> The result, as well as the log message.

119
00:06:37,658 --> 00:06:41,670
>> Right, so you get back an array where
the first thing in it is the answer and

120
00:06:41,670 --> 00:06:45,686
everything else is kind of stuff that
happened along the way that you might

121
00:06:45,686 --> 00:06:48,056
be interested in and you might throw away.

122
00:06:48,056 --> 00:06:48,589
>> Right,

123
00:06:48,589 --> 00:06:53,398
the the trouble is that then your
functions have to know how to handle that.

124
00:06:53,398 --> 00:06:57,354
>> Yeah, every single function you
call would need to like d structure or

125
00:06:57,354 --> 00:06:58,572
lookup or whatever.

126
00:06:58,572 --> 00:07:03,027
But fortunately, we have functions that
we've thrown in our own way here, right,

127
00:07:03,027 --> 00:07:05,743
that we can change yet
again to do what we need here.

128
00:07:05,743 --> 00:07:10,565
>> Right, that pointless seeming function
from it first apply which made things

129
00:07:10,565 --> 00:07:11,818
look all horrible.

130
00:07:11,818 --> 00:07:16,490
>> [LAUGH]
>> Now it's like we can just go back and

131
00:07:16,490 --> 00:07:22,593
modify this now to distructure that and
show us what the logs, the results of.

132
00:07:22,593 --> 00:07:26,544
>> Yeah, previously, we were using
the supply function to check for null.

133
00:07:26,544 --> 00:07:30,156
But now we're saying,
grab that first thing out of it and

134
00:07:30,156 --> 00:07:33,251
append all can cat together
all the other stuff.

135
00:07:33,251 --> 00:07:36,061
So we're accumulating these log
messages as we go through, but

136
00:07:36,061 --> 00:07:38,778
still producing the result that
we wanted in the first place.

137
00:07:38,778 --> 00:07:41,751
>> Yeah and that's that's
really cool to be able to just

138
00:07:41,751 --> 00:07:44,469
modify that apply again
to handle all our needs.

139
00:07:44,469 --> 00:07:45,974
>> Exactly, pretty nice.

140
00:07:45,974 --> 00:07:49,184
Again, you end up with the same
shape at the top level.

141
00:07:49,184 --> 00:07:51,156
It still looks exactly the same.

142
00:07:51,156 --> 00:07:53,844
But underneath the covers,
the implement, excuse me,

143
00:07:53,844 --> 00:07:57,377
the implementation details are kind
of switched out from underneath you.

144
00:07:57,377 --> 00:08:00,332
So instead of handling nulls,
now we're doing logging.

145
00:08:00,332 --> 00:08:04,993
>> And that's why this blog
post does a really good job of

146
00:08:04,993 --> 00:08:09,358
motivating why word we're
not saying is useful.

147
00:08:09,358 --> 00:08:13,357
>> [LAUGH] Maybe at this point we can
start talking about it is in the title

148
00:08:13,357 --> 00:08:13,859
after.

149
00:08:13,859 --> 00:08:16,134
So-
>> Yeah.

150
00:08:16,134 --> 00:08:20,118
So far, these have been two examples of
monads and this is showing you that yeah,

151
00:08:20,118 --> 00:08:21,056
they are useful for

152
00:08:21,056 --> 00:08:25,179
real life situations that you're gonna
come across as you're writing programs.

153
00:08:25,179 --> 00:08:28,338
It's not just advanced
math Ivory Tower stuff.

154
00:08:28,338 --> 00:08:33,117
>> For sure, there's a lot of it a lot
of real world advantages that you get

155
00:08:33,117 --> 00:08:36,636
from monads and
he's worse good examples already.

156
00:08:36,636 --> 00:08:40,084
>> And they're going to give a few more,
so let's kind of get through those.

157
00:08:40,084 --> 00:08:43,892
They talk about global environment which
when I read that makes me shudder a little

158
00:08:43,892 --> 00:08:46,272
bit, because I don't
like global environments.

159
00:08:46,272 --> 00:08:50,180
I like things to be as local as possible,
but I think they don't really mean global.

160
00:08:50,180 --> 00:08:52,074
They mean something else, don't they?

161
00:08:52,074 --> 00:08:57,236
It's kind of like scoped to
the function or something like that.

162
00:08:57,236 --> 00:08:59,997
>> Right, they mean for a given function,

163
00:08:59,997 --> 00:09:04,884
you can provide an environment that
can be modified within that scope.

164
00:09:04,884 --> 00:09:08,582
>> Right, so the way that I
like to think about this and

165
00:09:08,582 --> 00:09:13,312
I think this actually came up in
our code base recently here at work

166
00:09:13,312 --> 00:09:17,956
where we had a series of functions
that all needed some config and

167
00:09:17,956 --> 00:09:23,211
we were passing that config from
function A to function B, B2 C, C to D.

168
00:09:23,211 --> 00:09:27,696
And that's a lot of boilerplate, cuz you
have to thread that thing all the way

169
00:09:27,696 --> 00:09:31,772
through and I think we came out of
that not having to thread it through.

170
00:09:31,772 --> 00:09:33,042
Can you tell us how we got there?

171
00:09:33,042 --> 00:09:38,470
>> Right, so
we started using a monad transformer which

172
00:09:38,470 --> 00:09:44,029
the important thing is that
it had a reader monad in it.

173
00:09:44,029 --> 00:09:47,758
>> And that reader monad is what?

174
00:09:47,758 --> 00:09:52,144
>> That just means that you can
simply use a function called ask and

175
00:09:52,144 --> 00:09:58,022
whatever you initiated that reader on Ed
with whatever value it was initiated with,

176
00:09:58,022 --> 00:09:59,709
you'll get that back.

177
00:09:59,709 --> 00:10:01,382
In our case, it was convicted.

178
00:10:01,382 --> 00:10:07,226
Got you, so we had all these functions
that were operating in this monad.

179
00:10:07,226 --> 00:10:11,584
And instead of passing an argument
through to everything in the single place

180
00:10:11,584 --> 00:10:16,160
where we needed it, all we had to do was
ask for it and it was suddenly available.

181
00:10:16,160 --> 00:10:20,061
>> Right and actually at one point,
we had both the new monad and

182
00:10:20,061 --> 00:10:21,984
we were still passing in fig.

183
00:10:21,984 --> 00:10:24,458
>> [LAUGH]
>> It headed twice just to make sure get

184
00:10:24,458 --> 00:10:25,902
it from one place,
get it from the other and

185
00:10:25,902 --> 00:10:27,441
make sure they're the same and
then move on.

186
00:10:27,441 --> 00:10:31,679
>> [LAUGH]
>> Right.

187
00:10:31,679 --> 00:10:36,823
>> So in this blog posts, he shows
this global environment example and

188
00:10:36,823 --> 00:10:42,508
kind of walked you through the reader
monad is what it would be in Haskell and

189
00:10:42,508 --> 00:10:47,132
provides motivation for
this example that we just ran into.

190
00:10:47,132 --> 00:10:48,363
Passing all these arguments is annoying.

191
00:10:48,363 --> 00:10:51,810
And if you can put it in your context and
then ask for it when you need it,

192
00:10:51,810 --> 00:10:52,811
it's pretty nice.

193
00:10:52,811 --> 00:10:56,799
And once again, as you might be
able to guess, you change apply and

194
00:10:56,799 --> 00:11:00,861
your actual business logic ends up
looking the same and all the stuff

195
00:11:00,861 --> 00:11:05,850
underneath the covers kind of changes out
from underneath which sounds scary, but

196
00:11:05,850 --> 00:11:09,297
promise isn't as long as you
follow a few rules exactly.

197
00:11:09,297 --> 00:11:12,578
They're important rules
as we call them laws, but

198
00:11:12,578 --> 00:11:16,330
I don't think you get arrested
if you don't follow them.

199
00:11:16,330 --> 00:11:18,123
It's just very, very frowned upon.

200
00:11:18,123 --> 00:11:23,122
So now that we've gone through dealing
with nulls accumulating a bunch of state

201
00:11:23,122 --> 00:11:25,732
in this case logs as we
go through stuff and

202
00:11:25,732 --> 00:11:30,676
having a kind of read-only environment
that's available to our functions.

203
00:11:30,676 --> 00:11:35,665
We land on the final example which is
state which is something that gets passed

204
00:11:35,665 --> 00:11:39,440
to every function, but
also can be updated along the way.

205
00:11:39,440 --> 00:11:41,793
Can you tell us a little
more about this example and

206
00:11:41,793 --> 00:11:43,989
kind of how it differs
from the previous ones?

207
00:11:43,989 --> 00:11:50,171
>> It's really similar like you're saying,
I think to the reader mpnad.

208
00:11:50,171 --> 00:11:53,834
The only difference is that that
initial state that was passed in.

209
00:11:53,834 --> 00:12:00,957
You can update it and you can you can get
it again do whatever you want with it.

210
00:12:00,957 --> 00:12:03,866
>> And I think the example they use as
kind of innovation has to deal with

211
00:12:03,866 --> 00:12:04,642
random numbers.

212
00:12:04,642 --> 00:12:08,930
Because if you wanna generate a bunch of
random numbers in a pure fashion without

213
00:12:08,930 --> 00:12:12,133
reading from like slash dev random or
something like that.

214
00:12:12,133 --> 00:12:16,171
Typically, you're gonna need a random
number seed and those are deterministic.

215
00:12:16,171 --> 00:12:18,662
So if you give something the same seed,

216
00:12:18,662 --> 00:12:23,728
you get back the same answer which works
fine if you only need one random number.

217
00:12:23,728 --> 00:12:26,377
You could throw that in your reader
context and pull out the seed,

218
00:12:26,377 --> 00:12:27,642
and generate a random number.

219
00:12:27,642 --> 00:12:31,266
But if you wanna generate to, you would
generate the same number both times,

220
00:12:31,266 --> 00:12:33,733
because you couldn't change
that reader context.

221
00:12:33,733 --> 00:12:38,009
So you need something like the state
where you can ask for to get it and

222
00:12:38,009 --> 00:12:40,936
then do whatever operation you want with,
and

223
00:12:40,936 --> 00:12:44,106
then put something back
into the state change it.

224
00:12:44,106 --> 00:12:49,067
I actually remember I remember having
a bug with random numbers before where I

225
00:12:49,067 --> 00:12:54,041
might have been using a reader monads
just threading that same seed through.

226
00:12:54,041 --> 00:12:58,850
And after I figured it out,
it just reminded me of the xkcd comic,

227
00:12:58,850 --> 00:13:00,519
it's like turn 42.

228
00:13:00,519 --> 00:13:02,000
>> Yeah, guaranteed random.

229
00:13:02,000 --> 00:13:05,234
We rolled some dice and
figured out this is a very random number.

230
00:13:05,234 --> 00:13:07,564
We're just gonna keep giving it to you.

231
00:13:07,564 --> 00:13:10,264
[LAUGH] Yeah, so
we don't want to implement

232
00:13:10,264 --> 00:13:14,021
random number generators like that and
you don't have to.

233
00:13:14,021 --> 00:13:18,607
The monad abstraction is powerful enough
to give you this ability to consistently

234
00:13:18,607 --> 00:13:22,594
take something in into your environment
and use it, and modify it, and

235
00:13:22,594 --> 00:13:25,400
then return that back out
along with your answer.

236
00:13:27,800 --> 00:13:32,016
So once again, we end up with
changing the apply function and

237
00:13:32,016 --> 00:13:36,159
using the same business logic over and
over and over again.

238
00:13:36,159 --> 00:13:40,264
So that gets us through all of the
motivating examples that this guy gave for

239
00:13:40,264 --> 00:13:44,694
monads and he managed to make it through
this post without using monads we didn't

240
00:13:44,694 --> 00:13:46,930
quite think we made it halfway through.

241
00:13:46,930 --> 00:13:51,755
>> [LAUGH]
>> But this is something that happens

242
00:13:51,755 --> 00:13:57,911
a lot in the Haskell community, right,
beginners kind of finally grokking monads.

243
00:13:57,911 --> 00:13:59,356
Have you seen this come up before?

244
00:13:59,356 --> 00:14:00,765
>> Yeah a ton.

245
00:14:00,765 --> 00:14:05,145
I personally started writing
Haskell just by making

246
00:14:05,145 --> 00:14:09,037
functions of the five
ten fifteen arguments.

247
00:14:09,037 --> 00:14:14,409
Yeah, to pass the state through and
then I finally got annoyed and I was like

248
00:14:14,409 --> 00:14:20,140
I'm going to learn what monads are about
and I came across a billion tutorials.

249
00:14:20,140 --> 00:14:23,203
>> [LAUGH]
>> Monads are burritos.

250
00:14:23,203 --> 00:14:24,447
What else are they?

251
00:14:24,447 --> 00:14:25,867
>> They're all kinds of things.

252
00:14:25,867 --> 00:14:29,325
I keep thinking the straws, but
I think that's lenses are straws.

253
00:14:29,325 --> 00:14:30,385
Monads are burritos.

254
00:14:30,385 --> 00:14:33,148
Their boxes, their containers.

255
00:14:33,148 --> 00:14:36,268
I don't know, any number of things.

256
00:14:36,268 --> 00:14:41,096
>> That's why I really like tutorials like
this which focus on some real examples,

257
00:14:41,096 --> 00:14:45,995
because you're not gonna get very far with
metaphors as much as you will with using

258
00:14:45,995 --> 00:14:50,202
these things and seeing why those
laws that are seemingly pointless.

259
00:14:50,202 --> 00:14:54,830
Why there is applied functions
through seemingly pointless help you.

260
00:14:54,830 --> 00:14:56,080
>> Yeah, I agree.

261
00:14:56,080 --> 00:15:01,200
I much prefer seeing a motivating example
rather than here's the type signature and

262
00:15:01,200 --> 00:15:04,385
here's the laws and
it's important and good luck.

263
00:15:04,385 --> 00:15:07,968
>> [LAUGH]
>> Walking through stuff like this really

264
00:15:07,968 --> 00:15:08,553
helps me or

265
00:15:08,553 --> 00:15:12,721
would have helped me when I was learning
Haskell see why do I care about this?

266
00:15:12,721 --> 00:15:14,268
What do I get out of it?

267
00:15:14,268 --> 00:15:15,635
>> Exactly.

268
00:15:15,635 --> 00:15:18,735
>> And like you, I've seen so many of
these tutorials through the years that

269
00:15:18,735 --> 00:15:21,539
it's feels a little bit like a rite
of passage for new Haskellers.

270
00:15:21,539 --> 00:15:24,018
Like yeah,
you got to learn what mountains are and

271
00:15:24,018 --> 00:15:26,978
then you got to write blog posts
that says you what they are.

272
00:15:26,978 --> 00:15:28,894
>> And that's exactly what's happened.

273
00:15:28,894 --> 00:15:33,684
Yeah, [LAUGH] somehow I think neither you,
nor I have written this blog post,

274
00:15:33,684 --> 00:15:37,900
but maybe that just means we haven't
truly understood monads yet.

275
00:15:37,900 --> 00:15:40,679
>> [LAUGH]
>> Well, I hope we do.

276
00:15:40,679 --> 00:15:42,947
We're making a podcast about them.

277
00:15:42,947 --> 00:15:47,257
>> Yeah, it does this count
as a blog post probably.

278
00:15:47,257 --> 00:15:49,785
Anyway, I think that about wraps it up for
us today.

279
00:15:49,785 --> 00:15:51,955
Thanks for
being with me on the show today, Cody.

280
00:15:51,955 --> 00:15:53,259
>> Thanks for having me, Taylor.

281
00:15:53,259 --> 00:15:54,393
It was a lot of fun.

282
00:15:54,393 --> 00:15:55,788
>> It was a lot of fun.

283
00:15:55,788 --> 00:15:58,756
It's always good and
good having you on here, and thank you for

284
00:15:58,756 --> 00:16:00,778
listening to the Haskell weekly podcast.

285
00:16:00,778 --> 00:16:02,470
If you like what you heard,

286
00:16:02,470 --> 00:16:06,305
please find out more at our website,
haskellweekly.news.

287
00:16:06,305 --> 00:16:10,778
And if you did like our show, again,
please go rate and review us on iTunes.

288
00:16:10,778 --> 00:16:11,848
It helps a lot.

289
00:16:11,848 --> 00:16:16,417
Haskell weekly is brought to you every
week by ITPro.TV, the tech skills

290
00:16:16,417 --> 00:16:21,443
development platform for IT professionals
who also happens to be our employer.

291
00:16:21,443 --> 00:16:23,719
So please send your sysadmins and

292
00:16:23,719 --> 00:16:28,027
network admins to www.itpro.tv for
other learning needs and

293
00:16:28,027 --> 00:16:33,241
they can let you know what they think of
the people who develop it which is us.

294
00:16:33,241 --> 00:16:36,336
So thanks again, Cody and
we'll see you all next week.

295
00:16:36,336 --> 00:16:36,836
[MUSIC]
