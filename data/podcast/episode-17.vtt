WEBVTT

1
00:00:00.000 --> 00:00:02.606
[MUSIC]

2
00:00:02.606 --> 00:00:04.890
Hello and
welcome to the Haskell Weekly podcast.

3
00:00:04.890 --> 00:00:07.039
As you might have guessed
this show is about Haskell,

4
00:00:07.039 --> 00:00:09.200
which is a purely functional
programming language.

5
00:00:09.200 --> 00:00:10.800
I'm your host, Sarah Lichtenstein.

6
00:00:10.800 --> 00:00:13.000
I'm an engineer here at ITProTV.

7
00:00:13.000 --> 00:00:15.600
With me Today is Andres Schmois,
one of the engineers.

8
00:00:15.600 --> 00:00:17.430
Thanks for joining me today, Andres.

9
00:00:17.430 --> 00:00:19.100
>> Thank you for having me, Sarah.

10
00:00:19.100 --> 00:00:20.400
I'm excited to be here.

11
00:00:20.400 --> 00:00:24.706
I think today we're gonna be talking
about the Haskell phrasebook,

12
00:00:24.706 --> 00:00:27.389
which is one of the Haskell Weekly topics.

13
00:00:27.389 --> 00:00:29.747
And since I'm just starting out here,

14
00:00:29.747 --> 00:00:33.700
I thought it would be a pretty
good experience to talk about.

15
00:00:33.700 --> 00:00:36.900
Next to you, I'm the next newest so,

16
00:00:36.900 --> 00:00:40.700
we have the two most junior
Haskell learners here.

17
00:00:40.700 --> 00:00:43.707
>> Yep.
I'm actually very excited to continue my

18
00:00:43.707 --> 00:00:48.713
learning experience as well as, maybe
even potentially get to a point where

19
00:00:48.713 --> 00:00:54.525
I can start teaching things about Haskell,
since it's very interesting topic for me.

20
00:00:54.525 --> 00:00:55.292
>> Absolutely, and

21
00:00:55.292 --> 00:00:58.525
I'm really excited to hear more in
depth about your learning experience.

22
00:00:58.525 --> 00:01:01.838
So why don't you tell me a little bit
about what you did to first learn

23
00:01:01.838 --> 00:01:02.603
the language?

24
00:01:02.603 --> 00:01:07.468
>> The first thing that I started
doing was reading a book that probably

25
00:01:07.468 --> 00:01:10.648
everyone has heard of which is, Learn You.

26
00:01:10.648 --> 00:01:13.000
Learn You a Haskell for Great Good.

27
00:01:13.000 --> 00:01:16.800
It's something that kind of

28
00:01:16.800 --> 00:01:20.600
put me a little bit uneasy about the whole
learning experience with Haskell.

29
00:01:20.600 --> 00:01:23.963
Because while it's a great
learning resource and

30
00:01:23.963 --> 00:01:29.496
it's freely available online, and all
the great things that come with all that.

31
00:01:29.496 --> 00:01:33.838
There is one downside to it, and
it was a little daunting at first, and

32
00:01:33.838 --> 00:01:37.238
that's the same thing with
every language out there.

33
00:01:37.238 --> 00:01:42.144
But one thing that first came to mind was,
there's a lot of syntax here

34
00:01:42.144 --> 00:01:47.100
that I am gonna have to learn which
is gonna be extremely difficult.

35
00:01:47.100 --> 00:01:47.743
>> Yeah, absolutely.

36
00:01:47.743 --> 00:01:51.922
I think I had that same experience when I
first came into shadow before I started

37
00:01:51.922 --> 00:01:52.757
working here.

38
00:01:52.757 --> 00:01:56.130
When they had Haskell up on the screens,
and it was just so

39
00:01:56.130 --> 00:02:01.000
unlike anything I'd seen before, so
it can be really scary at first.

40
00:02:01.000 --> 00:02:02.600
>> Yeah, definitely.

41
00:02:02.600 --> 00:02:06.825
One thing that was brought up
to us this week was in the,

42
00:02:06.825 --> 00:02:09.800
Haskell Weekly was the Haskell phrasebook.

43
00:02:09.800 --> 00:02:14.153
And it caught my attention
because it's similar resource to

44
00:02:14.153 --> 00:02:16.721
Learn You a Haskell for Great Good.

45
00:02:16.721 --> 00:02:18.409
But it's a lot more quick and

46
00:02:18.409 --> 00:02:22.635
succinct, and I do say similar in
that they're both beginner pieces.

47
00:02:22.635 --> 00:02:26.708
Not that they match one-to-one
in what they actually teach.

48
00:02:26.708 --> 00:02:28.520
>> Right, absolutely.

49
00:02:28.520 --> 00:02:32.790
Is there any takeaways from the phrasebook
that you particularly like or

50
00:02:32.790 --> 00:02:34.195
that you didn't like?

51
00:02:34.195 --> 00:02:39.434
>> One thing I really, really loved about
reading through that was how quick and

52
00:02:39.434 --> 00:02:41.215
simple each example was.

53
00:02:41.215 --> 00:02:44.564
And it starts you off slow
with the hello world,

54
00:02:44.564 --> 00:02:47.594
just like every other resource out there.

55
00:02:47.594 --> 00:02:54.263
Yeah, [LAUGH] and, now I very much
liked that it was quick, succinct.

56
00:02:54.263 --> 00:02:58.404
And from the last three months that
I've been doing this Haskell learning

57
00:02:58.404 --> 00:03:01.943
experience, most of the topics
that were touched upon their,

58
00:03:01.943 --> 00:03:03.900
I have been needing to use.

59
00:03:03.900 --> 00:03:04.434
>> Absolutely.

60
00:03:04.434 --> 00:03:07.472
I really like that they introduced
ghcid almost immediately.

61
00:03:07.472 --> 00:03:11.705
Because I don't think we started using
that until a little bit after Taylor got

62
00:03:11.705 --> 00:03:13.703
here, and it's such a useful tool.

63
00:03:13.703 --> 00:03:15.900
I mean, we use it everyday.

64
00:03:15.900 --> 00:03:18.027
>> Yeah, definitely.

65
00:03:18.027 --> 00:03:20.538
>> So in talking about the phrasebook,
we can't help but

66
00:03:20.538 --> 00:03:22.784
highlight a couple really
important sections.

67
00:03:22.784 --> 00:03:25.644
So one of the ones that I wanted
to talk about was continual

68
00:03:25.644 --> 00:03:28.400
checking because they use
ghcid almost immediately.

69
00:03:28.400 --> 00:03:32.584
It's the second section in the phrasebook,
and it's such a useful tool.

70
00:03:32.584 --> 00:03:35.370
And I don't think we started
using it until Taylor,

71
00:03:35.370 --> 00:03:37.219
our lead engineer got hired here.

72
00:03:37.219 --> 00:03:41.028
And it's great to see it represented so
early because we use this everyday.

73
00:03:41.028 --> 00:03:42.594
>> Yeah, definitely,

74
00:03:42.594 --> 00:03:47.727
ghcid was kind of weird to me at first
when I when I got started because we

75
00:03:47.727 --> 00:03:53.130
already had a compilation tool that
was already doing everything for us.

76
00:03:53.130 --> 00:03:57.946
And then, my coworkers started saying,
hey, we also use ghcid if you want

77
00:03:57.946 --> 00:04:02.392
a much faster experience with
the compilation and all these things.

78
00:04:02.392 --> 00:04:08.119
And I was surprised at first
that the compilation side and

79
00:04:08.119 --> 00:04:13.019
the ghcid side was so
decoupled from each other.

80
00:04:13.019 --> 00:04:17.887
It was really nice to see all of these
errors instantly happen not having to wait

81
00:04:17.887 --> 00:04:22.111
for the compiler to pick up the changes
and be a little slow about it.

82
00:04:22.111 --> 00:04:26.000
So I very much like that ghcid
was instantly brought up.

83
00:04:27.000 --> 00:04:30.702
>> Yeah, the instant feedback loop
that it provides is so invaluable.

84
00:04:30.702 --> 00:04:32.579
It's amazing.

85
00:04:32.579 --> 00:04:33.864
>> Definitely.

86
00:04:33.864 --> 00:04:38.065
>> Are there any sections that you
particularly thought were interesting or

87
00:04:38.065 --> 00:04:42.197
would be useful to somebody trying
to switch to Haskell from let's say,

88
00:04:42.197 --> 00:04:44.200
an imperative language?

89
00:04:44.200 --> 00:04:48.378
>> The one thing that came to mind
when I first read through this

90
00:04:48.378 --> 00:04:51.555
phrasebook was the fact
that at the end of it,

91
00:04:51.555 --> 00:04:55.171
they brought up mutable variables and
threading.

92
00:04:55.171 --> 00:04:56.173
>> Mm-hm.

93
00:04:56.173 --> 00:05:02.089
>> That's not something that you see
as often in beginner guide books and

94
00:05:02.089 --> 00:05:06.499
under like, the Learn You a Haskell for
Great Good,

95
00:05:06.499 --> 00:05:11.734
did not touch up on mutable variables,
did not do threading.

96
00:05:11.734 --> 00:05:15.961
Maybe mentioned it, I can't really
remember off the top of my head, but

97
00:05:15.961 --> 00:05:19.500
definitely wasn't anything
that stuck out with me.

98
00:05:19.500 --> 00:05:22.555
>> Yeah,
those are definitely more complex subject.

99
00:05:22.555 --> 00:05:26.010
So for it to be in a beginner's
book is really interesting.

100
00:05:26.010 --> 00:05:30.822
>> Yeah, and I think this is more
a beginner Haskell that rather than

101
00:05:30.822 --> 00:05:33.632
a beginner programming phrasebook.

102
00:05:33.632 --> 00:05:38.441
Now, it could be seen either way
regardless because you can just

103
00:05:38.441 --> 00:05:43.175
pick this up and start coding in
Haskell and be perfectly fine.

104
00:05:43.175 --> 00:05:46.520
But one thing that I have
from my background of coming

105
00:05:46.520 --> 00:05:48.504
from an imperative language.

106
00:05:48.504 --> 00:05:53.469
My background comes from Java, Android,
on the front end, and then I'd done

107
00:05:53.469 --> 00:05:58.223
some pretty extensive node frameworking,
and all of that in the back end.

108
00:05:58.223 --> 00:06:03.091
So, I come mostly from imperative and
I've been doing it for quite a while now.

109
00:06:03.091 --> 00:06:07.958
So, seeing all this here is a good thing
to see because if I would have started off

110
00:06:07.958 --> 00:06:10.441
with this I would have been like, okay.

111
00:06:10.441 --> 00:06:14.412
Well, I'm thinking in imperative and
I'm gonna switch over to Haskell, but

112
00:06:14.412 --> 00:06:18.443
I'm gonna leave the functional things
a little bit behind until I start getting

113
00:06:18.443 --> 00:06:21.949
used to the syntax and all of the other
weird things that come with it.

114
00:06:21.949 --> 00:06:24.004
>> Right,
I definitely can understand that.

115
00:06:24.004 --> 00:06:27.356
What was the hardest part for you from
switching from an imperative language to

116
00:06:27.356 --> 00:06:29.600
something so functional like Haskell?

117
00:06:29.600 --> 00:06:32.546
>> The hardest part was
the syntax weirdly enough.

118
00:06:32.546 --> 00:06:38.687
I took a very long time to realize some
of the different things that Haskell

119
00:06:38.687 --> 00:06:45.039
does to the syntax like not needing to
say which monitor your in explicitly.

120
00:06:45.039 --> 00:06:48.048
So you could just use it
as if it was already there.

121
00:06:48.048 --> 00:06:55.074
A lot of the the small syntax things
really took me out of my comfort zone.

122
00:06:55.074 --> 00:06:57.301
And so, once I got through that,

123
00:06:57.301 --> 00:07:02.564
learning all of the different things
Haskell does in functional and all that.

124
00:07:02.564 --> 00:07:05.467
It wasn't as difficult,
especially because JavaScript and

125
00:07:05.467 --> 00:07:08.940
all of those languages could technically
be used in a functional manner.

126
00:07:08.940 --> 00:07:12.319
They're usually not because they
have a bunch of state saving and

127
00:07:12.319 --> 00:07:13.619
all that that you can do.

128
00:07:13.619 --> 00:07:17.902
But I very much enjoyed,
once I got through the syntax,

129
00:07:17.902 --> 00:07:23.372
I enjoyed being able to just apply all
the knowledge I had into this great

130
00:07:23.372 --> 00:07:28.403
functional language that doesn't
usually allow state saving.

131
00:07:28.403 --> 00:07:30.387
>> Absolutely,
that definitely makes sense.

132
00:07:30.387 --> 00:07:33.260
Are there any other parts of the
phrasebook that you'd like to highlight or

133
00:07:33.260 --> 00:07:33.951
talk about here?

134
00:07:33.951 --> 00:07:37.769
>> Well, you mentioned saying,
coming from imperative language,

135
00:07:37.769 --> 00:07:39.687
what other things stood up to me.

136
00:07:39.687 --> 00:07:43.637
The if, then and for loops,
from an imperative language,

137
00:07:43.637 --> 00:07:47.904
they're used pretty extensively,
I assume you agree as well.

138
00:07:47.904 --> 00:07:51.424
>> Yes, for the experience I
had in imperative languages.

139
00:07:51.424 --> 00:07:53.645
We definitely did a lot of those loops.

140
00:07:53.645 --> 00:07:58.210
>> Yeah, and one thing that I've
learned over the past three months

141
00:07:58.210 --> 00:08:03.107
working on a Haskell server-side
coding is that if statements and for

142
00:08:03.107 --> 00:08:05.770
loops have been used very sparingly.

143
00:08:05.770 --> 00:08:08.902
I think for loops,
I have not seen one yet,

144
00:08:08.902 --> 00:08:11.698
which is a crazy thing to think about.

145
00:08:11.698 --> 00:08:13.206
And if statements,

146
00:08:13.206 --> 00:08:18.705
we use very rarely because most of our
coding is parsing different types,

147
00:08:18.705 --> 00:08:23.423
and making sure everything is typed safe,
and our responses.

148
00:08:23.423 --> 00:08:27.065
And if statements don't
really come into any of that.

149
00:08:27.065 --> 00:08:32.055
So it's interesting to see that once
coming back after three months and reading

150
00:08:32.055 --> 00:08:37.209
through this phrasebook that if statements
are a thing in the programming world.

151
00:08:37.209 --> 00:08:38.152
I mean, obviously.

152
00:08:38.152 --> 00:08:43.256
But it is nice to be able to come
from an imperative language and

153
00:08:43.256 --> 00:08:46.702
have the same syntax that we're used to.

154
00:08:46.702 --> 00:08:51.632
But then once you start actually
working purely in a Haskell manner,

155
00:08:51.632 --> 00:08:56.991
you stop using the things that you're
used to from imperative languages.

156
00:08:56.991 --> 00:08:57.858
>> Yeah, definitely.

157
00:08:57.858 --> 00:09:00.603
Hilariously enough up until
I read this phrasebook,

158
00:09:00.603 --> 00:09:03.045
I didn't even know that Haskell had for
loops.

159
00:09:03.045 --> 00:09:04.197
>> [LAUGH] Yeah.

160
00:09:04.197 --> 00:09:06.902
That's actually a pretty good point.

161
00:09:06.902 --> 00:09:10.456
I mean, you've been doing this for
a year and a half.

162
00:09:10.456 --> 00:09:14.454
How was your first three months
of your learning experience?

163
00:09:14.454 --> 00:09:18.824
>> My beginning learning experience,
I like to call my brain melt.

164
00:09:18.824 --> 00:09:23.390
Because everyday I would come to work and
I would pair with the other engineers.

165
00:09:23.390 --> 00:09:27.591
And I would feel like my brain was melting
out of my ears because it was just so

166
00:09:27.591 --> 00:09:29.859
much new information, and it was just so

167
00:09:29.859 --> 00:09:33.414
vastly different from anything
else that I've ever learned.

168
00:09:33.414 --> 00:09:36.461
But as affectionately as I
called it the brain melt,

169
00:09:36.461 --> 00:09:40.075
I like to say that it also reformed
into a bigger better brain.

170
00:09:40.075 --> 00:09:44.328
So, it was definitely a challenge for me.

171
00:09:44.328 --> 00:09:45.683
>> I agree completely there.

172
00:09:45.683 --> 00:09:48.839
I'm going through that brain melt now, and

173
00:09:48.839 --> 00:09:53.541
going through the first few weeks
was difficult to say the least.

174
00:09:53.541 --> 00:09:57.080
It wasn't more that I couldn't
understand what was happening.

175
00:09:57.080 --> 00:10:02.372
It was more that trying to get your
thoughts into a functional manner became

176
00:10:02.372 --> 00:10:07.916
a lot more difficult when at the same time
I had to learn the syntax for Haskell.

177
00:10:07.916 --> 00:10:12.109
So, I could totally see that
brain melt being a thing for

178
00:10:12.109 --> 00:10:17.209
Haskell learning because you're
learning so many things at once.

179
00:10:17.209 --> 00:10:19.708
Not unlike learning programming for
the first time.

180
00:10:19.708 --> 00:10:20.644
So maybe.

181
00:10:20.644 --> 00:10:22.142
>> Absolutely.

182
00:10:22.142 --> 00:10:25.098
>> Yeah, maybe it was like
that when I first started.

183
00:10:25.098 --> 00:10:29.273
I did start at a slightly young age, so I
had a lot more time available in my hand.

184
00:10:29.273 --> 00:10:36.240
So, it could be that a slower pace
into Haskell is much less demanding.

185
00:10:36.240 --> 00:10:40.334
But you and me,
we both sort of jumped in there, and

186
00:10:40.334 --> 00:10:43.296
had to learn it as quick as possible.

187
00:10:43.296 --> 00:10:49.771
And I think it's a pretty cool skill
to have, to be able to just jump in and

188
00:10:49.771 --> 00:10:54.772
brain melt for a week or two,
and just keep on learning.

189
00:10:54.772 --> 00:10:58.841
So, yeah, hopefully one day,
in that year-and-a-half,

190
00:10:58.841 --> 00:11:02.854
I'll look back and
think the same thing that you're saying.

191
00:11:02.854 --> 00:11:07.673
>> Absolutely, what really I think kind
of helps me solidify my knowledge is

192
00:11:07.673 --> 00:11:12.821
being able to like work with our coworkers
and some of our new newer coworkers.

193
00:11:12.821 --> 00:11:16.277
Like I distinctly remember pairing with
you on one of your first day as an,

194
00:11:16.277 --> 00:11:17.575
explaining some concept.

195
00:11:17.575 --> 00:11:21.061
I've been like, wow, I know stuff now.

196
00:11:21.061 --> 00:11:24.487
So I'm sure you're gonna have a similar
experience with our new intern,

197
00:11:24.487 --> 00:11:25.713
which will be fun for you.

198
00:11:25.713 --> 00:11:26.847
>> Yeah, definitely.

199
00:11:26.847 --> 00:11:31.945
I've already started seeing that happen,
and it's a good feeling to be

200
00:11:31.945 --> 00:11:37.056
able to explain something after you
very recently just learned it, so.

201
00:11:37.056 --> 00:11:37.985
>> Absolutely.

202
00:11:37.985 --> 00:11:39.146
>> Totally agree there.

203
00:11:39.146 --> 00:11:39.932
>> Okay.

204
00:11:39.932 --> 00:11:44.355
Well, is there anything else, maybe about
the phrasebook or about learning Haskell,

205
00:11:44.355 --> 00:11:45.381
any tips or tricks?

206
00:11:45.381 --> 00:11:50.845
>> Well, one thing that I thought of when
I first started learning Haskell was,

207
00:11:50.845 --> 00:11:54.722
Learn You a Haskell for
Great Good is a great resource.

208
00:11:54.722 --> 00:11:55.665
>> Right.

209
00:11:55.665 --> 00:11:58.732
>> And when I first started reading it,
it was a daunting thing.

210
00:11:58.732 --> 00:12:03.929
It was too much at once, and I think
it kind of gave me a false sense of,

211
00:12:03.929 --> 00:12:08.874
this is gonna be extremely difficult and
possibly not possible.

212
00:12:08.874 --> 00:12:16.259
So while it's a great resource, I think
it shouldn't be the first thing you read.

213
00:12:16.259 --> 00:12:19.381
I think the first thing you
read could be this phrasebook.

214
00:12:19.381 --> 00:12:22.070
It's kind of hard to say at the moment,
but

215
00:12:22.070 --> 00:12:24.998
just thinking back after
these three months.

216
00:12:24.998 --> 00:12:29.881
I think that phrasebook is a lot
more easier thing to start with than

217
00:12:29.881 --> 00:12:32.506
Learn You a Haskell for Great Good.

218
00:12:32.506 --> 00:12:34.613
Now, that's not to say that
Learn You a Haskell for

219
00:12:34.613 --> 00:12:36.677
Great Good is not something
you shouldn't read.

220
00:12:36.677 --> 00:12:40.961
I think it's a great read and I think it
will solidify a lot of the things that

221
00:12:40.961 --> 00:12:45.455
you've been slowly learning while doing
test programs and things like that.

222
00:12:45.455 --> 00:12:50.891
So I enjoyed reading both and I will
probably read them again after a month or

223
00:12:50.891 --> 00:12:55.550
so after getting a little more
stable with my Haskell writing and

224
00:12:55.550 --> 00:12:58.590
reading, and certain things like that.

225
00:12:58.590 --> 00:12:59.401
>> Absolutely.

226
00:12:59.401 --> 00:13:03.997
I definitely think that this phrasebook
would be a good first introduction before

227
00:13:03.997 --> 00:13:05.674
the Learn You a Haskell book.

228
00:13:05.674 --> 00:13:08.486
Just because it's so
succinct and so clear,

229
00:13:08.486 --> 00:13:12.781
and it does make a lot of good
bridges from imperative to functional.

230
00:13:12.781 --> 00:13:13.494
>> I agree.

231
00:13:13.494 --> 00:13:16.072
>> Thanks for
being on the show with me today, Andres.

232
00:13:16.072 --> 00:13:17.056
>> Thank you for having me.

233
00:13:17.056 --> 00:13:21.292
I enjoyed talking about my first
experiences about Haskell.

234
00:13:21.292 --> 00:13:22.325
>> Absolutely, me too.

235
00:13:22.325 --> 00:13:24.943
And thank you for
listening to the Haskell Weekly podcast.

236
00:13:24.943 --> 00:13:29.883
If you like what you heard, find out
more at our website, haskellweekly.news.

237
00:13:29.883 --> 00:13:31.574
Also, please rate and view us on iTunes.

238
00:13:31.574 --> 00:13:32.931
It helps a lot.

239
00:13:32.931 --> 00:13:35.410
Haskell Weekly is brought
to you by ITProTV,

240
00:13:35.410 --> 00:13:38.815
the tech skills development platform for
IT professionals.

241
00:13:38.815 --> 00:13:40.337
>> And also, our employer.

242
00:13:40.337 --> 00:13:41.166
>> Yes, that too.

243
00:13:41.166 --> 00:13:45.847
Send anyone who needs their
IT news to www.itprotv for

244
00:13:45.847 --> 00:13:48.397
all of their learning needs.

245
00:13:48.397 --> 00:13:49.364
Thanks again for listening.

246
00:13:49.364 --> 00:13:51.305
We'll see you next week.

247
00:13:51.305 --> 00:13:51.805
[MUSIC]
