WEBVTT

00:00:07.350 --> 00:00:09.840
>> Hello and welcome to the Haskell Weekly podcast.

00:00:09.930 --> 00:00:13.380
This is a show about Haskell, a purely functional programming language.

00:00:13.560 --> 00:00:15.240
I'm your host Taylor Fausak.

00:00:15.420 --> 00:00:18.210
I'm the director of software engineering at ACI Learning.

00:00:18.810 --> 00:00:20.510
And with me today is Cameron Gera.

00:00:20.670 --> 00:00:21.960
One of the engineers on my team.

00:00:22.200 --> 00:00:23.520
Thanks for joining me today, cam.

00:00:24.000 --> 00:00:24.210
Thanks

00:00:24.210 --> 00:00:32.430
>> for having me today, Taylor, you know, it's uh, a beautiful sunny
Friday at, uh, In the Gainesville, Florida area, which is where we are located.

00:00:33.690 --> 00:00:37.410
And I think a good day to day, we've got a phone article.

00:00:37.470 --> 00:00:45.930
Um, but you know, I think we also have some drama in the
Haskell sphere, um, to something that I probably, or, you know,

00:00:45.959 --> 00:00:48.870
I don't even think you Taylor use this platform very often.

00:00:49.230 --> 00:00:58.030
Uh, but Freenode with, you know, an IRC channel more or less
is going over some, some changes and creating some drama.

00:00:58.769 --> 00:00:59.250
>> They are.

00:00:59.250 --> 00:01:06.210
Yeah, like you said, you know, neither of us are really IRC
users, but the Haskell channel on Freenode is really popular.

00:01:06.630 --> 00:01:16.200
And there was some drama over the past week where the people who
own free node kinda like changed hands or did something underhanded.

00:01:16.200 --> 00:01:22.380
And now everyone is leaving free node and moving over to
this other place called, I want to say Libera or Libera.

00:01:22.410 --> 00:01:23.400
I'm not sure how to pronounce it.

00:01:23.850 --> 00:01:27.450
Um, so if you are an IRC user and you're on free node and you're.

00:01:28.365 --> 00:01:30.884
Where is the Haskell channel somewhere else now.

00:01:30.975 --> 00:01:36.225
So, uh, some other people on the internet can
probably do a better job of explaining it than us.

00:01:36.255 --> 00:01:37.304
We just know that it happened.

00:01:38.384 --> 00:01:40.335
>> We wanted to open it up for a little bit more banter

00:01:40.455 --> 00:01:43.905
>> you know, but yeah, it's like I have slack.

00:01:43.935 --> 00:01:45.914
I have discord I'm on Reddit.

00:01:45.945 --> 00:01:46.845
I'm on Twitter.

00:01:47.265 --> 00:01:48.435
We use teams at work.

00:01:48.435 --> 00:01:50.844
Like I don't need another chat app.

00:01:50.844 --> 00:01:51.175
You don't

00:01:51.195 --> 00:01:55.905
>> want Keybase and matrix and Libra or Libera?

00:01:56.324 --> 00:01:56.685
However

00:01:56.685 --> 00:01:57.414
>> you say that, Nope.

00:01:58.185 --> 00:02:00.135
And Zulip and there's, there's too many.

00:02:00.375 --> 00:02:01.095
>> There is.

00:02:01.245 --> 00:02:08.204
Well, you know, and we also, you know, on the podcast we've interviewed
someone who also has another social media platform, uh, chat wise.

00:02:08.354 --> 00:02:08.864
Wisely.

00:02:09.074 --> 00:02:09.345
>> Yeah.

00:02:09.704 --> 00:02:11.775
>> If you haven't heard that episode, check it out.

00:02:12.614 --> 00:02:13.394
>> Nice call back.

00:02:13.635 --> 00:02:13.935
>> Yeah.

00:02:13.935 --> 00:02:15.945
You know, I always like to reference back to

00:02:15.945 --> 00:02:16.035
the

00:02:16.035 --> 00:02:16.845
>> things we do.

00:02:16.965 --> 00:02:17.265
Yeah.

00:02:17.415 --> 00:02:19.185
The Haskell weekly cinematic universe.

00:02:19.305 --> 00:02:19.605
Yeah.

00:02:19.635 --> 00:02:19.995
I mean,

00:02:20.114 --> 00:02:26.025
>> and speaking of we're actually taking a flashback
from last week to some degree because we have another post

00:02:26.025 --> 00:02:29.144
by Gabe Gonzalez who's, we're going to talk about today and.

00:02:31.364 --> 00:02:31.605
Yeah.

00:02:31.605 --> 00:02:34.424
And I think Haskell weekly has a love affair with him, which is okay.

00:02:35.204 --> 00:02:42.765
Now I think he does put out regularly good post,
which is nice to have for a site like Haskell weekly.

00:02:42.765 --> 00:02:47.744
So we can inform everyone and all of our
listeners, uh, some, some cool stuff going on.

00:02:47.774 --> 00:02:51.915
So he kind of, uh, does three big ideas in this.

00:02:53.265 --> 00:02:53.655
Article.

00:02:53.655 --> 00:02:57.945
And this article is called module organization guidelines for Haskell projects.

00:02:58.035 --> 00:03:02.655
And like I said, there's three kind of big ideas that he kind of unwraps here.

00:03:02.655 --> 00:03:04.395
So we're going to just kind of jump right in.

00:03:04.755 --> 00:03:14.195
Uh, and this is something I think the first topic is one that honestly
internally ITProTV and ACI Learning were divided on it as far as our code base

00:03:14.195 --> 00:03:19.275
is concerned because you know, when you have a web application with an API.

00:03:20.055 --> 00:03:24.855
You know, you tend to make a horizontal or our organization.

00:03:25.005 --> 00:03:30.825
Um, but here he talks about organizing modules vertically, not horizontally.

00:03:31.305 --> 00:03:43.815
Uh, so for us, if we were going to be creating libraries constantly
and third-party SDKs more or less for other clients and yeah.

00:03:44.084 --> 00:03:45.584
Vertically would make sense.

00:03:45.715 --> 00:03:51.209
Um, For an API that has the same underlying types.

00:03:51.239 --> 00:03:52.709
Sometimes it's hard to do that.

00:03:53.340 --> 00:03:53.670
>> Yeah.

00:03:54.000 --> 00:03:58.590
And it may be kind of hard to conceptualize
what is meant by vertically and horizontally.

00:03:58.890 --> 00:04:05.310
I like to visualize it or think about it in terms of like vertical
integration for a company where it's like, oh, we manage, you know,

00:04:05.310 --> 00:04:09.299
from farm to table or from widget to device or whatever it is.

00:04:09.750 --> 00:04:12.570
Uh, so it's like all of this stuff that you need to get.

00:04:12.570 --> 00:04:15.120
One thing done is all together in one slice.

00:04:15.180 --> 00:04:23.310
That is to me, Versus horizontal is you're going to split
things up based on what they are rather than what they do.

00:04:23.580 --> 00:04:29.370
So it's like, okay, we're going to have all the types over
here and we're going to have all the type classes over here.

00:04:29.760 --> 00:04:31.920
Um, and I feel like.

00:04:33.075 --> 00:04:38.025
For me, I tend toward the horizontal thing
where I'm like, oh, well this is the type.

00:04:38.035 --> 00:04:39.495
I'll put it over here with all the other types.

00:04:39.945 --> 00:04:42.195
Uh, but at a certain size that kind of falls apart.

00:04:42.225 --> 00:04:45.015
And as you touched on in our code base, we have both.

00:04:45.195 --> 00:04:48.195
So we're diagonal.

00:04:48.435 --> 00:04:48.645
>> Yeah.

00:04:48.645 --> 00:04:57.135
Well, I, I think your, uh, your analogy, there or explanation of it, uh,
reminded me of something related more to farms, which is like a silo.

00:04:57.165 --> 00:05:00.075
You know, there's a silo like vertically that holds.

00:05:01.080 --> 00:05:04.950
Something, I don't really actually know the grain grain up, you know?

00:05:04.950 --> 00:05:07.799
And then there's like the troughs that the horses eat out of.

00:05:07.799 --> 00:05:11.849
So, no, I prefer to be a horse than a piece of grain.

00:05:11.849 --> 00:05:16.169
Cause I'm, can't eat gluten, so I don't want to always be irritated.

00:05:16.229 --> 00:05:17.700
So I'm going to go with the trough

00:05:17.729 --> 00:05:18.239
>> style.

00:05:19.140 --> 00:05:19.469
Yeah.

00:05:19.500 --> 00:05:20.070
There you go.

00:05:20.130 --> 00:05:21.719
Trough versus silo.

00:05:22.440 --> 00:05:22.739
Yep.

00:05:22.799 --> 00:05:23.159
So

00:05:23.429 --> 00:05:24.450
>> if you're a farmer,

00:05:25.260 --> 00:05:28.349
>> let us know, let us know how wrong we got it.

00:05:29.205 --> 00:05:34.395
Um, and the example he gives is, uh, you know, dealing
with like parsing and evaluating and type checking.

00:05:34.395 --> 00:05:37.815
So that makes sense because he's working on a language doll.

00:05:37.845 --> 00:05:40.245
So he naturally has all of these things that he's working on.

00:05:40.245 --> 00:05:48.555
But like you mentioned for our application, um, we're integrating with a
bunch of third parties and we're also developing our own in-house stuff.

00:05:48.585 --> 00:05:55.725
So we end up a little bit of both where it's like, oh, we're
talking to Intercom for our customer engagement platform.

00:05:55.965 --> 00:05:57.615
So all of the Intercom stuff goes over.

00:05:58.605 --> 00:06:04.395
But we have all of our like HTTP handlers in one namespace.

00:06:04.395 --> 00:06:07.995
So, so the handler part is horizontal, but the Intercom part is vertical.

00:06:08.115 --> 00:06:11.895
And I think it's, you know, in general, I agree with him.

00:06:11.895 --> 00:06:16.875
You should probably prefer verticality, but, um, you can make good use of both.

00:06:17.415 --> 00:06:17.655
Yeah.

00:06:17.655 --> 00:06:18.195
And I feel like

00:06:18.195 --> 00:06:26.355
>> we've even kind of evolved through time with this, um, because
yes, we were kind of vertically to some degree with our initial.

00:06:28.005 --> 00:06:36.215
HTTP server that we created, um, using Happstack we kind of kept the
types and everything kind of siloed within, um, the, the structure.

00:06:36.235 --> 00:06:41.715
Then we've realized, okay, well now we have multiple
HTTP servers that need to share these types.

00:06:42.105 --> 00:06:43.995
And, you know, we don't want to repeat them everywhere.

00:06:44.205 --> 00:06:44.865
Uh, but.

00:06:45.870 --> 00:06:50.910
We still have, like you said, like an Intercom integration
and it makes more sense to push everything over.

00:06:51.270 --> 00:06:54.450
Um, and I'm actually dealing with that right now with, uh, practice labs.

00:06:54.450 --> 00:07:00.450
Cause I want to extract a lot of this stuff into its own kind of
vertical rather than it being in the trough with everything else.

00:07:00.870 --> 00:07:09.945
Um, cause it's, it's hard to parse when it's in the middle of, you
know, an, uh, database model versus, you know, Third-party response.

00:07:09.974 --> 00:07:10.335
Right?

00:07:10.365 --> 00:07:12.405
So it would be nice to clean that up.

00:07:12.435 --> 00:07:16.695
But I was looking at his kind of like
module structure that he was talking about.

00:07:16.695 --> 00:07:24.205
And I was like, wow, we're probably more horizontal than we are
vertical because we have a types module, we have not necessarily a lib

00:07:24.224 --> 00:07:29.414
module, but a that's where our, our source file is a lib file, more

00:07:29.414 --> 00:07:29.925
>> or less.

00:07:30.015 --> 00:07:34.065
Um, and, uh, with regards to the types module, we do have one of those.

00:07:34.800 --> 00:07:42.960
We're moving away from it re exporting all of the types that are underneath it,
which is one of the points he gives against this horizontal layout is that, uh,

00:07:42.990 --> 00:07:51.570
if you have like, you know, Types.* And then in other places that aren't types,
you're going to want to import all of that altogether because it's convenient.

00:07:52.080 --> 00:07:58.110
But when, what ends up happening is if you change one type, everything
has to get rebuilt because everything depends on all of the.

00:07:59.115 --> 00:08:03.495
And what we've moved toward instead is having more granular imports.

00:08:03.525 --> 00:08:07.605
So we'll put like each type in its own module
and then import only the types we need.

00:08:08.055 --> 00:08:10.275
So that can get a little tedious when you're writing it.

00:08:10.335 --> 00:08:16.965
But then when you have to rebuild only the stuff that actually
is affected by the changes you made, gets rebuilt, which is nice.

00:08:17.565 --> 00:08:17.655
We're

00:08:17.655 --> 00:08:25.555
>> experiencing that tension of longer build times because you
know, well, not necessarily build times but longer rebuild times because.

00:08:26.925 --> 00:08:32.385
At the bottom would get changed and then everything, you
know, the rest of the tree would have to recompile and

00:08:32.655 --> 00:08:36.495
that was just painful, painful, and just frustrating.

00:08:36.534 --> 00:08:43.934
You're like, ah, I need now why, so thankfully
we're, we're growing like many engineers do.

00:08:44.444 --> 00:08:45.885
Um, you know, so that's good

00:08:46.095 --> 00:08:47.055
>> and engineering departments.

00:08:47.805 --> 00:08:52.814
It's like, we always say, you know, if you, if you look back
at the code you wrote a year ago and you still think it looks.

00:08:53.595 --> 00:08:55.155
You probably haven't grown much in the meantime,

00:08:56.595 --> 00:08:59.685
>> what, like an apple tree that hasn't produced any fruit.

00:09:00.225 --> 00:09:00.525
Yeah.

00:09:01.365 --> 00:09:03.615
>> Um, but I also wanted to touch on one other thing.

00:09:03.615 --> 00:09:08.085
He mentioned here as motivation for pervert preferring the vertical orientation.

00:09:08.565 --> 00:09:15.045
And it's something you touched on as well, cam of, if there
are pieces of your application or your, or whatever you're

00:09:15.045 --> 00:09:18.735
working on, that could be pulled out as separate packages.

00:09:19.725 --> 00:09:24.405
Those things are probably a vertical slice
where it's like, it does everything it needs to.

00:09:24.495 --> 00:09:31.125
And, you know, it's like, okay, it's going to talk to Intercom or it's going
to talk to whatever third-party or whatever, you know, library or driver.

00:09:31.454 --> 00:09:39.464
Um, and that is a compelling way to architect your application
because then you can become sort of like a, you're just the

00:09:39.464 --> 00:09:42.155
glue between all of these little packages that you've built.

00:09:42.495 --> 00:09:44.055
Which is a nice way to maintain stuff,

00:09:44.265 --> 00:09:44.655
>> right?

00:09:44.985 --> 00:09:45.255
Yeah.

00:09:45.285 --> 00:09:46.995
And it creates that nice interface.

00:09:47.015 --> 00:09:54.255
I think you and I were actually talking about that off air
before we started just how much nicer, like, if you have just a

00:09:54.974 --> 00:10:04.035
good interface from a package, like experience, you can really
work that into your application in a clear and readable way.

00:10:04.545 --> 00:10:09.765
And that doesn't muck it up with third-party
information that doesn't really matter.

00:10:10.740 --> 00:10:12.689
The business logic that you have in place.

00:10:13.290 --> 00:10:13.860
>> Exactly.

00:10:13.980 --> 00:10:16.199
That vertical slice forces you to think about.

00:10:16.709 --> 00:10:21.780
What your, what interface are you exposing
versus with the types, the horizontal slice?

00:10:22.020 --> 00:10:23.790
You just say like, well, here's a bag of types.

00:10:23.790 --> 00:10:24.180
Good luck.

00:10:25.949 --> 00:10:26.730
>> Good luck.

00:10:26.939 --> 00:10:27.180
Yeah.

00:10:27.540 --> 00:10:27.750
Yeah.

00:10:27.780 --> 00:10:30.900
I mean, in our like vert or when we were doing the.

00:10:30.900 --> 00:10:40.410
You know, overall big types re-export thing, you know, that file
that holds all the re-exports is still just as, like super long and

00:10:40.410 --> 00:10:46.740
hard to really find, unless you're just doing a project wide search,
like going through that file is like, oh wow, there's a lot here.

00:10:47.190 --> 00:10:57.060
So it's generally a little easier to like at least now we can just
do fuzzy, find all this stuff without getting that file in the way.

00:10:58.964 --> 00:11:05.685
>> Yeah, it's interesting that the vertical
slice also encourages you to use better tools.

00:11:05.984 --> 00:11:15.074
And, in like, for us, you know, we would love to use HLS, but that's even,
um, you know, like we, we don't need to tab nine gets the same thing.

00:11:15.074 --> 00:11:16.425
Fuzzy fine does the same thing.

00:11:16.425 --> 00:11:23.594
So like these general purpose tools that are built for anything can be
leveraged to make writing vertically sliced Haskell code a lot nicer.

00:11:27.270 --> 00:11:30.449
I think that's everything I had to say about vertical versus horizontal.

00:11:30.569 --> 00:11:33.030
Um, you got anything else you want to move on to the next one?

00:11:33.630 --> 00:11:34.730
>> I say let's, let's go on to

00:11:34.750 --> 00:11:35.849
>> naming conventions.

00:11:36.000 --> 00:11:36.240
Yeah.

00:11:36.240 --> 00:11:44.010
So naming conventions are up next and, uh, this maybe is
less relevant, I think to most people, because I feel like

00:11:44.010 --> 00:11:47.670
most Haskell developers probably aren't publishing packages.

00:11:47.730 --> 00:11:49.230
Like we've we published a handful.

00:11:49.500 --> 00:11:54.990
Um, and I personally have published a few, but I
feel like most people just use existing packages.

00:11:55.335 --> 00:11:58.425
Hopefully, that's not too, too crazy of an idea.

00:12:00.375 --> 00:12:02.925
>> Every Haskell developer doesn't create their own packages.

00:12:03.495 --> 00:12:07.995
>> I would love it if everyone did, but if you're
listening to this, please, you know, publish a package

00:12:07.995 --> 00:12:11.265
to Hackage, feel out what that whole process looks like.

00:12:11.295 --> 00:12:16.815
Um, it's fun and rewarding and you'll get a little more
appreciation for what it takes to put together a good package.

00:12:17.355 --> 00:12:17.715
Right?

00:12:17.745 --> 00:12:18.165
Well,

00:12:18.225 --> 00:12:24.165
>> and it seemed, I would completely
agree with, uh, Gabes kind of position here on.

00:12:25.110 --> 00:12:35.370
When you're you have a package, you know, name, you know, keep the
package name as close to the like module, the module name as possible.

00:12:35.370 --> 00:12:38.580
That way it's easier to understand.

00:12:38.610 --> 00:12:44.040
Oh, I'm importing, you know, foo-bar-baz, and I can access it at FooBarBaz.

00:12:44.400 --> 00:12:44.970
>> Um, yeah.

00:12:45.960 --> 00:12:52.370
So the one exception to this, or not the one
exception to like the strange difference here.

00:12:53.860 --> 00:12:57.315
Hackage package names are typically.

00:12:58.229 --> 00:13:03.119
Lowercased and connected with hyphens, which I often call kabob case.

00:13:03.150 --> 00:13:11.640
Cause it's like, you know, a kebab, um, and then Haskell package
names are capitalized in camel case and separated with dots.

00:13:11.670 --> 00:13:14.219
So you can't have dots in package names.

00:13:14.280 --> 00:13:16.560
So it would make sense to replace those with hyphens.

00:13:16.560 --> 00:13:24.239
But, um, I mentioned this cause like a package, like, um, quick check,
you know, the actual package name has a capital Q and a capital.

00:13:25.005 --> 00:13:31.155
Which is a little strange as far as packages
go, but it is closer to the module name.

00:13:31.455 --> 00:13:34.575
Although in this case, the module name is test dot quick check.

00:13:34.575 --> 00:13:35.565
So those don't even match.

00:13:35.595 --> 00:13:39.705
So it's kind of the worst of both worlds,
but so this is why Gabe wrote the article.

00:13:40.215 --> 00:13:40.815
Exactly.

00:13:40.995 --> 00:13:48.065
Um, I could, I could see the rationale for having
a package named quick check with capital Q and C.

00:13:48.585 --> 00:13:52.845
And it exposing a module called quick check with
capital Q and C cause then they would match.

00:13:53.045 --> 00:14:00.465
But for whatever reason, the community has decided no package names
are lowercase and hyphenated, even though module names are camel case.

00:14:02.235 --> 00:14:02.445
>> Good.

00:14:02.445 --> 00:14:03.765
Old kebab case.

00:14:04.545 --> 00:14:04.785
Yeah.

00:14:04.815 --> 00:14:13.515
I mean, I've become, you know, as probably a newer person to Haskell
then you like, I've come to understand the reasoning for that.

00:14:13.595 --> 00:14:16.485
Not necessarily understand it, but accept it like, oh, okay.

00:14:17.280 --> 00:14:26.640
Um, 90% of the time, the package name is going to be a hyphenated
version of the main module generally seems to be the practice.

00:14:26.760 --> 00:14:34.110
And I'm glad that Gabe kind of brought this up for the community to kind
of just see and remind themselves, Hey, it's probably a better idea to keep

00:14:34.110 --> 00:14:42.960
this clear, because first of all, you have a lot, you know, if you're not the
only user of this package, you're going to have people who are like confused

00:14:42.960 --> 00:14:46.230
or frustrated because it's just slightly different than what it should be.

00:14:47.459 --> 00:14:56.760
Um, or, you know, it is a really long module name, which we have
really long module names because we have fairly nest nest data.

00:14:57.209 --> 00:14:58.590
>> Um, yeah.

00:14:58.660 --> 00:15:03.930
There's no reason to make the primary interface
for your package, a really long module name.

00:15:04.110 --> 00:15:12.720
And the example he gives is a perfect one for the pretty printer package
used to the entry point, used to be data dot, text dot pretty print dot.

00:15:13.995 --> 00:15:17.925
And like, really you want to make everybody
that uses your package import that mouthful.

00:15:17.954 --> 00:15:20.775
Why not just import pretty printer, which is what they switched to

00:15:22.604 --> 00:15:23.805
>> that one's not camel cased.

00:15:24.495 --> 00:15:25.915
>> So yeah, that's a weird,

00:15:28.305 --> 00:15:29.354
>> uh, yeah.

00:15:29.564 --> 00:15:34.995
And then, you know, it seems to also help with naming clashes between packages,

00:15:36.224 --> 00:15:36.555
>> right?

00:15:36.584 --> 00:15:41.745
Because if or the package name has to be
unique, there's no way you can get around that.

00:15:41.954 --> 00:15:42.405
So if.

00:15:43.410 --> 00:15:46.050
Name your module after your package?

00:15:46.110 --> 00:15:50.250
It's probably going to be unique because
somebody would have to be a jerk to right.

00:15:50.340 --> 00:15:56.010
You know, like if I wrote a package called, uh, you know,
Taylor's pretty printer and I exposed a top level module called

00:15:56.010 --> 00:15:58.890
pretty printer, that would just be a jerk move on my part.

00:15:58.920 --> 00:16:00.180
So, you know,

00:16:01.740 --> 00:16:02.280
>> gosh, such

00:16:02.280 --> 00:16:03.030
>> a jerk Taylor.

00:16:03.640 --> 00:16:03.910
Yeah.

00:16:05.910 --> 00:16:06.330
>> Awesome.

00:16:06.330 --> 00:16:10.750
Well, I think that's about, I have all I have to say on naming conventions.

00:16:10.770 --> 00:16:11.670
Is there anything else you have.

00:16:13.785 --> 00:16:15.615
>> That's it for me too.

00:16:15.675 --> 00:16:17.955
Um, I, I agree with Gabe as per usual.

00:16:17.955 --> 00:16:20.385
Maybe that's why we talk about his posts so much on here.

00:16:20.385 --> 00:16:22.335
I just agree with everything he says, okay.

00:16:22.455 --> 00:16:22.575
If

00:16:22.575 --> 00:16:25.395
>> you're listening, you know, reach out, we can get you on the

00:16:25.395 --> 00:16:26.175
>> podcast.

00:16:26.475 --> 00:16:26.895
Yeah.

00:16:27.375 --> 00:16:28.935
We'd love to sit down for an interview.

00:16:29.655 --> 00:16:29.865
>> Yeah.

00:16:30.165 --> 00:16:36.265
Maybe next, the next time we record a podcast since
we're already on two in a row, just, just, trifecta

00:16:36.285 --> 00:16:37.695
>> with an interview with you at the end.

00:16:38.115 --> 00:16:38.355
Yeah.

00:16:38.415 --> 00:16:40.275
He's going to slowly take over the whole podcast.

00:16:40.375 --> 00:16:41.215
It'll be the Gabe show.

00:16:43.290 --> 00:16:46.410
>> And then we'll just be sending out the Gabe weekly newsletter.

00:16:47.310 --> 00:16:47.640
>> Yep.

00:16:47.730 --> 00:16:48.210
You got it.

00:16:48.480 --> 00:16:48.930
>> Nice.

00:16:49.410 --> 00:16:51.300
Um, all right, so what's, what's the next thing we're going to talk

00:16:51.300 --> 00:16:51.810
>> about Taylor.

00:16:52.530 --> 00:16:55.380
So the last one is I think maybe the weirdest one.

00:16:55.380 --> 00:17:03.270
And when I hadn't thought about before he calls it, the God library
stanza and he prefaces this with a caveat that it's only for.

00:17:04.109 --> 00:17:05.369
Proprietary projects.

00:17:05.369 --> 00:17:09.599
So stuff that you're not intending to publish on the Hackage or wherever.

00:17:10.500 --> 00:17:19.889
Um, but the idea is that instead of splitting up your package into
the normal parts where you have a library and an executable and a test

00:17:19.889 --> 00:17:25.630
suite and benchmarks, instead you throw everything into the library.

00:17:26.130 --> 00:17:31.470
And then for all those other bits, all
that you do is point to a particular part.

00:17:31.470 --> 00:17:37.920
So like for your executable, all you do is say, Hey,
import, you know, my library dot executable and do that.

00:17:38.250 --> 00:17:41.730
And same thing for test suite import my library dot test suite, and do that.

00:17:42.660 --> 00:17:53.040
Um, we actually do this for our executable and I encourage everyone to do that
of like, if you're going to write some type of CLI that you want to upload to.

00:17:54.389 --> 00:17:57.000
Put all of the actual business logic in a library.

00:17:57.120 --> 00:18:00.960
And that way, if people want to use it in other Haskell programs, they can.

00:18:01.139 --> 00:18:03.600
And the perfect example of this is HLint.

00:18:04.399 --> 00:18:12.720
They expose, or they Neal exposes the entire, um, API
as, you know, just a regular module that you can use.

00:18:12.720 --> 00:18:14.730
So if you want to use it on the command line, you can do that.

00:18:14.730 --> 00:18:16.750
If you want to use it in your library, you can do that too.

00:18:18.105 --> 00:18:21.735
Um, but what Gabe is suggesting here is even more extreme, right?

00:18:22.215 --> 00:18:29.865
He wants you to put your entire test suite into your library
and that's crazy, right, Kim with like, why would you do that?

00:18:30.675 --> 00:18:33.435
>> Well, I'm in why not at this point.

00:18:33.435 --> 00:18:39.465
I mean, he, he, he says, you know, don't do it for open
source projects, but if you have a proprietary project you're

00:18:39.465 --> 00:18:44.955
not putting out there, like, it seems to be a better move.

00:18:46.320 --> 00:18:49.770
And I'm sorry, I'm just trying to,

00:18:50.160 --> 00:18:51.250
>> catch up a little bit more on it.

00:18:51.360 --> 00:18:51.750
You're good.

00:18:51.750 --> 00:19:04.230
So, so I think the main benefit he poses here is that for the cabal
command line tool, um, if you want to bring up a rebel for your project,

00:19:05.220 --> 00:19:14.290
cabal, can't load your library and your executable or your test suite or
whatever else at the same time, it can only pick one component to do at.

00:19:15.360 --> 00:19:24.090
So, if you want to like, run your test suite in the REPL, because you're
editing it and you want to get some quick feedback, you can do that.

00:19:24.090 --> 00:19:30.540
But as soon as you make a change to your library and you go and
reload your test suite, it's not going to pick that change up.

00:19:30.659 --> 00:19:34.230
You have to close the whole REPL and start it
up again, which is a huge pain in the butt.

00:19:34.409 --> 00:19:34.800
Right.

00:19:34.959 --> 00:19:35.159
>> Right.

00:19:36.030 --> 00:19:39.810
So, yeah, which I mean that, that would keep the rebel

00:19:39.810 --> 00:19:40.260
>> development.

00:19:42.225 --> 00:19:42.435
Yeah.

00:19:42.465 --> 00:19:50.625
And, and I'm saying rebel, but this applies to like GHC ID as
well, because that's just a rebel under the hood, under the hood.

00:19:51.315 --> 00:19:51.645
Yeah.

00:19:52.665 --> 00:20:00.615
Um, and I mentioned that for us, we have our executable implemented
like this already, but we don't do this for our test suite.

00:20:00.795 --> 00:20:06.075
And I think one of the reasons why is that we
use stack as our build tool and stack actually.

00:20:07.170 --> 00:20:10.440
Load up the REPL with your library and your test suite at the same time.

00:20:10.530 --> 00:20:13.560
So we haven't run into this particular limitation,

00:20:15.300 --> 00:20:18.600
>> but if you're using Cabal would be worth a shot.

00:20:20.250 --> 00:20:20.490
>> Yeah.

00:20:20.520 --> 00:20:23.190
And it'll also give you quicker recompiles on your test suite.

00:20:23.520 --> 00:20:29.370
So normally if you changed anything in your library at
all, your test suite naturally depends on your library.

00:20:29.430 --> 00:20:33.690
So the whole thing has to get rebuilt because that entire component has changed.

00:20:33.690 --> 00:20:35.100
So it assumes everything is busted.

00:20:36.360 --> 00:20:41.909
If you have, you know, file a and file a, has a test associated with it.

00:20:41.909 --> 00:20:42.750
And same for B.

00:20:43.320 --> 00:20:47.490
Then if you change a B and BS test, won't need to be rebuilt.

00:20:47.520 --> 00:20:49.260
So that feedback loop will be quicker.

00:20:50.790 --> 00:20:51.149
Nice.

00:20:52.440 --> 00:20:52.649
>> Yeah.

00:20:52.770 --> 00:20:55.020
It seems, seems like a useful thing.

00:20:56.370 --> 00:20:56.700
>> Yeah.

00:20:57.000 --> 00:20:57.300
Yeah.

00:20:57.360 --> 00:20:59.550
I, I am excited to try it out.

00:20:59.550 --> 00:21:00.720
I've never set up any of my projects.

00:21:01.500 --> 00:21:03.750
With the test suite, like mixed in with the regular code.

00:21:03.750 --> 00:21:05.220
So I want to try that out and see how it goes.

00:21:05.490 --> 00:21:05.670
Yeah.

00:21:05.790 --> 00:21:06.380
Maybe we can

00:21:06.990 --> 00:21:15.180
>> throw it into our, since our test suite always seems to
get, be getting re compiled as we add more tests, it's more tedious,

00:21:15.210 --> 00:21:15.510
>> you know?

00:21:16.860 --> 00:21:17.160
Yeah.

00:21:17.460 --> 00:21:20.190
Tedious, driven development, TDM driven development.

00:21:21.180 --> 00:21:21.600
>> Perfect.

00:21:21.630 --> 00:21:22.650
That's the new TDD.

00:21:24.300 --> 00:21:28.740
>> Um, but yeah, and, uh, like our test suite frequently.

00:21:29.700 --> 00:21:37.920
It doesn't like it's got a hundred or 200 modules in the test suite,
and usually you haven't touched any source files that would cause the

00:21:37.920 --> 00:21:40.320
test suite to get rebuilt, but the whole thing gets rebuilt anyway.

00:21:40.350 --> 00:21:41.520
So that's a bit annoying.

00:21:42.510 --> 00:21:43.500
It'd be nice to avoid that.

00:21:44.160 --> 00:21:44.250
>> Yeah.

00:21:44.280 --> 00:21:47.490
It could be a quality of life improvement for us here at ACL.

00:21:49.200 --> 00:21:49.560
>> Sure.

00:21:50.850 --> 00:21:50.990
All right.

00:21:50.990 --> 00:21:55.740
So we've reached the end here of yet another wonderful Gabe Gonzales article.

00:21:56.200 --> 00:22:02.280
>> You know, I was just going to ask you as my shirt, twin,
you know, with which of these three was your, what's your favorite?

00:22:04.139 --> 00:22:07.860
>> Ooh, I think my favorite is the vertical versus horizontal.

00:22:07.980 --> 00:22:16.290
And, uh, I just feel like it, it's such a good way to
think about architecting your application, even though we

00:22:16.290 --> 00:22:18.420
don't, you know, like rigidly adhere to it all the time.

00:22:19.500 --> 00:22:26.520
I think that any given vertical slices, probably going to
be more useful than the, the corresponding horizontal slice.

00:22:26.610 --> 00:22:33.209
So like, if you just give me here's all the Intercom stuff to keep using that
one, as an example, I'll be able to look at that and figure out what's going on.

00:22:33.240 --> 00:22:35.639
Versus if you say here's all of our types.

00:22:36.270 --> 00:22:36.720
Okay.

00:22:38.010 --> 00:22:38.580
>> Oh, thanks.

00:22:38.639 --> 00:22:39.000
Yeah.

00:22:39.149 --> 00:22:42.480
It gives you a little bit more clarity of what should be happening here.

00:22:43.649 --> 00:22:46.409
The Intercom slice deals and talks to Intercom

00:22:46.860 --> 00:22:47.220
>> to return.

00:22:48.750 --> 00:22:49.740
Which one's your fave cam?

00:22:50.340 --> 00:22:50.639
Uh, I

00:22:50.639 --> 00:22:52.770
>> would also say vertical versus horizontal.

00:22:52.770 --> 00:22:57.929
I think it's something that we've kind of wrestled with in the past.

00:22:57.929 --> 00:23:07.020
Just of like figuring out sometimes we, we kind of have pushes towards
right let's silo stuff, then there's times where they're like, okay,

00:23:07.080 --> 00:23:10.830
yeah, let's put it in a more general spot that more things can use.

00:23:10.830 --> 00:23:15.000
And I, I just think for us, it depends on what that is.

00:23:15.824 --> 00:23:18.104
Is it a new API integration with a third party?

00:23:18.104 --> 00:23:22.125
Is it a new way of importing and exporting types?

00:23:22.125 --> 00:23:25.334
Is it, you know, a new way of querying the database?

00:23:25.334 --> 00:23:33.645
Like what's, you know, so I think for us, it just depends on, I mean,
sometimes it's almost like they're their own vertical, like, oh, this

00:23:33.645 --> 00:23:41.955
type is a vertical, but it's not because it's used across multiple,
you know, it's like a silo with a bunch of tubes going to other places.

00:23:43.320 --> 00:23:45.659
>> I don't think that's how we're really stretching the metaphor here.

00:23:45.899 --> 00:23:53.370
>> You know, I'm doing what I can here, you know,
but no, I think, uh, I think that would be mine as well.

00:23:54.389 --> 00:23:54.750
>> Cool.

00:23:55.050 --> 00:23:55.290
Yeah.

00:23:55.320 --> 00:24:02.909
And, and again, just to really underscore this, like, um, by
designing those vertical slices, we, in the course of development,

00:24:02.909 --> 00:24:10.395
we have asked ourselves, what would this look like if we turned it
into a separate, like, And we don't always follow through on that.

00:24:10.455 --> 00:24:16.245
You know, we don't always end up publishing another library as a
result of that, but it's still useful to go through those steps.

00:24:16.364 --> 00:24:20.655
And sometimes we do end up publishing a library
and then, you know, it's actually useful.

00:24:20.655 --> 00:24:22.784
It's not just a bag of types or, or whatever else.

00:24:22.784 --> 00:24:24.675
It's like, oh, you can use this to talk to.

00:24:25.004 --> 00:24:31.185
We haven't published in Intercom library, but you can use
this to talk to, um, Sentry or Recurly or something like that.

00:24:31.195 --> 00:24:32.385
So you're saying

00:24:33.215 --> 00:24:37.395
>> WWLD what would a library.

00:24:38.399 --> 00:24:39.990
>> Oh, yeah, there you go.

00:24:40.050 --> 00:24:44.850
I was thinking WWGGD what would Gabe Gonzalez do

00:24:45.760 --> 00:24:46.649
>> that's also a good one.

00:24:47.520 --> 00:24:50.760
Uh, so look out for on the Haskell weekly website for t-shirts.

00:24:51.740 --> 00:24:54.504
WWGGD and WWLD.

00:24:55.575 --> 00:24:59.024
So that should be coming to a Haskell weekly near you

00:24:59.024 --> 00:24:59.354
>> soon.

00:25:01.725 --> 00:25:02.145
All right.

00:25:02.145 --> 00:25:04.125
Well, that's all I've got, you got anything else, cam?

00:25:04.395 --> 00:25:05.865
Nah, I think that's about it.

00:25:06.705 --> 00:25:07.064
Cool.

00:25:07.155 --> 00:25:10.165
Well, that will do it for us this week.

00:25:10.255 --> 00:25:13.825
Uh, thank you so much for listening to the Haskell weekly podcast.

00:25:14.035 --> 00:25:18.075
I have been your host Taylor Fausak and with me today was Cameron Gera.

00:25:18.565 --> 00:25:26.315
If you want to find out more about us, everything you want to
know is at our website and our website is HaskellWeekly.News.

00:25:26.815 --> 00:25:27.505
I just realized

00:25:27.505 --> 00:25:31.015
>> that I didn't say my name once, so I
don't have to introduce myself, but this is nice.

00:25:32.215 --> 00:25:37.345
But anyways, Haskell Weekly is brought to
you, uh, by it pro TV and ACI Learning.

00:25:38.140 --> 00:25:49.000
Also our employer, they would like to offer you 30% off the lifetime of your
subscription at ITPro.TV by using the promo code HaskellWeekly30 at checkout.

00:25:49.150 --> 00:25:54.580
And if you're not interested in paying for a membership, we also
offer a free one that will get you access to some great content.

00:25:55.090 --> 00:25:57.560
But I think that doesn't about blah, blah.

00:25:57.560 --> 00:25:57.940
Blah-blah-blah.

00:25:58.930 --> 00:25:59.380
Wow.

00:25:59.470 --> 00:26:01.600
I can't talk today, but that's okay.

00:26:01.960 --> 00:26:04.090
Uh, I think that about does it for us.

00:26:04.120 --> 00:26:07.030
Thank you for joining us on the Haskell with
the podcast and we'll see you next week.
